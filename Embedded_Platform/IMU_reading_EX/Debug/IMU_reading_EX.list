
IMU_reading_EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  08008570  08008570  00009570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d08  08008d08  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008d08  08008d08  00009d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d10  08008d10  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d10  08008d10  00009d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d14  08008d14  00009d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008d18  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001d4  08008eec  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08008eec  0000a478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3d0  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8a  00000000  00000000  000175d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00019560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000954  00000000  00000000  0001a198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002abef  00000000  00000000  0001aaec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e75b  00000000  00000000  000456db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff612  00000000  00000000  00053e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153448  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000427c  00000000  00000000  0015348c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00157708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008558 	.word	0x08008558

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	08008558 	.word	0x08008558

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b0af      	sub	sp, #188	@ 0xbc
 8000bdc:	af2a      	add	r7, sp, #168	@ 0xa8
 8000bde:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	799b      	ldrb	r3, [r3, #6]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8000bf0:	687c      	ldr	r4, [r7, #4]
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000bf6:	f107 030e 	add.w	r3, r7, #14
 8000bfa:	9328      	str	r3, [sp, #160]	@ 0xa0
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	9327      	str	r3, [sp, #156]	@ 0x9c
 8000c00:	4668      	mov	r0, sp
 8000c02:	f104 0310 	add.w	r3, r4, #16
 8000c06:	229c      	movs	r2, #156	@ 0x9c
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f005 fe94 	bl	8006936 <memcpy>
 8000c0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c12:	f001 fbce 	bl	80023b2 <bno055_read_regs>
 8000c16:	4603      	mov	r3, r0
 8000c18:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <bno055_init+0x4c>
        return err;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	e0b6      	b.n	8000d92 <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8000c24:	7bbb      	ldrb	r3, [r7, #14]
 8000c26:	2ba0      	cmp	r3, #160	@ 0xa0
 8000c28:	d001      	beq.n	8000c2e <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	e0b1      	b.n	8000d92 <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8000c2e:	2100      	movs	r1, #0
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f001 fa8c 	bl	800214e <bno055_set_opmode>
 8000c36:	4603      	mov	r3, r0
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <bno055_init+0x6c>
        return err;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	e0a6      	b.n	8000d92 <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8000c44:	2002      	movs	r0, #2
 8000c46:	f002 f8e9 	bl	8002e1c <HAL_Delay>
    bno055_reset(imu);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f001 fb6b 	bl	8002326 <bno055_reset>
    HAL_Delay(5000);
 8000c50:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000c54:	f002 f8e2 	bl	8002e1c <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000c58:	2100      	movs	r1, #0
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f001 fb06 	bl	800226c <bno055_set_pwr_mode>
 8000c60:	4603      	mov	r3, r0
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <bno055_init+0x96>
        return err;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	e091      	b.n	8000d92 <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 8000c6e:	200a      	movs	r0, #10
 8000c70:	f002 f8d4 	bl	8002e1c <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000c74:	2100      	movs	r1, #0
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f001 fbff 	bl	800247a <bno055_set_page>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	73fb      	strb	r3, [r7, #15]
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <bno055_init+0xb2>
        return err;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	e083      	b.n	8000d92 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8000c8a:	200c      	movs	r0, #12
 8000c8c:	f002 f8c6 	bl	8002e1c <HAL_Delay>
    bno055_on(imu);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f001 fb6b 	bl	800236c <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	791b      	ldrb	r3, [r3, #4]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f001 fa56 	bl	800214e <bno055_set_opmode>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <bno055_init+0xd8>
        return err;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	e070      	b.n	8000d92 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8000cb0:	2018      	movs	r0, #24
 8000cb2:	f002 f8b3 	bl	8002e1c <HAL_Delay>

    imu->temperature = &bno055_temperature;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a38      	ldr	r2, [pc, #224]	@ (8000d9c <bno055_init+0x1c4>)
 8000cba:	625a      	str	r2, [r3, #36]	@ 0x24
    imu->acc_x = &bno055_acc_x;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a38      	ldr	r2, [pc, #224]	@ (8000da0 <bno055_init+0x1c8>)
 8000cc0:	629a      	str	r2, [r3, #40]	@ 0x28
    imu->acc_y = &bno055_acc_y;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a37      	ldr	r2, [pc, #220]	@ (8000da4 <bno055_init+0x1cc>)
 8000cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
    imu->acc_z = &bno055_acc_z;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a37      	ldr	r2, [pc, #220]	@ (8000da8 <bno055_init+0x1d0>)
 8000ccc:	631a      	str	r2, [r3, #48]	@ 0x30
    imu->acc = &bno055_acc;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a36      	ldr	r2, [pc, #216]	@ (8000dac <bno055_init+0x1d4>)
 8000cd2:	635a      	str	r2, [r3, #52]	@ 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a36      	ldr	r2, [pc, #216]	@ (8000db0 <bno055_init+0x1d8>)
 8000cd8:	639a      	str	r2, [r3, #56]	@ 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a35      	ldr	r2, [pc, #212]	@ (8000db4 <bno055_init+0x1dc>)
 8000cde:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a35      	ldr	r2, [pc, #212]	@ (8000db8 <bno055_init+0x1e0>)
 8000ce4:	641a      	str	r2, [r3, #64]	@ 0x40
    imu->linear_acc = &bno055_linear_acc;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a34      	ldr	r2, [pc, #208]	@ (8000dbc <bno055_init+0x1e4>)
 8000cea:	645a      	str	r2, [r3, #68]	@ 0x44
    imu->gyro_x = &bno055_gyro_x;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a34      	ldr	r2, [pc, #208]	@ (8000dc0 <bno055_init+0x1e8>)
 8000cf0:	649a      	str	r2, [r3, #72]	@ 0x48
    imu->gyro_y = &bno055_gyro_y;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a33      	ldr	r2, [pc, #204]	@ (8000dc4 <bno055_init+0x1ec>)
 8000cf6:	64da      	str	r2, [r3, #76]	@ 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a33      	ldr	r2, [pc, #204]	@ (8000dc8 <bno055_init+0x1f0>)
 8000cfc:	651a      	str	r2, [r3, #80]	@ 0x50
    imu->gyro = &bno055_gyro;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a32      	ldr	r2, [pc, #200]	@ (8000dcc <bno055_init+0x1f4>)
 8000d02:	655a      	str	r2, [r3, #84]	@ 0x54
    imu->mag_x = &bno055_mag_x;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a32      	ldr	r2, [pc, #200]	@ (8000dd0 <bno055_init+0x1f8>)
 8000d08:	659a      	str	r2, [r3, #88]	@ 0x58
    imu->mag_y = &bno055_mag_y;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a31      	ldr	r2, [pc, #196]	@ (8000dd4 <bno055_init+0x1fc>)
 8000d0e:	65da      	str	r2, [r3, #92]	@ 0x5c
    imu->mag_z = &bno055_mag_z;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a31      	ldr	r2, [pc, #196]	@ (8000dd8 <bno055_init+0x200>)
 8000d14:	661a      	str	r2, [r3, #96]	@ 0x60
    imu->mag = &bno055_mag;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a30      	ldr	r2, [pc, #192]	@ (8000ddc <bno055_init+0x204>)
 8000d1a:	665a      	str	r2, [r3, #100]	@ 0x64
    imu->gravity_x = &bno055_gravity_x;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a30      	ldr	r2, [pc, #192]	@ (8000de0 <bno055_init+0x208>)
 8000d20:	669a      	str	r2, [r3, #104]	@ 0x68
    imu->gravity_y = &bno055_gravity_y;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a2f      	ldr	r2, [pc, #188]	@ (8000de4 <bno055_init+0x20c>)
 8000d26:	66da      	str	r2, [r3, #108]	@ 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a2f      	ldr	r2, [pc, #188]	@ (8000de8 <bno055_init+0x210>)
 8000d2c:	671a      	str	r2, [r3, #112]	@ 0x70
    imu->gravity = &bno055_gravity;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a2e      	ldr	r2, [pc, #184]	@ (8000dec <bno055_init+0x214>)
 8000d32:	675a      	str	r2, [r3, #116]	@ 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a2e      	ldr	r2, [pc, #184]	@ (8000df0 <bno055_init+0x218>)
 8000d38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    imu->euler_roll = &bno055_euler_roll;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8000df4 <bno055_init+0x21c>)
 8000d40:	679a      	str	r2, [r3, #120]	@ 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a2c      	ldr	r2, [pc, #176]	@ (8000df8 <bno055_init+0x220>)
 8000d46:	67da      	str	r2, [r3, #124]	@ 0x7c
    imu->euler = &bno055_euler;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a2c      	ldr	r2, [pc, #176]	@ (8000dfc <bno055_init+0x224>)
 8000d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a2b      	ldr	r2, [pc, #172]	@ (8000e00 <bno055_init+0x228>)
 8000d54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8000e04 <bno055_init+0x22c>)
 8000d5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a29      	ldr	r2, [pc, #164]	@ (8000e08 <bno055_init+0x230>)
 8000d64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a28      	ldr	r2, [pc, #160]	@ (8000e0c <bno055_init+0x234>)
 8000d6c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    imu->quaternion = &bno055_quaternion;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a27      	ldr	r2, [pc, #156]	@ (8000e10 <bno055_init+0x238>)
 8000d74:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    imu->acc_config = &bno055_acc_conf;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a26      	ldr	r2, [pc, #152]	@ (8000e14 <bno055_init+0x23c>)
 8000d7c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a25      	ldr	r2, [pc, #148]	@ (8000e18 <bno055_init+0x240>)
 8000d84:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    imu->mag_config = &bno055_mag_conf;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a24      	ldr	r2, [pc, #144]	@ (8000e1c <bno055_init+0x244>)
 8000d8c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    return BNO_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd90      	pop	{r4, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	08000e21 	.word	0x08000e21
 8000da0:	08000e89 	.word	0x08000e89
 8000da4:	08000f09 	.word	0x08000f09
 8000da8:	08000f89 	.word	0x08000f89
 8000dac:	08001009 	.word	0x08001009
 8000db0:	080010d5 	.word	0x080010d5
 8000db4:	0800115d 	.word	0x0800115d
 8000db8:	080011e5 	.word	0x080011e5
 8000dbc:	0800126d 	.word	0x0800126d
 8000dc0:	08001339 	.word	0x08001339
 8000dc4:	080013b9 	.word	0x080013b9
 8000dc8:	08001439 	.word	0x08001439
 8000dcc:	080014b9 	.word	0x080014b9
 8000dd0:	08001585 	.word	0x08001585
 8000dd4:	080015f1 	.word	0x080015f1
 8000dd8:	0800165d 	.word	0x0800165d
 8000ddc:	080016c9 	.word	0x080016c9
 8000de0:	0800177d 	.word	0x0800177d
 8000de4:	08001801 	.word	0x08001801
 8000de8:	08001885 	.word	0x08001885
 8000dec:	08001909 	.word	0x08001909
 8000df0:	080019d5 	.word	0x080019d5
 8000df4:	08001a61 	.word	0x08001a61
 8000df8:	08001aed 	.word	0x08001aed
 8000dfc:	08001b79 	.word	0x08001b79
 8000e00:	08001c45 	.word	0x08001c45
 8000e04:	08001cb5 	.word	0x08001cb5
 8000e08:	08001d25 	.word	0x08001d25
 8000e0c:	08001d95 	.word	0x08001d95
 8000e10:	08001e05 	.word	0x08001e05
 8000e14:	08001ee1 	.word	0x08001ee1
 8000e18:	08001fb1 	.word	0x08001fb1
 8000e1c:	0800207f 	.word	0x0800207f

08000e20 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b0af      	sub	sp, #188	@ 0xbc
 8000e24:	af2a      	add	r7, sp, #168	@ 0xa8
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 8000e2e:	687c      	ldr	r4, [r7, #4]
 8000e30:	2301      	movs	r3, #1
 8000e32:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000e34:	f107 030e 	add.w	r3, r7, #14
 8000e38:	9328      	str	r3, [sp, #160]	@ 0xa0
 8000e3a:	2334      	movs	r3, #52	@ 0x34
 8000e3c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8000e3e:	4668      	mov	r0, sp
 8000e40:	f104 0310 	add.w	r3, r4, #16
 8000e44:	229c      	movs	r2, #156	@ 0x9c
 8000e46:	4619      	mov	r1, r3
 8000e48:	f005 fd75 	bl	8006936 <memcpy>
 8000e4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e50:	f001 faaf 	bl	80023b2 <bno055_read_regs>
 8000e54:	4603      	mov	r3, r0
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <bno055_temperature+0x42>
        return err;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	e00d      	b.n	8000e7e <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7bdb      	ldrb	r3, [r3, #15]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d004      	beq.n	8000e74 <bno055_temperature+0x54>
 8000e6a:	7bbb      	ldrb	r3, [r7, #14]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	e001      	b.n	8000e78 <bno055_temperature+0x58>
 8000e74:	7bbb      	ldrb	r3, [r7, #14]
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd90      	pop	{r4, r7, pc}
	...

08000e88 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b0af      	sub	sp, #188	@ 0xbc
 8000e8c:	af2a      	add	r7, sp, #168	@ 0xa8
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8000e92:	687c      	ldr	r4, [r7, #4]
 8000e94:	2302      	movs	r3, #2
 8000e96:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8000e9e:	2308      	movs	r3, #8
 8000ea0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8000ea2:	4668      	mov	r0, sp
 8000ea4:	f104 0310 	add.w	r3, r4, #16
 8000ea8:	229c      	movs	r2, #156	@ 0x9c
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f005 fd43 	bl	8006936 <memcpy>
 8000eb0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000eb4:	f001 fa7d 	bl	80023b2 <bno055_read_regs>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <bno055_acc_x+0x3e>
        return err;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	e019      	b.n	8000efa <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000ec6:	7b7b      	ldrb	r3, [r7, #13]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	7b3b      	ldrb	r3, [r7, #12]
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	ee07 3a90 	vmov	s15, r3
 8000ed8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <bno055_acc_x+0x62>
 8000ee4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000f04 <bno055_acc_x+0x7c>
 8000ee8:	e001      	b.n	8000eee <bno055_acc_x+0x66>
 8000eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000ef8:	2300      	movs	r3, #0
};
 8000efa:	4618      	mov	r0, r3
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd90      	pop	{r4, r7, pc}
 8000f02:	bf00      	nop
 8000f04:	42c80000 	.word	0x42c80000

08000f08 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b0af      	sub	sp, #188	@ 0xbc
 8000f0c:	af2a      	add	r7, sp, #168	@ 0xa8
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8000f12:	687c      	ldr	r4, [r7, #4]
 8000f14:	2302      	movs	r3, #2
 8000f16:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8000f1e:	230a      	movs	r3, #10
 8000f20:	9327      	str	r3, [sp, #156]	@ 0x9c
 8000f22:	4668      	mov	r0, sp
 8000f24:	f104 0310 	add.w	r3, r4, #16
 8000f28:	229c      	movs	r2, #156	@ 0x9c
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f005 fd03 	bl	8006936 <memcpy>
 8000f30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f34:	f001 fa3d 	bl	80023b2 <bno055_read_regs>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <bno055_acc_y+0x3e>
        return err;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	e019      	b.n	8000f7a <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000f46:	7b7b      	ldrb	r3, [r7, #13]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	7b3b      	ldrb	r3, [r7, #12]
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	ee07 3a90 	vmov	s15, r3
 8000f58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <bno055_acc_y+0x62>
 8000f64:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000f84 <bno055_acc_y+0x7c>
 8000f68:	e001      	b.n	8000f6e <bno055_acc_y+0x66>
 8000f6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000f78:	2300      	movs	r3, #0
};
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}
 8000f82:	bf00      	nop
 8000f84:	42c80000 	.word	0x42c80000

08000f88 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b0af      	sub	sp, #188	@ 0xbc
 8000f8c:	af2a      	add	r7, sp, #168	@ 0xa8
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8000f92:	687c      	ldr	r4, [r7, #4]
 8000f94:	2302      	movs	r3, #2
 8000f96:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8000f9e:	230c      	movs	r3, #12
 8000fa0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8000fa2:	4668      	mov	r0, sp
 8000fa4:	f104 0310 	add.w	r3, r4, #16
 8000fa8:	229c      	movs	r2, #156	@ 0x9c
 8000faa:	4619      	mov	r1, r3
 8000fac:	f005 fcc3 	bl	8006936 <memcpy>
 8000fb0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fb4:	f001 f9fd 	bl	80023b2 <bno055_read_regs>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <bno055_acc_z+0x3e>
        return err;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	e019      	b.n	8000ffa <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8000fc6:	7b7b      	ldrb	r3, [r7, #13]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	7b3b      	ldrb	r3, [r7, #12]
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <bno055_acc_z+0x62>
 8000fe4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001004 <bno055_acc_z+0x7c>
 8000fe8:	e001      	b.n	8000fee <bno055_acc_z+0x66>
 8000fea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8000fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8000ff8:	2300      	movs	r3, #0
};
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	42c80000 	.word	0x42c80000

08001008 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b0b1      	sub	sp, #196	@ 0xc4
 800100c:	af2a      	add	r7, sp, #168	@ 0xa8
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001012:	687c      	ldr	r4, [r7, #4]
 8001014:	2306      	movs	r3, #6
 8001016:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800101e:	2308      	movs	r3, #8
 8001020:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001022:	4668      	mov	r0, sp
 8001024:	f104 0310 	add.w	r3, r4, #16
 8001028:	229c      	movs	r2, #156	@ 0x9c
 800102a:	4619      	mov	r1, r3
 800102c:	f005 fc83 	bl	8006936 <memcpy>
 8001030:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001034:	f001 f9bd 	bl	80023b2 <bno055_read_regs>
 8001038:	4603      	mov	r3, r0
 800103a:	75fb      	strb	r3, [r7, #23]
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <bno055_acc+0x3e>
        return err;
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	e03f      	b.n	80010c6 <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <bno055_acc+0x4a>
 800104e:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <bno055_acc+0xc8>)
 8001050:	e001      	b.n	8001056 <bno055_acc+0x4e>
 8001052:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001056:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001058:	7a7b      	ldrb	r3, [r7, #9]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	7a3b      	ldrb	r3, [r7, #8]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800106e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800107c:	7afb      	ldrb	r3, [r7, #11]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	7abb      	ldrb	r3, [r7, #10]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21b      	sxth	r3, r3
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001092:	ed97 7a04 	vldr	s14, [r7, #16]
 8001096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80010a0:	7b7b      	ldrb	r3, [r7, #13]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	7b3b      	ldrb	r3, [r7, #12]
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80010ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80010c4:	2300      	movs	r3, #0
};
 80010c6:	4618      	mov	r0, r3
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	42c80000 	.word	0x42c80000

080010d4 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b0af      	sub	sp, #188	@ 0xbc
 80010d8:	af2a      	add	r7, sp, #168	@ 0xa8
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 80010de:	687c      	ldr	r4, [r7, #4]
 80010e0:	2302      	movs	r3, #2
 80010e2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80010ea:	2328      	movs	r3, #40	@ 0x28
 80010ec:	9327      	str	r3, [sp, #156]	@ 0x9c
 80010ee:	4668      	mov	r0, sp
 80010f0:	f104 0310 	add.w	r3, r4, #16
 80010f4:	229c      	movs	r2, #156	@ 0x9c
 80010f6:	4619      	mov	r1, r3
 80010f8:	f005 fc1d 	bl	8006936 <memcpy>
 80010fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001100:	f001 f957 	bl	80023b2 <bno055_read_regs>
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <bno055_linear_acc_x+0x3e>
        return err;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	e01e      	b.n	8001150 <bno055_linear_acc_x+0x7c>
    }

    *buf = (s16)((data[1] << 8) | data[0]) * precision_scaling_factor /
 8001112:	7b7b      	ldrb	r3, [r7, #13]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21a      	sxth	r2, r3
 8001118:	7b3b      	ldrb	r3, [r7, #12]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21b      	sxth	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001126:	fb02 f303 	mul.w	r3, r2, r3
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001136:	2b00      	cmp	r3, #0
 8001138:	d102      	bne.n	8001140 <bno055_linear_acc_x+0x6c>
 800113a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001158 <bno055_linear_acc_x+0x84>
 800113e:	e001      	b.n	8001144 <bno055_linear_acc_x+0x70>
 8001140:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) * precision_scaling_factor /
 8001144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800114e:	2300      	movs	r3, #0
};
 8001150:	4618      	mov	r0, r3
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	42c80000 	.word	0x42c80000

0800115c <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b0af      	sub	sp, #188	@ 0xbc
 8001160:	af2a      	add	r7, sp, #168	@ 0xa8
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001166:	687c      	ldr	r4, [r7, #4]
 8001168:	2302      	movs	r3, #2
 800116a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001172:	232a      	movs	r3, #42	@ 0x2a
 8001174:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001176:	4668      	mov	r0, sp
 8001178:	f104 0310 	add.w	r3, r4, #16
 800117c:	229c      	movs	r2, #156	@ 0x9c
 800117e:	4619      	mov	r1, r3
 8001180:	f005 fbd9 	bl	8006936 <memcpy>
 8001184:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001188:	f001 f913 	bl	80023b2 <bno055_read_regs>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <bno055_linear_acc_y+0x3e>
        return err;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	e01e      	b.n	80011d8 <bno055_linear_acc_y+0x7c>
    }

    *buf = (s16)((data[1] << 8) | data[0]) * precision_scaling_factor /
 800119a:	7b7b      	ldrb	r3, [r7, #13]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <bno055_linear_acc_y+0x6c>
 80011c2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80011e0 <bno055_linear_acc_y+0x84>
 80011c6:	e001      	b.n	80011cc <bno055_linear_acc_y+0x70>
 80011c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) * precision_scaling_factor /
 80011cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80011d6:	2300      	movs	r3, #0
};
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd90      	pop	{r4, r7, pc}
 80011e0:	42c80000 	.word	0x42c80000

080011e4 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b0af      	sub	sp, #188	@ 0xbc
 80011e8:	af2a      	add	r7, sp, #168	@ 0xa8
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80011ee:	687c      	ldr	r4, [r7, #4]
 80011f0:	2302      	movs	r3, #2
 80011f2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80011fa:	232c      	movs	r3, #44	@ 0x2c
 80011fc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80011fe:	4668      	mov	r0, sp
 8001200:	f104 0310 	add.w	r3, r4, #16
 8001204:	229c      	movs	r2, #156	@ 0x9c
 8001206:	4619      	mov	r1, r3
 8001208:	f005 fb95 	bl	8006936 <memcpy>
 800120c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001210:	f001 f8cf 	bl	80023b2 <bno055_read_regs>
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <bno055_linear_acc_z+0x3e>
        return err;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	e01e      	b.n	8001260 <bno055_linear_acc_z+0x7c>
    }

    *buf = (s16)((data[1] << 8) | data[0]) * precision_scaling_factor /
 8001222:	7b7b      	ldrb	r3, [r7, #13]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7b3b      	ldrb	r3, [r7, #12]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21b      	sxth	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <bno055_linear_acc_z+0x6c>
 800124a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001268 <bno055_linear_acc_z+0x84>
 800124e:	e001      	b.n	8001254 <bno055_linear_acc_z+0x70>
 8001250:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) * precision_scaling_factor /
 8001254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800125e:	2300      	movs	r3, #0
};
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	42c80000 	.word	0x42c80000

0800126c <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b0b1      	sub	sp, #196	@ 0xc4
 8001270:	af2a      	add	r7, sp, #168	@ 0xa8
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001276:	687c      	ldr	r4, [r7, #4]
 8001278:	2306      	movs	r3, #6
 800127a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001282:	2328      	movs	r3, #40	@ 0x28
 8001284:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001286:	4668      	mov	r0, sp
 8001288:	f104 0310 	add.w	r3, r4, #16
 800128c:	229c      	movs	r2, #156	@ 0x9c
 800128e:	4619      	mov	r1, r3
 8001290:	f005 fb51 	bl	8006936 <memcpy>
 8001294:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001298:	f001 f88b 	bl	80023b2 <bno055_read_regs>
 800129c:	4603      	mov	r3, r0
 800129e:	75fb      	strb	r3, [r7, #23]
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <bno055_linear_acc+0x3e>
        return err;
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	e03f      	b.n	800132a <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <bno055_linear_acc+0x4a>
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <bno055_linear_acc+0xc8>)
 80012b4:	e001      	b.n	80012ba <bno055_linear_acc+0x4e>
 80012b6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80012ba:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80012bc:	7a7b      	ldrb	r3, [r7, #9]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	7a3b      	ldrb	r3, [r7, #8]
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80012d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80012e0:	7afb      	ldrb	r3, [r7, #11]
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	7abb      	ldrb	r3, [r7, #10]
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80012fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001304:	7b7b      	ldrb	r3, [r7, #13]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21a      	sxth	r2, r3
 800130a:	7b3b      	ldrb	r3, [r7, #12]
 800130c:	b21b      	sxth	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b21b      	sxth	r3, r3
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800131a:	ed97 7a04 	vldr	s14, [r7, #16]
 800131e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001328:	2300      	movs	r3, #0
};
 800132a:	4618      	mov	r0, r3
 800132c:	371c      	adds	r7, #28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd90      	pop	{r4, r7, pc}
 8001332:	bf00      	nop
 8001334:	42c80000 	.word	0x42c80000

08001338 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b0af      	sub	sp, #188	@ 0xbc
 800133c:	af2a      	add	r7, sp, #168	@ 0xa8
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001342:	687c      	ldr	r4, [r7, #4]
 8001344:	2302      	movs	r3, #2
 8001346:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800134e:	2314      	movs	r3, #20
 8001350:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001352:	4668      	mov	r0, sp
 8001354:	f104 0310 	add.w	r3, r4, #16
 8001358:	229c      	movs	r2, #156	@ 0x9c
 800135a:	4619      	mov	r1, r3
 800135c:	f005 faeb 	bl	8006936 <memcpy>
 8001360:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001364:	f001 f825 	bl	80023b2 <bno055_read_regs>
 8001368:	4603      	mov	r3, r0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <bno055_gyro_x+0x3e>
        return err;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	e019      	b.n	80013aa <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001376:	7b7b      	ldrb	r3, [r7, #13]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b21a      	sxth	r2, r3
 800137c:	7b3b      	ldrb	r3, [r7, #12]
 800137e:	b21b      	sxth	r3, r3
 8001380:	4313      	orrs	r3, r2
 8001382:	b21b      	sxth	r3, r3
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <bno055_gyro_x+0x62>
 8001394:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001398:	e001      	b.n	800139e <bno055_gyro_x+0x66>
 800139a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80013b4 <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 800139e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80013a8:	2300      	movs	r3, #0
};
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd90      	pop	{r4, r7, pc}
 80013b2:	bf00      	nop
 80013b4:	44610000 	.word	0x44610000

080013b8 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b0af      	sub	sp, #188	@ 0xbc
 80013bc:	af2a      	add	r7, sp, #168	@ 0xa8
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80013c2:	687c      	ldr	r4, [r7, #4]
 80013c4:	2302      	movs	r3, #2
 80013c6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80013ce:	2316      	movs	r3, #22
 80013d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80013d2:	4668      	mov	r0, sp
 80013d4:	f104 0310 	add.w	r3, r4, #16
 80013d8:	229c      	movs	r2, #156	@ 0x9c
 80013da:	4619      	mov	r1, r3
 80013dc:	f005 faab 	bl	8006936 <memcpy>
 80013e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013e4:	f000 ffe5 	bl	80023b2 <bno055_read_regs>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <bno055_gyro_y+0x3e>
        return err;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	e019      	b.n	800142a <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80013f6:	7b7b      	ldrb	r3, [r7, #13]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	7b3b      	ldrb	r3, [r7, #12]
 80013fe:	b21b      	sxth	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b21b      	sxth	r3, r3
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001410:	2b00      	cmp	r3, #0
 8001412:	d102      	bne.n	800141a <bno055_gyro_y+0x62>
 8001414:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001418:	e001      	b.n	800141e <bno055_gyro_y+0x66>
 800141a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001434 <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 800141e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001428:	2300      	movs	r3, #0
};
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	bd90      	pop	{r4, r7, pc}
 8001432:	bf00      	nop
 8001434:	44610000 	.word	0x44610000

08001438 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b0af      	sub	sp, #188	@ 0xbc
 800143c:	af2a      	add	r7, sp, #168	@ 0xa8
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001442:	687c      	ldr	r4, [r7, #4]
 8001444:	2302      	movs	r3, #2
 8001446:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800144e:	2318      	movs	r3, #24
 8001450:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001452:	4668      	mov	r0, sp
 8001454:	f104 0310 	add.w	r3, r4, #16
 8001458:	229c      	movs	r2, #156	@ 0x9c
 800145a:	4619      	mov	r1, r3
 800145c:	f005 fa6b 	bl	8006936 <memcpy>
 8001460:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001464:	f000 ffa5 	bl	80023b2 <bno055_read_regs>
 8001468:	4603      	mov	r3, r0
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <bno055_gyro_z+0x3e>
        return err;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	e019      	b.n	80014aa <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001476:	7b7b      	ldrb	r3, [r7, #13]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	b21a      	sxth	r2, r3
 800147c:	7b3b      	ldrb	r3, [r7, #12]
 800147e:	b21b      	sxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b21b      	sxth	r3, r3
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <bno055_gyro_z+0x62>
 8001494:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001498:	e001      	b.n	800149e <bno055_gyro_z+0x66>
 800149a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80014b4 <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 800149e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80014a8:	2300      	movs	r3, #0
};
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd90      	pop	{r4, r7, pc}
 80014b2:	bf00      	nop
 80014b4:	44610000 	.word	0x44610000

080014b8 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b0b1      	sub	sp, #196	@ 0xc4
 80014bc:	af2a      	add	r7, sp, #168	@ 0xa8
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 80014c2:	687c      	ldr	r4, [r7, #4]
 80014c4:	2306      	movs	r3, #6
 80014c6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80014ce:	2314      	movs	r3, #20
 80014d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80014d2:	4668      	mov	r0, sp
 80014d4:	f104 0310 	add.w	r3, r4, #16
 80014d8:	229c      	movs	r2, #156	@ 0x9c
 80014da:	4619      	mov	r1, r3
 80014dc:	f005 fa2b 	bl	8006936 <memcpy>
 80014e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014e4:	f000 ff65 	bl	80023b2 <bno055_read_regs>
 80014e8:	4603      	mov	r3, r0
 80014ea:	75fb      	strb	r3, [r7, #23]
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <bno055_gyro+0x3e>
        return err;
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	e03f      	b.n	8001576 <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <bno055_gyro+0x4c>
 80014fe:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001502:	e000      	b.n	8001506 <bno055_gyro+0x4e>
 8001504:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001506:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001508:	7a7b      	ldrb	r3, [r7, #9]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	7a3b      	ldrb	r3, [r7, #8]
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21b      	sxth	r3, r3
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800151e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800152c:	7afb      	ldrb	r3, [r7, #11]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	b21a      	sxth	r2, r3
 8001532:	7abb      	ldrb	r3, [r7, #10]
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b21b      	sxth	r3, r3
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001542:	ed97 7a04 	vldr	s14, [r7, #16]
 8001546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001550:	7b7b      	ldrb	r3, [r7, #13]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	7b3b      	ldrb	r3, [r7, #12]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21b      	sxth	r3, r3
 800155e:	ee07 3a90 	vmov	s15, r3
 8001562:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001566:	ed97 7a04 	vldr	s14, [r7, #16]
 800156a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	371c      	adds	r7, #28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd90      	pop	{r4, r7, pc}
 800157e:	bf00      	nop
 8001580:	44610000 	.word	0x44610000

08001584 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b0af      	sub	sp, #188	@ 0xbc
 8001588:	af2a      	add	r7, sp, #168	@ 0xa8
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 800158e:	687c      	ldr	r4, [r7, #4]
 8001590:	2302      	movs	r3, #2
 8001592:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	9328      	str	r3, [sp, #160]	@ 0xa0
 800159a:	230e      	movs	r3, #14
 800159c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800159e:	4668      	mov	r0, sp
 80015a0:	f104 0310 	add.w	r3, r4, #16
 80015a4:	229c      	movs	r2, #156	@ 0x9c
 80015a6:	4619      	mov	r1, r3
 80015a8:	f005 f9c5 	bl	8006936 <memcpy>
 80015ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015b0:	f000 feff 	bl	80023b2 <bno055_read_regs>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <bno055_mag_x+0x3e>
        return err;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	e012      	b.n	80015e8 <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80015c2:	7b7b      	ldrb	r3, [r7, #13]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	7b3b      	ldrb	r3, [r7, #12]
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80015dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}

080015f0 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b0af      	sub	sp, #188	@ 0xbc
 80015f4:	af2a      	add	r7, sp, #168	@ 0xa8
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80015fa:	687c      	ldr	r4, [r7, #4]
 80015fc:	2302      	movs	r3, #2
 80015fe:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001606:	2310      	movs	r3, #16
 8001608:	9327      	str	r3, [sp, #156]	@ 0x9c
 800160a:	4668      	mov	r0, sp
 800160c:	f104 0310 	add.w	r3, r4, #16
 8001610:	229c      	movs	r2, #156	@ 0x9c
 8001612:	4619      	mov	r1, r3
 8001614:	f005 f98f 	bl	8006936 <memcpy>
 8001618:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800161c:	f000 fec9 	bl	80023b2 <bno055_read_regs>
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <bno055_mag_y+0x3e>
        return err;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	e012      	b.n	8001654 <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	b21a      	sxth	r2, r3
 8001634:	7b3b      	ldrb	r3, [r7, #12]
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	b21b      	sxth	r3, r3
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001644:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b0af      	sub	sp, #188	@ 0xbc
 8001660:	af2a      	add	r7, sp, #168	@ 0xa8
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001666:	687c      	ldr	r4, [r7, #4]
 8001668:	2302      	movs	r3, #2
 800166a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001672:	2312      	movs	r3, #18
 8001674:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001676:	4668      	mov	r0, sp
 8001678:	f104 0310 	add.w	r3, r4, #16
 800167c:	229c      	movs	r2, #156	@ 0x9c
 800167e:	4619      	mov	r1, r3
 8001680:	f005 f959 	bl	8006936 <memcpy>
 8001684:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001688:	f000 fe93 	bl	80023b2 <bno055_read_regs>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <bno055_mag_z+0x3e>
        return err;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	e012      	b.n	80016c0 <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800169a:	7b7b      	ldrb	r3, [r7, #13]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	b21a      	sxth	r2, r3
 80016a0:	7b3b      	ldrb	r3, [r7, #12]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80016b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}

080016c8 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b0af      	sub	sp, #188	@ 0xbc
 80016cc:	af2a      	add	r7, sp, #168	@ 0xa8
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 80016d2:	687c      	ldr	r4, [r7, #4]
 80016d4:	2306      	movs	r3, #6
 80016d6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80016de:	230e      	movs	r3, #14
 80016e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80016e2:	4668      	mov	r0, sp
 80016e4:	f104 0310 	add.w	r3, r4, #16
 80016e8:	229c      	movs	r2, #156	@ 0x9c
 80016ea:	4619      	mov	r1, r3
 80016ec:	f005 f923 	bl	8006936 <memcpy>
 80016f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016f4:	f000 fe5d 	bl	80023b2 <bno055_read_regs>
 80016f8:	4603      	mov	r3, r0
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <bno055_mag+0x3e>
        return err;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	e036      	b.n	8001774 <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001706:	7a7b      	ldrb	r3, [r7, #9]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b21a      	sxth	r2, r3
 800170c:	7a3b      	ldrb	r3, [r7, #8]
 800170e:	b21b      	sxth	r3, r3
 8001710:	4313      	orrs	r3, r2
 8001712:	b21b      	sxth	r3, r3
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800171c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001720:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 800172a:	7afb      	ldrb	r3, [r7, #11]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b21a      	sxth	r2, r3
 8001730:	7abb      	ldrb	r3, [r7, #10]
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b21b      	sxth	r3, r3
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001740:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001744:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 800174e:	7b7b      	ldrb	r3, [r7, #13]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b21a      	sxth	r2, r3
 8001754:	7b3b      	ldrb	r3, [r7, #12]
 8001756:	b21b      	sxth	r3, r3
 8001758:	4313      	orrs	r3, r2
 800175a:	b21b      	sxth	r3, r3
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001764:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8001772:	2300      	movs	r3, #0
};
 8001774:	4618      	mov	r0, r3
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	bd90      	pop	{r4, r7, pc}

0800177c <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b0b1      	sub	sp, #196	@ 0xc4
 8001780:	af2a      	add	r7, sp, #168	@ 0xa8
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001786:	687c      	ldr	r4, [r7, #4]
 8001788:	2302      	movs	r3, #2
 800178a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001792:	232e      	movs	r3, #46	@ 0x2e
 8001794:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001796:	4668      	mov	r0, sp
 8001798:	f104 0310 	add.w	r3, r4, #16
 800179c:	229c      	movs	r2, #156	@ 0x9c
 800179e:	4619      	mov	r1, r3
 80017a0:	f005 f8c9 	bl	8006936 <memcpy>
 80017a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017a8:	f000 fe03 	bl	80023b2 <bno055_read_regs>
 80017ac:	4603      	mov	r3, r0
 80017ae:	75fb      	strb	r3, [r7, #23]
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <bno055_gravity_x+0x3e>
        return err;
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	e01b      	b.n	80017f2 <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <bno055_gravity_x+0x4a>
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <bno055_gravity_x+0x80>)
 80017c4:	e001      	b.n	80017ca <bno055_gravity_x+0x4e>
 80017c6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80017ca:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80017cc:	7b7b      	ldrb	r3, [r7, #13]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	7b3b      	ldrb	r3, [r7, #12]
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b21b      	sxth	r3, r3
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80017e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	42c80000 	.word	0x42c80000

08001800 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b0b1      	sub	sp, #196	@ 0xc4
 8001804:	af2a      	add	r7, sp, #168	@ 0xa8
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800180a:	687c      	ldr	r4, [r7, #4]
 800180c:	2302      	movs	r3, #2
 800180e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001816:	2330      	movs	r3, #48	@ 0x30
 8001818:	9327      	str	r3, [sp, #156]	@ 0x9c
 800181a:	4668      	mov	r0, sp
 800181c:	f104 0310 	add.w	r3, r4, #16
 8001820:	229c      	movs	r2, #156	@ 0x9c
 8001822:	4619      	mov	r1, r3
 8001824:	f005 f887 	bl	8006936 <memcpy>
 8001828:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800182c:	f000 fdc1 	bl	80023b2 <bno055_read_regs>
 8001830:	4603      	mov	r3, r0
 8001832:	75fb      	strb	r3, [r7, #23]
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <bno055_gravity_y+0x3e>
        return err;
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	e01b      	b.n	8001876 <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <bno055_gravity_y+0x4a>
 8001846:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <bno055_gravity_y+0x80>)
 8001848:	e001      	b.n	800184e <bno055_gravity_y+0x4e>
 800184a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800184e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001850:	7b7b      	ldrb	r3, [r7, #13]
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	b21a      	sxth	r2, r3
 8001856:	7b3b      	ldrb	r3, [r7, #12]
 8001858:	b21b      	sxth	r3, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	b21b      	sxth	r3, r3
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001866:	ed97 7a04 	vldr	s14, [r7, #16]
 800186a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd90      	pop	{r4, r7, pc}
 800187e:	bf00      	nop
 8001880:	42c80000 	.word	0x42c80000

08001884 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b0b1      	sub	sp, #196	@ 0xc4
 8001888:	af2a      	add	r7, sp, #168	@ 0xa8
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800188e:	687c      	ldr	r4, [r7, #4]
 8001890:	2302      	movs	r3, #2
 8001892:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	9328      	str	r3, [sp, #160]	@ 0xa0
 800189a:	2332      	movs	r3, #50	@ 0x32
 800189c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800189e:	4668      	mov	r0, sp
 80018a0:	f104 0310 	add.w	r3, r4, #16
 80018a4:	229c      	movs	r2, #156	@ 0x9c
 80018a6:	4619      	mov	r1, r3
 80018a8:	f005 f845 	bl	8006936 <memcpy>
 80018ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018b0:	f000 fd7f 	bl	80023b2 <bno055_read_regs>
 80018b4:	4603      	mov	r3, r0
 80018b6:	75fb      	strb	r3, [r7, #23]
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <bno055_gravity_z+0x3e>
        return err;
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	e01b      	b.n	80018fa <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <bno055_gravity_z+0x4a>
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <bno055_gravity_z+0x80>)
 80018cc:	e001      	b.n	80018d2 <bno055_gravity_z+0x4e>
 80018ce:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80018d2:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80018d4:	7b7b      	ldrb	r3, [r7, #13]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21a      	sxth	r2, r3
 80018da:	7b3b      	ldrb	r3, [r7, #12]
 80018dc:	b21b      	sxth	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80018ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd90      	pop	{r4, r7, pc}
 8001902:	bf00      	nop
 8001904:	42c80000 	.word	0x42c80000

08001908 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b0b1      	sub	sp, #196	@ 0xc4
 800190c:	af2a      	add	r7, sp, #168	@ 0xa8
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001912:	687c      	ldr	r4, [r7, #4]
 8001914:	2306      	movs	r3, #6
 8001916:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001918:	f107 0308 	add.w	r3, r7, #8
 800191c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800191e:	232e      	movs	r3, #46	@ 0x2e
 8001920:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001922:	4668      	mov	r0, sp
 8001924:	f104 0310 	add.w	r3, r4, #16
 8001928:	229c      	movs	r2, #156	@ 0x9c
 800192a:	4619      	mov	r1, r3
 800192c:	f005 f803 	bl	8006936 <memcpy>
 8001930:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001934:	f000 fd3d 	bl	80023b2 <bno055_read_regs>
 8001938:	4603      	mov	r3, r0
 800193a:	75fb      	strb	r3, [r7, #23]
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <bno055_gravity+0x3e>
        return err;
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	e03f      	b.n	80019c6 <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <bno055_gravity+0x4a>
 800194e:	4b20      	ldr	r3, [pc, #128]	@ (80019d0 <bno055_gravity+0xc8>)
 8001950:	e001      	b.n	8001956 <bno055_gravity+0x4e>
 8001952:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001956:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001958:	7a7b      	ldrb	r3, [r7, #9]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21a      	sxth	r2, r3
 800195e:	7a3b      	ldrb	r3, [r7, #8]
 8001960:	b21b      	sxth	r3, r3
 8001962:	4313      	orrs	r3, r2
 8001964:	b21b      	sxth	r3, r3
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800196e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 800197c:	7afb      	ldrb	r3, [r7, #11]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b21a      	sxth	r2, r3
 8001982:	7abb      	ldrb	r3, [r7, #10]
 8001984:	b21b      	sxth	r3, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	b21b      	sxth	r3, r3
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001992:	ed97 7a04 	vldr	s14, [r7, #16]
 8001996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 80019a0:	7b7b      	ldrb	r3, [r7, #13]
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	7b3b      	ldrb	r3, [r7, #12]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80019ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd90      	pop	{r4, r7, pc}
 80019ce:	bf00      	nop
 80019d0:	42c80000 	.word	0x42c80000

080019d4 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b0b1      	sub	sp, #196	@ 0xc4
 80019d8:	af2a      	add	r7, sp, #168	@ 0xa8
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 80019de:	687c      	ldr	r4, [r7, #4]
 80019e0:	2302      	movs	r3, #2
 80019e2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80019ea:	231a      	movs	r3, #26
 80019ec:	9327      	str	r3, [sp, #156]	@ 0x9c
 80019ee:	4668      	mov	r0, sp
 80019f0:	f104 0310 	add.w	r3, r4, #16
 80019f4:	229c      	movs	r2, #156	@ 0x9c
 80019f6:	4619      	mov	r1, r3
 80019f8:	f004 ff9d 	bl	8006936 <memcpy>
 80019fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a00:	f000 fcd7 	bl	80023b2 <bno055_read_regs>
 8001a04:	4603      	mov	r3, r0
 8001a06:	75fb      	strb	r3, [r7, #23]
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
 8001a10:	e020      	b.n	8001a54 <bno055_euler_yaw+0x80>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <bno055_euler_yaw+0x4c>
 8001a1a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001a1e:	e000      	b.n	8001a22 <bno055_euler_yaw+0x4e>
 8001a20:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <bno055_euler_yaw+0x88>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001a22:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) * precision_scaling_factor / scale;
 8001a24:	7b7b      	ldrb	r3, [r7, #13]
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	b21a      	sxth	r2, r3
 8001a2a:	7b3b      	ldrb	r3, [r7, #12]
 8001a2c:	b21b      	sxth	r3, r3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a44:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd90      	pop	{r4, r7, pc}
 8001a5c:	44610000 	.word	0x44610000

08001a60 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b0b1      	sub	sp, #196	@ 0xc4
 8001a64:	af2a      	add	r7, sp, #168	@ 0xa8
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001a6a:	687c      	ldr	r4, [r7, #4]
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001a76:	231c      	movs	r3, #28
 8001a78:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001a7a:	4668      	mov	r0, sp
 8001a7c:	f104 0310 	add.w	r3, r4, #16
 8001a80:	229c      	movs	r2, #156	@ 0x9c
 8001a82:	4619      	mov	r1, r3
 8001a84:	f004 ff57 	bl	8006936 <memcpy>
 8001a88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a8c:	f000 fc91 	bl	80023b2 <bno055_read_regs>
 8001a90:	4603      	mov	r3, r0
 8001a92:	75fb      	strb	r3, [r7, #23]
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <bno055_euler_roll+0x3e>
        return err;
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
 8001a9c:	e020      	b.n	8001ae0 <bno055_euler_roll+0x80>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <bno055_euler_roll+0x4c>
 8001aa6:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001aaa:	e000      	b.n	8001aae <bno055_euler_roll+0x4e>
 8001aac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <bno055_euler_roll+0x88>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001aae:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) * precision_scaling_factor / scale;
 8001ab0:	7b7b      	ldrb	r3, [r7, #13]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	7b3b      	ldrb	r3, [r7, #12]
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ad0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	44610000 	.word	0x44610000

08001aec <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b0b1      	sub	sp, #196	@ 0xc4
 8001af0:	af2a      	add	r7, sp, #168	@ 0xa8
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001af6:	687c      	ldr	r4, [r7, #4]
 8001af8:	2302      	movs	r3, #2
 8001afa:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001b02:	231e      	movs	r3, #30
 8001b04:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001b06:	4668      	mov	r0, sp
 8001b08:	f104 0310 	add.w	r3, r4, #16
 8001b0c:	229c      	movs	r2, #156	@ 0x9c
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f004 ff11 	bl	8006936 <memcpy>
 8001b14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b18:	f000 fc4b 	bl	80023b2 <bno055_read_regs>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	75fb      	strb	r3, [r7, #23]
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <bno055_euler_pitch+0x3e>
        return err;
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	e020      	b.n	8001b6c <bno055_euler_pitch+0x80>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d102      	bne.n	8001b38 <bno055_euler_pitch+0x4c>
 8001b32:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001b36:	e000      	b.n	8001b3a <bno055_euler_pitch+0x4e>
 8001b38:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <bno055_euler_pitch+0x88>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001b3a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) * precision_scaling_factor / scale;
 8001b3c:	7b7b      	ldrb	r3, [r7, #13]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	7b3b      	ldrb	r3, [r7, #12]
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b50:	fb02 f303 	mul.w	r3, r2, r3
 8001b54:	ee07 3a90 	vmov	s15, r3
 8001b58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	371c      	adds	r7, #28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd90      	pop	{r4, r7, pc}
 8001b74:	44610000 	.word	0x44610000

08001b78 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b0b1      	sub	sp, #196	@ 0xc4
 8001b7c:	af2a      	add	r7, sp, #168	@ 0xa8
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8001b82:	687c      	ldr	r4, [r7, #4]
 8001b84:	2306      	movs	r3, #6
 8001b86:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001b8e:	231a      	movs	r3, #26
 8001b90:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001b92:	4668      	mov	r0, sp
 8001b94:	f104 0310 	add.w	r3, r4, #16
 8001b98:	229c      	movs	r2, #156	@ 0x9c
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f004 fecb 	bl	8006936 <memcpy>
 8001ba0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ba4:	f000 fc05 	bl	80023b2 <bno055_read_regs>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	75fb      	strb	r3, [r7, #23]
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	e03f      	b.n	8001c36 <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <bno055_euler+0x4c>
 8001bbe:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8001bc2:	e000      	b.n	8001bc6 <bno055_euler+0x4e>
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001bc6:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0])   / scale;
 8001bc8:	7a7b      	ldrb	r3, [r7, #9]
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	7a3b      	ldrb	r3, [r7, #8]
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bde:	ed97 7a04 	vldr	s14, [r7, #16]
 8001be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001bec:	7afb      	ldrb	r3, [r7, #11]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	7abb      	ldrb	r3, [r7, #10]
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c02:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8001c10:	7b7b      	ldrb	r3, [r7, #13]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	7b3b      	ldrb	r3, [r7, #12]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c26:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd90      	pop	{r4, r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	44610000 	.word	0x44610000

08001c44 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b0af      	sub	sp, #188	@ 0xbc
 8001c48:	af2a      	add	r7, sp, #168	@ 0xa8
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8001c4e:	687c      	ldr	r4, [r7, #4]
 8001c50:	2302      	movs	r3, #2
 8001c52:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001c5e:	4668      	mov	r0, sp
 8001c60:	f104 0310 	add.w	r3, r4, #16
 8001c64:	229c      	movs	r2, #156	@ 0x9c
 8001c66:	4619      	mov	r1, r3
 8001c68:	f004 fe65 	bl	8006936 <memcpy>
 8001c6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c70:	f000 fb9f 	bl	80023b2 <bno055_read_regs>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <bno055_quaternion_w+0x3e>
        return err;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	e012      	b.n	8001ca8 <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001c82:	7b7b      	ldrb	r3, [r7, #13]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	7b3b      	ldrb	r3, [r7, #12]
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c98:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001cb0 <bno055_quaternion_w+0x6c>
 8001c9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd90      	pop	{r4, r7, pc}
 8001cb0:	46800000 	.word	0x46800000

08001cb4 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b0af      	sub	sp, #188	@ 0xbc
 8001cb8:	af2a      	add	r7, sp, #168	@ 0xa8
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001cbe:	687c      	ldr	r4, [r7, #4]
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001cca:	2322      	movs	r3, #34	@ 0x22
 8001ccc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001cce:	4668      	mov	r0, sp
 8001cd0:	f104 0310 	add.w	r3, r4, #16
 8001cd4:	229c      	movs	r2, #156	@ 0x9c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f004 fe2d 	bl	8006936 <memcpy>
 8001cdc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ce0:	f000 fb67 	bl	80023b2 <bno055_read_regs>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <bno055_quaternion_x+0x3e>
        return err;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	e012      	b.n	8001d18 <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001cf2:	7b7b      	ldrb	r3, [r7, #13]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	7b3b      	ldrb	r3, [r7, #12]
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d08:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001d20 <bno055_quaternion_x+0x6c>
 8001d0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd90      	pop	{r4, r7, pc}
 8001d20:	46800000 	.word	0x46800000

08001d24 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b0af      	sub	sp, #188	@ 0xbc
 8001d28:	af2a      	add	r7, sp, #168	@ 0xa8
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001d2e:	687c      	ldr	r4, [r7, #4]
 8001d30:	2302      	movs	r3, #2
 8001d32:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001d3a:	2324      	movs	r3, #36	@ 0x24
 8001d3c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001d3e:	4668      	mov	r0, sp
 8001d40:	f104 0310 	add.w	r3, r4, #16
 8001d44:	229c      	movs	r2, #156	@ 0x9c
 8001d46:	4619      	mov	r1, r3
 8001d48:	f004 fdf5 	bl	8006936 <memcpy>
 8001d4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d50:	f000 fb2f 	bl	80023b2 <bno055_read_regs>
 8001d54:	4603      	mov	r3, r0
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <bno055_quaternion_y+0x3e>
        return err;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	e012      	b.n	8001d88 <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001d62:	7b7b      	ldrb	r3, [r7, #13]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b21a      	sxth	r2, r3
 8001d68:	7b3b      	ldrb	r3, [r7, #12]
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	ee07 3a90 	vmov	s15, r3
 8001d74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d78:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001d90 <bno055_quaternion_y+0x6c>
 8001d7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd90      	pop	{r4, r7, pc}
 8001d90:	46800000 	.word	0x46800000

08001d94 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b0af      	sub	sp, #188	@ 0xbc
 8001d98:	af2a      	add	r7, sp, #168	@ 0xa8
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001d9e:	687c      	ldr	r4, [r7, #4]
 8001da0:	2302      	movs	r3, #2
 8001da2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001daa:	2326      	movs	r3, #38	@ 0x26
 8001dac:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001dae:	4668      	mov	r0, sp
 8001db0:	f104 0310 	add.w	r3, r4, #16
 8001db4:	229c      	movs	r2, #156	@ 0x9c
 8001db6:	4619      	mov	r1, r3
 8001db8:	f004 fdbd 	bl	8006936 <memcpy>
 8001dbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dc0:	f000 faf7 	bl	80023b2 <bno055_read_regs>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <bno055_quaternion_z+0x3e>
        return err;
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	e012      	b.n	8001df8 <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001dd2:	7b7b      	ldrb	r3, [r7, #13]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	7b3b      	ldrb	r3, [r7, #12]
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b21b      	sxth	r3, r3
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de8:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001e00 <bno055_quaternion_z+0x6c>
 8001dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd90      	pop	{r4, r7, pc}
 8001e00:	46800000 	.word	0x46800000

08001e04 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b0b1      	sub	sp, #196	@ 0xc4
 8001e08:	af2a      	add	r7, sp, #168	@ 0xa8
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 8001e0e:	687c      	ldr	r4, [r7, #4]
 8001e10:	2308      	movs	r3, #8
 8001e12:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001e1e:	4668      	mov	r0, sp
 8001e20:	f104 0310 	add.w	r3, r4, #16
 8001e24:	229c      	movs	r2, #156	@ 0x9c
 8001e26:	4619      	mov	r1, r3
 8001e28:	f004 fd85 	bl	8006936 <memcpy>
 8001e2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e30:	f000 fabf 	bl	80023b2 <bno055_read_regs>
 8001e34:	4603      	mov	r3, r0
 8001e36:	75fb      	strb	r3, [r7, #23]
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <bno055_quaternion+0x3e>
        return err;
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
 8001e40:	e048      	b.n	8001ed4 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8001e42:	7b7b      	ldrb	r3, [r7, #13]
 8001e44:	021b      	lsls	r3, r3, #8
 8001e46:	b21a      	sxth	r2, r3
 8001e48:	7b3b      	ldrb	r3, [r7, #12]
 8001e4a:	b21b      	sxth	r3, r3
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	b21b      	sxth	r3, r3
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e58:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001edc <bno055_quaternion+0xd8>
 8001e5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	7bbb      	ldrb	r3, [r7, #14]
 8001e6e:	b21b      	sxth	r3, r3
 8001e70:	4313      	orrs	r3, r2
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e7c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001edc <bno055_quaternion+0xd8>
 8001e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8001e8a:	7c7b      	ldrb	r3, [r7, #17]
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	b21a      	sxth	r2, r3
 8001e90:	7c3b      	ldrb	r3, [r7, #16]
 8001e92:	b21b      	sxth	r3, r3
 8001e94:	4313      	orrs	r3, r2
 8001e96:	b21b      	sxth	r3, r3
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea0:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001edc <bno055_quaternion+0xd8>
 8001ea4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 8001eae:	7cfb      	ldrb	r3, [r7, #19]
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	7cbb      	ldrb	r3, [r7, #18]
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b21b      	sxth	r3, r3
 8001ebc:	ee07 3a90 	vmov	s15, r3
 8001ec0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec4:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001edc <bno055_quaternion+0xd8>
 8001ec8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd90      	pop	{r4, r7, pc}
 8001edc:	46800000 	.word	0x46800000

08001ee0 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b0af      	sub	sp, #188	@ 0xbc
 8001ee4:	af2a      	add	r7, sp, #168	@ 0xa8
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	4608      	mov	r0, r1
 8001eea:	4611      	mov	r1, r2
 8001eec:	461a      	mov	r2, r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	70fb      	strb	r3, [r7, #3]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	70bb      	strb	r3, [r7, #2]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001efa:	2101      	movs	r1, #1
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fabc 	bl	800247a <bno055_set_page>
 8001f02:	4603      	mov	r3, r0
 8001f04:	73fb      	strb	r3, [r7, #15]
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <bno055_acc_conf+0x30>
        return err;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	e04b      	b.n	8001fa8 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001f10:	2100      	movs	r1, #0
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f91b 	bl	800214e <bno055_set_opmode>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <bno055_acc_conf+0x46>
        return err;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	e040      	b.n	8001fa8 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001f26:	200c      	movs	r0, #12
 8001f28:	f000 ff78 	bl	8002e1c <HAL_Delay>
    u8 config = range | bandwidth | mode;
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	78bb      	ldrb	r3, [r7, #2]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	787b      	ldrb	r3, [r7, #1]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 8001f3c:	687c      	ldr	r4, [r7, #4]
 8001f3e:	2301      	movs	r3, #1
 8001f40:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001f42:	f107 030e 	add.w	r3, r7, #14
 8001f46:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001f48:	2308      	movs	r3, #8
 8001f4a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001f4c:	4668      	mov	r0, sp
 8001f4e:	f104 0310 	add.w	r3, r4, #16
 8001f52:	229c      	movs	r2, #156	@ 0x9c
 8001f54:	4619      	mov	r1, r3
 8001f56:	f004 fcee 	bl	8006936 <memcpy>
 8001f5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f5e:	f000 fa5e 	bl	800241e <bno055_write_regs>
 8001f62:	4603      	mov	r3, r0
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <bno055_acc_conf+0x90>
        return err;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	e01b      	b.n	8001fa8 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	791b      	ldrb	r3, [r3, #4]
 8001f74:	4619      	mov	r1, r3
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f8e9 	bl	800214e <bno055_set_opmode>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <bno055_acc_conf+0xaa>
        return err;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	e00e      	b.n	8001fa8 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001f8a:	2018      	movs	r0, #24
 8001f8c:	f000 ff46 	bl	8002e1c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8001f90:	2100      	movs	r1, #0
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fa71 	bl	800247a <bno055_set_page>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <bno055_acc_conf+0xc6>
        return err;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	e000      	b.n	8001fa8 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd90      	pop	{r4, r7, pc}

08001fb0 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b0af      	sub	sp, #188	@ 0xbc
 8001fb4:	af2a      	add	r7, sp, #168	@ 0xa8
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	4608      	mov	r0, r1
 8001fba:	4611      	mov	r1, r2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	70fb      	strb	r3, [r7, #3]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	70bb      	strb	r3, [r7, #2]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8001fca:	2101      	movs	r1, #1
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fa54 	bl	800247a <bno055_set_page>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	73fb      	strb	r3, [r7, #15]
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <bno055_gyr_conf+0x30>
        return err;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	e04a      	b.n	8002076 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f8b3 	bl	800214e <bno055_set_opmode>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <bno055_gyr_conf+0x46>
        return err;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	e03f      	b.n	8002076 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001ff6:	200c      	movs	r0, #12
 8001ff8:	f000 ff10 	bl	8002e1c <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	78bb      	ldrb	r3, [r7, #2]
 8002000:	4313      	orrs	r3, r2
 8002002:	b2db      	uxtb	r3, r3
 8002004:	733b      	strb	r3, [r7, #12]
 8002006:	787b      	ldrb	r3, [r7, #1]
 8002008:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 800200a:	687c      	ldr	r4, [r7, #4]
 800200c:	2302      	movs	r3, #2
 800200e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002016:	230a      	movs	r3, #10
 8002018:	9327      	str	r3, [sp, #156]	@ 0x9c
 800201a:	4668      	mov	r0, sp
 800201c:	f104 0310 	add.w	r3, r4, #16
 8002020:	229c      	movs	r2, #156	@ 0x9c
 8002022:	4619      	mov	r1, r3
 8002024:	f004 fc87 	bl	8006936 <memcpy>
 8002028:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800202c:	f000 f9f7 	bl	800241e <bno055_write_regs>
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	e01b      	b.n	8002076 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	791b      	ldrb	r3, [r3, #4]
 8002042:	4619      	mov	r1, r3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f882 	bl	800214e <bno055_set_opmode>
 800204a:	4603      	mov	r3, r0
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <bno055_gyr_conf+0xa8>
        return err;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	e00e      	b.n	8002076 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002058:	2018      	movs	r0, #24
 800205a:	f000 fedf 	bl	8002e1c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800205e:	2100      	movs	r1, #0
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 fa0a 	bl	800247a <bno055_set_page>
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <bno055_gyr_conf+0xc4>
        return err;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	e000      	b.n	8002076 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bd90      	pop	{r4, r7, pc}

0800207e <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 800207e:	b590      	push	{r4, r7, lr}
 8002080:	b0af      	sub	sp, #188	@ 0xbc
 8002082:	af2a      	add	r7, sp, #168	@ 0xa8
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	4608      	mov	r0, r1
 8002088:	4611      	mov	r1, r2
 800208a:	461a      	mov	r2, r3
 800208c:	4603      	mov	r3, r0
 800208e:	70fb      	strb	r3, [r7, #3]
 8002090:	460b      	mov	r3, r1
 8002092:	70bb      	strb	r3, [r7, #2]
 8002094:	4613      	mov	r3, r2
 8002096:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002098:	2101      	movs	r1, #1
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f9ed 	bl	800247a <bno055_set_page>
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <bno055_mag_conf+0x30>
        return err;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	e04b      	b.n	8002146 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80020ae:	2100      	movs	r1, #0
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f84c 	bl	800214e <bno055_set_opmode>
 80020b6:	4603      	mov	r3, r0
 80020b8:	73fb      	strb	r3, [r7, #15]
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <bno055_mag_conf+0x46>
        return err;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	e040      	b.n	8002146 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80020c4:	200c      	movs	r0, #12
 80020c6:	f000 fea9 	bl	8002e1c <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 80020ca:	78fa      	ldrb	r2, [r7, #3]
 80020cc:	78bb      	ldrb	r3, [r7, #2]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	787b      	ldrb	r3, [r7, #1]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 80020da:	687c      	ldr	r4, [r7, #4]
 80020dc:	2301      	movs	r3, #1
 80020de:	9329      	str	r3, [sp, #164]	@ 0xa4
 80020e0:	f107 030e 	add.w	r3, r7, #14
 80020e4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80020e6:	2309      	movs	r3, #9
 80020e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80020ea:	4668      	mov	r0, sp
 80020ec:	f104 0310 	add.w	r3, r4, #16
 80020f0:	229c      	movs	r2, #156	@ 0x9c
 80020f2:	4619      	mov	r1, r3
 80020f4:	f004 fc1f 	bl	8006936 <memcpy>
 80020f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020fc:	f000 f98f 	bl	800241e <bno055_write_regs>
 8002100:	4603      	mov	r3, r0
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <bno055_mag_conf+0x90>
        return err;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	e01b      	b.n	8002146 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	791b      	ldrb	r3, [r3, #4]
 8002112:	4619      	mov	r1, r3
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f81a 	bl	800214e <bno055_set_opmode>
 800211a:	4603      	mov	r3, r0
 800211c:	73fb      	strb	r3, [r7, #15]
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <bno055_mag_conf+0xaa>
        return err;
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	e00e      	b.n	8002146 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002128:	2018      	movs	r0, #24
 800212a:	f000 fe77 	bl	8002e1c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800212e:	2100      	movs	r1, #0
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f9a2 	bl	800247a <bno055_set_page>
 8002136:	4603      	mov	r3, r0
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <bno055_mag_conf+0xc6>
        return err;
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	e000      	b.n	8002146 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bd90      	pop	{r4, r7, pc}

0800214e <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 800214e:	b590      	push	{r4, r7, lr}
 8002150:	b0af      	sub	sp, #188	@ 0xbc
 8002152:	af2a      	add	r7, sp, #168	@ 0xa8
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 800215a:	687c      	ldr	r4, [r7, #4]
 800215c:	2301      	movs	r3, #1
 800215e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002160:	1cfb      	adds	r3, r7, #3
 8002162:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002164:	233d      	movs	r3, #61	@ 0x3d
 8002166:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002168:	4668      	mov	r0, sp
 800216a:	f104 0310 	add.w	r3, r4, #16
 800216e:	229c      	movs	r2, #156	@ 0x9c
 8002170:	4619      	mov	r1, r3
 8002172:	f004 fbe0 	bl	8006936 <memcpy>
 8002176:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800217a:	f000 f950 	bl	800241e <bno055_write_regs>
 800217e:	4603      	mov	r3, r0
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	e003      	b.n	8002194 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800218c:	2018      	movs	r0, #24
 800218e:	f000 fe45 	bl	8002e1c <HAL_Delay>
    return BNO_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bd90      	pop	{r4, r7, pc}

0800219c <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b0af      	sub	sp, #188	@ 0xbc
 80021a0:	af2a      	add	r7, sp, #168	@ 0xa8
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	4608      	mov	r0, r1
 80021a6:	4611      	mov	r1, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	70fb      	strb	r3, [r7, #3]
 80021ae:	460b      	mov	r3, r1
 80021b0:	70bb      	strb	r3, [r7, #2]
 80021b2:	4613      	mov	r3, r2
 80021b4:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80021b6:	2100      	movs	r1, #0
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ffc8 	bl	800214e <bno055_set_opmode>
 80021be:	4603      	mov	r3, r0
 80021c0:	73fb      	strb	r3, [r7, #15]
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <bno055_set_unit+0x30>
        return err;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	e04b      	b.n	8002264 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80021cc:	2100      	movs	r1, #0
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f953 	bl	800247a <bno055_set_page>
 80021d4:	4603      	mov	r3, r0
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <bno055_set_unit+0x46>
        return err;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	e040      	b.n	8002264 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	78bb      	ldrb	r3, [r7, #2]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	787b      	ldrb	r3, [r7, #1]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 80021fa:	687c      	ldr	r4, [r7, #4]
 80021fc:	2301      	movs	r3, #1
 80021fe:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002200:	f107 030e 	add.w	r3, r7, #14
 8002204:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002206:	233b      	movs	r3, #59	@ 0x3b
 8002208:	9327      	str	r3, [sp, #156]	@ 0x9c
 800220a:	4668      	mov	r0, sp
 800220c:	f104 0310 	add.w	r3, r4, #16
 8002210:	229c      	movs	r2, #156	@ 0x9c
 8002212:	4619      	mov	r1, r3
 8002214:	f004 fb8f 	bl	8006936 <memcpy>
 8002218:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800221c:	f000 f8ff 	bl	800241e <bno055_write_regs>
 8002220:	4603      	mov	r3, r0
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <bno055_set_unit+0x92>
        return err;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	e01a      	b.n	8002264 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	78ba      	ldrb	r2, [r7, #2]
 8002232:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	787a      	ldrb	r2, [r7, #1]
 8002238:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002240:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	791b      	ldrb	r3, [r3, #4]
 800224c:	4619      	mov	r1, r3
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ff7d 	bl	800214e <bno055_set_opmode>
 8002254:	4603      	mov	r3, r0
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <bno055_set_unit+0xc6>
        return err;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	e000      	b.n	8002264 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bd90      	pop	{r4, r7, pc}

0800226c <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b0af      	sub	sp, #188	@ 0xbc
 8002270:	af2a      	add	r7, sp, #168	@ 0xa8
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 800227e:	2304      	movs	r3, #4
 8002280:	e04d      	b.n	800231e <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8002282:	2100      	movs	r1, #0
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff62 	bl	800214e <bno055_set_opmode>
 800228a:	4603      	mov	r3, r0
 800228c:	73fb      	strb	r3, [r7, #15]
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <bno055_set_pwr_mode+0x2c>
        return err;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	e042      	b.n	800231e <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002298:	2100      	movs	r1, #0
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f8ed 	bl	800247a <bno055_set_page>
 80022a0:	4603      	mov	r3, r0
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <bno055_set_pwr_mode+0x42>
        return err;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	e037      	b.n	800231e <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 80022ae:	687c      	ldr	r4, [r7, #4]
 80022b0:	2301      	movs	r3, #1
 80022b2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80022b4:	1cfb      	adds	r3, r7, #3
 80022b6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80022b8:	233e      	movs	r3, #62	@ 0x3e
 80022ba:	9327      	str	r3, [sp, #156]	@ 0x9c
 80022bc:	4668      	mov	r0, sp
 80022be:	f104 0310 	add.w	r3, r4, #16
 80022c2:	229c      	movs	r2, #156	@ 0x9c
 80022c4:	4619      	mov	r1, r3
 80022c6:	f004 fb36 	bl	8006936 <memcpy>
 80022ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022ce:	f000 f8a6 	bl	800241e <bno055_write_regs>
 80022d2:	4603      	mov	r3, r0
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	e01e      	b.n	800231e <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80022e6:	2100      	movs	r1, #0
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f8c6 	bl	800247a <bno055_set_page>
 80022ee:	4603      	mov	r3, r0
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <bno055_set_pwr_mode+0x90>
        return err;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	e010      	b.n	800231e <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	791b      	ldrb	r3, [r3, #4]
 8002300:	4619      	mov	r1, r3
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ff23 	bl	800214e <bno055_set_opmode>
 8002308:	4603      	mov	r3, r0
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <bno055_set_pwr_mode+0xaa>
        return err;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	e003      	b.n	800231e <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 8002316:	2002      	movs	r0, #2
 8002318:	f000 fd80 	bl	8002e1c <HAL_Delay>
    return BNO_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bd90      	pop	{r4, r7, pc}

08002326 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 8002326:	b590      	push	{r4, r7, lr}
 8002328:	b0af      	sub	sp, #188	@ 0xbc
 800232a:	af2a      	add	r7, sp, #168	@ 0xa8
 800232c:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 800232e:	2320      	movs	r3, #32
 8002330:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002332:	687c      	ldr	r4, [r7, #4]
 8002334:	2301      	movs	r3, #1
 8002336:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002338:	f107 030f 	add.w	r3, r7, #15
 800233c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800233e:	233f      	movs	r3, #63	@ 0x3f
 8002340:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002342:	4668      	mov	r0, sp
 8002344:	f104 0310 	add.w	r3, r4, #16
 8002348:	229c      	movs	r2, #156	@ 0x9c
 800234a:	4619      	mov	r1, r3
 800234c:	f004 faf3 	bl	8006936 <memcpy>
 8002350:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002354:	f000 f863 	bl	800241e <bno055_write_regs>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bd90      	pop	{r4, r7, pc}

0800236c <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b0af      	sub	sp, #188	@ 0xbc
 8002370:	af2a      	add	r7, sp, #168	@ 0xa8
 8002372:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002378:	687c      	ldr	r4, [r7, #4]
 800237a:	2301      	movs	r3, #1
 800237c:	9329      	str	r3, [sp, #164]	@ 0xa4
 800237e:	f107 030f 	add.w	r3, r7, #15
 8002382:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002384:	233f      	movs	r3, #63	@ 0x3f
 8002386:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002388:	4668      	mov	r0, sp
 800238a:	f104 0310 	add.w	r3, r4, #16
 800238e:	229c      	movs	r2, #156	@ 0x9c
 8002390:	4619      	mov	r1, r3
 8002392:	f004 fad0 	bl	8006936 <memcpy>
 8002396:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800239a:	f000 f840 	bl	800241e <bno055_write_regs>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <bno055_on+0x3e>
    }
    return BNO_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd90      	pop	{r4, r7, pc}

080023b2 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 80023b2:	b084      	sub	sp, #16
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	f107 0c10 	add.w	ip, r7, #16
 80023be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 80023c2:	6938      	ldr	r0, [r7, #16]
 80023c4:	7dbb      	ldrb	r3, [r7, #22]
 80023c6:	4619      	mov	r1, r3
 80023c8:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 80023cc:	f04f 33ff 	mov.w	r3, #4294967295
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2301      	movs	r3, #1
 80023d4:	f001 f89e 	bl	8003514 <HAL_I2C_Master_Transmit>
 80023d8:	4603      	mov	r3, r0
 80023da:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e014      	b.n	8002410 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 80023e6:	6938      	ldr	r0, [r7, #16]
 80023e8:	7dbb      	ldrb	r3, [r7, #22]
 80023ea:	4619      	mov	r1, r3
 80023ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f04f 32ff 	mov.w	r2, #4294967295
 80023f6:	9200      	str	r2, [sp, #0]
 80023f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80023fc:	f001 f9a2 	bl	8003744 <HAL_I2C_Master_Receive>
 8002400:	4603      	mov	r3, r0
 8002402:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800241a:	b004      	add	sp, #16
 800241c:	4770      	bx	lr

0800241e <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 800241e:	b084      	sub	sp, #16
 8002420:	b5b0      	push	{r4, r5, r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af04      	add	r7, sp, #16
 8002426:	f107 0418 	add.w	r4, r7, #24
 800242a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 800242e:	69b8      	ldr	r0, [r7, #24]
 8002430:	7fbb      	ldrb	r3, [r7, #30]
 8002432:	461d      	mov	r5, r3
 8002434:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002438:	b29a      	uxth	r2, r3
 800243a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800243e:	b299      	uxth	r1, r3
 8002440:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002444:	b29b      	uxth	r3, r3
 8002446:	f04f 34ff 	mov.w	r4, #4294967295
 800244a:	9402      	str	r4, [sp, #8]
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	460b      	mov	r3, r1
 8002456:	4629      	mov	r1, r5
 8002458:	f001 fa6a 	bl	8003930 <HAL_I2C_Mem_Write>
 800245c:	4603      	mov	r3, r0
 800245e:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <bno055_write_regs+0x4c>
        return BNO_ERR_I2C;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <bno055_write_regs+0x4e>
    }
    return BNO_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002476:	b004      	add	sp, #16
 8002478:	4770      	bx	lr

0800247a <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 800247a:	b590      	push	{r4, r7, lr}
 800247c:	b0af      	sub	sp, #188	@ 0xbc
 800247e:	af2a      	add	r7, sp, #168	@ 0xa8
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7b5a      	ldrb	r2, [r3, #13]
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <bno055_set_page+0x1a>
        return BNO_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	e024      	b.n	80024de <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d901      	bls.n	800249e <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 800249a:	2302      	movs	r3, #2
 800249c:	e01f      	b.n	80024de <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 800249e:	687c      	ldr	r4, [r7, #4]
 80024a0:	2301      	movs	r3, #1
 80024a2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80024a4:	1cfb      	adds	r3, r7, #3
 80024a6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80024a8:	2307      	movs	r3, #7
 80024aa:	9327      	str	r3, [sp, #156]	@ 0x9c
 80024ac:	4668      	mov	r0, sp
 80024ae:	f104 0310 	add.w	r3, r4, #16
 80024b2:	229c      	movs	r2, #156	@ 0x9c
 80024b4:	4619      	mov	r1, r3
 80024b6:	f004 fa3e 	bl	8006936 <memcpy>
 80024ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024be:	f7ff ffae 	bl	800241e <bno055_write_regs>
 80024c2:	4603      	mov	r3, r0
 80024c4:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <bno055_set_page+0x56>
        return err;
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	e006      	b.n	80024de <bno055_set_page+0x64>
    }
    imu->_page = page;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 80024d6:	2002      	movs	r0, #2
 80024d8:	f000 fca0 	bl	8002e1c <HAL_Delay>
    return BNO_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd90      	pop	{r4, r7, pc}
	...

080024e8 <bno055_err_str>:

char* bno055_err_str(const error_bno err) {
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
    switch (err) {
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	2b06      	cmp	r3, #6
 80024f6:	d81f      	bhi.n	8002538 <bno055_err_str+0x50>
 80024f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002500 <bno055_err_str+0x18>)
 80024fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fe:	bf00      	nop
 8002500:	0800251d 	.word	0x0800251d
 8002504:	08002521 	.word	0x08002521
 8002508:	08002525 	.word	0x08002525
 800250c:	08002531 	.word	0x08002531
 8002510:	08002529 	.word	0x08002529
 8002514:	0800252d 	.word	0x0800252d
 8002518:	08002535 	.word	0x08002535
        case BNO_OK:
            return "[BNO] Ok!";
 800251c:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <bno055_err_str+0x60>)
 800251e:	e00c      	b.n	800253a <bno055_err_str+0x52>
        case BNO_ERR_I2C:
            return "[BNO] I2C error!";
 8002520:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <bno055_err_str+0x64>)
 8002522:	e00a      	b.n	800253a <bno055_err_str+0x52>
        case BNO_ERR_PAGE_TOO_HIGH:
            return "[BNO] Page setting to high.";
 8002524:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <bno055_err_str+0x68>)
 8002526:	e008      	b.n	800253a <bno055_err_str+0x52>
        case BNO_ERR_NULL_PTR:
            return "[BNO] BNO struct is nullpointer.";
 8002528:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <bno055_err_str+0x6c>)
 800252a:	e006      	b.n	800253a <bno055_err_str+0x52>
        case BNO_ERR_AXIS_REMAP:
            return "[BNO] Axis remap error!";
 800252c:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <bno055_err_str+0x70>)
 800252e:	e004      	b.n	800253a <bno055_err_str+0x52>
        case BNO_ERR_SETTING_PAGE:
            return "[BNO] TODO";
 8002530:	4b0a      	ldr	r3, [pc, #40]	@ (800255c <bno055_err_str+0x74>)
 8002532:	e002      	b.n	800253a <bno055_err_str+0x52>
        case BNO_ERR_WRONG_CHIP_ID:
            return "[BNO] Wrong Chip ID.";
 8002534:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <bno055_err_str+0x78>)
 8002536:	e000      	b.n	800253a <bno055_err_str+0x52>
    }
    return "[BNO] Ok!";
 8002538:	4b03      	ldr	r3, [pc, #12]	@ (8002548 <bno055_err_str+0x60>)
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	08008570 	.word	0x08008570
 800254c:	0800857c 	.word	0x0800857c
 8002550:	08008590 	.word	0x08008590
 8002554:	080085ac 	.word	0x080085ac
 8002558:	080085d0 	.word	0x080085d0
 800255c:	080085e8 	.word	0x080085e8
 8002560:	080085f4 	.word	0x080085f4

08002564 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800256c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002570:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d013      	beq.n	80025a4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800257c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002580:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002584:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800258c:	e000      	b.n	8002590 <ITM_SendChar+0x2c>
    {
      __NOP();
 800258e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002590:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f9      	beq.n	800258e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800259a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80025a4:	687b      	ldr	r3, [r7, #4]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025b8:	b0b0      	sub	sp, #192	@ 0xc0
 80025ba:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025bc:	f000 fbb9 	bl	8002d32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025c0:	f000 f908 	bl	80027d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c4:	f000 f98c 	bl	80028e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80025c8:	f000 f94a 	bl	8002860 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello\n");
 80025cc:	486f      	ldr	r0, [pc, #444]	@ (800278c <main+0x1d8>)
 80025ce:	f004 f853 	bl	8006678 <puts>
  bno = (bno055_t) {
 80025d2:	4b6f      	ldr	r3, [pc, #444]	@ (8002790 <main+0x1dc>)
 80025d4:	4618      	mov	r0, r3
 80025d6:	23ac      	movs	r3, #172	@ 0xac
 80025d8:	461a      	mov	r2, r3
 80025da:	2100      	movs	r1, #0
 80025dc:	f004 f92c 	bl	8006838 <memset>
 80025e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002790 <main+0x1dc>)
 80025e2:	4a6c      	ldr	r2, [pc, #432]	@ (8002794 <main+0x1e0>)
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002790 <main+0x1dc>)
 80025e8:	220c      	movs	r2, #12
 80025ea:	711a      	strb	r2, [r3, #4]
 80025ec:	4b68      	ldr	r3, [pc, #416]	@ (8002790 <main+0x1dc>)
 80025ee:	2229      	movs	r2, #41	@ 0x29
 80025f0:	719a      	strb	r2, [r3, #6]
	.i2c = &hi2c1, .addr = BNO_ADDR, .mode = BNO_MODE_NDOF, ._temp_unit = 0,
	        // .ptr = &bno,
	    };
  HAL_Delay(1000);
 80025f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025f6:	f000 fc11 	bl	8002e1c <HAL_Delay>
  if ((err = bno055_init(&bno)) == BNO_OK) {
 80025fa:	4865      	ldr	r0, [pc, #404]	@ (8002790 <main+0x1dc>)
 80025fc:	f7fe faec 	bl	8000bd8 <bno055_init>
 8002600:	4603      	mov	r3, r0
 8002602:	461a      	mov	r2, r3
 8002604:	4b64      	ldr	r3, [pc, #400]	@ (8002798 <main+0x1e4>)
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	4b63      	ldr	r3, [pc, #396]	@ (8002798 <main+0x1e4>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d106      	bne.n	800261e <main+0x6a>
          printf("[+] BNO055 init success\r\n");
 8002610:	4862      	ldr	r0, [pc, #392]	@ (800279c <main+0x1e8>)
 8002612:	f004 f831 	bl	8006678 <puts>
          HAL_Delay(100);
 8002616:	2064      	movs	r0, #100	@ 0x64
 8002618:	f000 fc00 	bl	8002e1c <HAL_Delay>
 800261c:	e00d      	b.n	800263a <main+0x86>
      } else {
          printf("[!] BNO055 init failed\r\n");
 800261e:	4860      	ldr	r0, [pc, #384]	@ (80027a0 <main+0x1ec>)
 8002620:	f004 f82a 	bl	8006678 <puts>
          printf("%s\n", bno055_err_str(err));
 8002624:	4b5c      	ldr	r3, [pc, #368]	@ (8002798 <main+0x1e4>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff5d 	bl	80024e8 <bno055_err_str>
 800262e:	4603      	mov	r3, r0
 8002630:	4618      	mov	r0, r3
 8002632:	f004 f821 	bl	8006678 <puts>
          Error_Handler();
 8002636:	f000 f9d7 	bl	80029e8 <Error_Handler>
      }
  HAL_Delay(100);
 800263a:	2064      	movs	r0, #100	@ 0x64
 800263c:	f000 fbee 	bl	8002e1c <HAL_Delay>
  err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,
 8002640:	2300      	movs	r3, #0
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2300      	movs	r3, #0
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	4851      	ldr	r0, [pc, #324]	@ (8002790 <main+0x1dc>)
 800264c:	f7ff fda6 	bl	800219c <bno055_set_unit>
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	4b50      	ldr	r3, [pc, #320]	@ (8002798 <main+0x1e4>)
 8002656:	701a      	strb	r2, [r3, #0]
						BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
  if (err != BNO_OK) {
 8002658:	4b4f      	ldr	r3, [pc, #316]	@ (8002798 <main+0x1e4>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d006      	beq.n	800266e <main+0xba>
	  printf("[BNO] Failed to set units. Err: %d\r\n", err);
 8002660:	4b4d      	ldr	r3, [pc, #308]	@ (8002798 <main+0x1e4>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	484f      	ldr	r0, [pc, #316]	@ (80027a4 <main+0x1f0>)
 8002668:	f003 ff9e 	bl	80065a8 <iprintf>
 800266c:	e002      	b.n	8002674 <main+0xc0>
  } else {
	  printf("[BNO] Unit selection success\r\n");
 800266e:	484e      	ldr	r0, [pc, #312]	@ (80027a8 <main+0x1f4>)
 8002670:	f004 f802 	bl	8006678 <puts>
  }
  HAL_Delay(1000);
 8002674:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002678:	f000 fbd0 	bl	8002e1c <HAL_Delay>
  while (1)
  {

//	  printf("hello \n");
//	  bno.temperature(&bno, &temperature);
		  bno.acc(&bno, &acc);
 800267c:	4b44      	ldr	r3, [pc, #272]	@ (8002790 <main+0x1dc>)
 800267e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002680:	494a      	ldr	r1, [pc, #296]	@ (80027ac <main+0x1f8>)
 8002682:	4843      	ldr	r0, [pc, #268]	@ (8002790 <main+0x1dc>)
 8002684:	4798      	blx	r3
		  bno.linear_acc(&bno, &lia);
 8002686:	4b42      	ldr	r3, [pc, #264]	@ (8002790 <main+0x1dc>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	4949      	ldr	r1, [pc, #292]	@ (80027b0 <main+0x1fc>)
 800268c:	4840      	ldr	r0, [pc, #256]	@ (8002790 <main+0x1dc>)
 800268e:	4798      	blx	r3
//		  bno.gyro(&bno, &gyr);
//		  bno.mag(&bno, &mag);
//		  bno.gravity(&bno, &grv);
		  bno.euler(&bno, &eul);
 8002690:	4b3f      	ldr	r3, [pc, #252]	@ (8002790 <main+0x1dc>)
 8002692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002696:	4947      	ldr	r1, [pc, #284]	@ (80027b4 <main+0x200>)
 8002698:	483d      	ldr	r0, [pc, #244]	@ (8002790 <main+0x1dc>)
 800269a:	4798      	blx	r3
//	  	                 eul.pitch, eul.yaw);
//	  	          printf("[+] QUA - w: %+2.2f | x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n",
//	  	                 qua.w, qua.x, qua.y, qua.z);


		  printf("--------------------------");
 800269c:	4846      	ldr	r0, [pc, #280]	@ (80027b8 <main+0x204>)
 800269e:	f003 ff83 	bl	80065a8 <iprintf>
//	  	          printf("Temperature,%2d\n", temperature);
		  printf("ACC,%+2.2f,%+2.2f,%+2.2f\n", acc.x, acc.y,
 80026a2:	4b42      	ldr	r3, [pc, #264]	@ (80027ac <main+0x1f8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ff66 	bl	8000578 <__aeabi_f2d>
 80026ac:	4680      	mov	r8, r0
 80026ae:	4689      	mov	r9, r1
 80026b0:	4b3e      	ldr	r3, [pc, #248]	@ (80027ac <main+0x1f8>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd ff5f 	bl	8000578 <__aeabi_f2d>
 80026ba:	4604      	mov	r4, r0
 80026bc:	460d      	mov	r5, r1
				 acc.z);
 80026be:	4b3b      	ldr	r3, [pc, #236]	@ (80027ac <main+0x1f8>)
 80026c0:	689b      	ldr	r3, [r3, #8]
		  printf("ACC,%+2.2f,%+2.2f,%+2.2f\n", acc.x, acc.y,
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fd ff58 	bl	8000578 <__aeabi_f2d>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026d0:	e9cd 4500 	strd	r4, r5, [sp]
 80026d4:	4642      	mov	r2, r8
 80026d6:	464b      	mov	r3, r9
 80026d8:	4838      	ldr	r0, [pc, #224]	@ (80027bc <main+0x208>)
 80026da:	f003 ff65 	bl	80065a8 <iprintf>
		  printf("LIA,%+2.2f,%+2.2f,%+2.2f\n", lia.x, lia.y,
 80026de:	4b34      	ldr	r3, [pc, #208]	@ (80027b0 <main+0x1fc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fd ff48 	bl	8000578 <__aeabi_f2d>
 80026e8:	4680      	mov	r8, r0
 80026ea:	4689      	mov	r9, r1
 80026ec:	4b30      	ldr	r3, [pc, #192]	@ (80027b0 <main+0x1fc>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd ff41 	bl	8000578 <__aeabi_f2d>
 80026f6:	4604      	mov	r4, r0
 80026f8:	460d      	mov	r5, r1
				 lia.z);
 80026fa:	4b2d      	ldr	r3, [pc, #180]	@ (80027b0 <main+0x1fc>)
 80026fc:	689b      	ldr	r3, [r3, #8]
		  printf("LIA,%+2.2f,%+2.2f,%+2.2f\n", lia.x, lia.y,
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd ff3a 	bl	8000578 <__aeabi_f2d>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800270c:	e9cd 4500 	strd	r4, r5, [sp]
 8002710:	4642      	mov	r2, r8
 8002712:	464b      	mov	r3, r9
 8002714:	482a      	ldr	r0, [pc, #168]	@ (80027c0 <main+0x20c>)
 8002716:	f003 ff47 	bl	80065a8 <iprintf>
//						 gyr.z);
//				  printf("MAG,%+2.2f,%+2.2f,%+2.2f\n", mag.x, mag.y,
//						 mag.z);
//				  printf("GRV,%+2.2f,%+2.2f,%+2.2f\n", grv.x, grv.y,
//						 grv.z);
		  printf("Roll,%+2.2f,%+2.2f,%+2.2f\n", eul.roll - roll_init,
 800271a:	4b26      	ldr	r3, [pc, #152]	@ (80027b4 <main+0x200>)
 800271c:	ed93 7a00 	vldr	s14, [r3]
 8002720:	4b28      	ldr	r3, [pc, #160]	@ (80027c4 <main+0x210>)
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272a:	ee17 0a90 	vmov	r0, s15
 800272e:	f7fd ff23 	bl	8000578 <__aeabi_f2d>
 8002732:	4680      	mov	r8, r0
 8002734:	4689      	mov	r9, r1
				 eul.pitch - pitch_init, eul.yaw - yaw_init);
 8002736:	4b1f      	ldr	r3, [pc, #124]	@ (80027b4 <main+0x200>)
 8002738:	ed93 7a01 	vldr	s14, [r3, #4]
 800273c:	4b22      	ldr	r3, [pc, #136]	@ (80027c8 <main+0x214>)
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	ee77 7a67 	vsub.f32	s15, s14, s15
		  printf("Roll,%+2.2f,%+2.2f,%+2.2f\n", eul.roll - roll_init,
 8002746:	ee17 0a90 	vmov	r0, s15
 800274a:	f7fd ff15 	bl	8000578 <__aeabi_f2d>
 800274e:	4604      	mov	r4, r0
 8002750:	460d      	mov	r5, r1
				 eul.pitch - pitch_init, eul.yaw - yaw_init);
 8002752:	4b18      	ldr	r3, [pc, #96]	@ (80027b4 <main+0x200>)
 8002754:	ed93 7a02 	vldr	s14, [r3, #8]
 8002758:	4b1c      	ldr	r3, [pc, #112]	@ (80027cc <main+0x218>)
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	ee77 7a67 	vsub.f32	s15, s14, s15
		  printf("Roll,%+2.2f,%+2.2f,%+2.2f\n", eul.roll - roll_init,
 8002762:	ee17 0a90 	vmov	r0, s15
 8002766:	f7fd ff07 	bl	8000578 <__aeabi_f2d>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002772:	e9cd 4500 	strd	r4, r5, [sp]
 8002776:	4642      	mov	r2, r8
 8002778:	464b      	mov	r3, r9
 800277a:	4815      	ldr	r0, [pc, #84]	@ (80027d0 <main+0x21c>)
 800277c:	f003 ff14 	bl	80065a8 <iprintf>
//	  	            fprintf(file, "[+] QUA - w: %+2.2f | x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", qua.w, qua.x, qua.y, qua.z);

			// Close the file

//	  	          HAL_GPIO_TogglePin(STATUS_LED_PORT, STATUS_LED);
		  HAL_Delay(100);
 8002780:	2064      	movs	r0, #100	@ 0x64
 8002782:	f000 fb4b 	bl	8002e1c <HAL_Delay>
		  bno.acc(&bno, &acc);
 8002786:	bf00      	nop
 8002788:	e778      	b.n	800267c <main+0xc8>
 800278a:	bf00      	nop
 800278c:	0800860c 	.word	0x0800860c
 8002790:	20000244 	.word	0x20000244
 8002794:	200001f0 	.word	0x200001f0
 8002798:	200002f0 	.word	0x200002f0
 800279c:	08008614 	.word	0x08008614
 80027a0:	08008630 	.word	0x08008630
 80027a4:	08008648 	.word	0x08008648
 80027a8:	08008670 	.word	0x08008670
 80027ac:	200002f4 	.word	0x200002f4
 80027b0:	20000300 	.word	0x20000300
 80027b4:	2000030c 	.word	0x2000030c
 80027b8:	08008690 	.word	0x08008690
 80027bc:	080086ac 	.word	0x080086ac
 80027c0:	080086c8 	.word	0x080086c8
 80027c4:	20000318 	.word	0x20000318
 80027c8:	2000031c 	.word	0x2000031c
 80027cc:	20000320 	.word	0x20000320
 80027d0:	080086e4 	.word	0x080086e4

080027d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b096      	sub	sp, #88	@ 0x58
 80027d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	2244      	movs	r2, #68	@ 0x44
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 f828 	bl	8006838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027e8:	463b      	mov	r3, r7
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80027f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80027fa:	f001 fd5f 	bl	80042bc <HAL_PWREx_ControlVoltageScaling>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002804:	f000 f8f0 	bl	80029e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002808:	2310      	movs	r3, #16
 800280a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800280c:	2301      	movs	r3, #1
 800280e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002814:	2360      	movs	r3, #96	@ 0x60
 8002816:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002818:	2300      	movs	r3, #0
 800281a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	4618      	mov	r0, r3
 8002822:	f001 fdef 	bl	8004404 <HAL_RCC_OscConfig>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800282c:	f000 f8dc 	bl	80029e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002830:	230f      	movs	r3, #15
 8002832:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002834:	2300      	movs	r3, #0
 8002836:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002844:	463b      	mov	r3, r7
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f002 f9f5 	bl	8004c38 <HAL_RCC_ClockConfig>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002854:	f000 f8c8 	bl	80029e8 <Error_Handler>
  }
}
 8002858:	bf00      	nop
 800285a:	3758      	adds	r7, #88	@ 0x58
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002864:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <MX_I2C1_Init+0x74>)
 8002866:	4a1c      	ldr	r2, [pc, #112]	@ (80028d8 <MX_I2C1_Init+0x78>)
 8002868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 800286a:	4b1a      	ldr	r3, [pc, #104]	@ (80028d4 <MX_I2C1_Init+0x74>)
 800286c:	4a1b      	ldr	r2, [pc, #108]	@ (80028dc <MX_I2C1_Init+0x7c>)
 800286e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002870:	4b18      	ldr	r3, [pc, #96]	@ (80028d4 <MX_I2C1_Init+0x74>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002876:	4b17      	ldr	r3, [pc, #92]	@ (80028d4 <MX_I2C1_Init+0x74>)
 8002878:	2201      	movs	r2, #1
 800287a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800287c:	4b15      	ldr	r3, [pc, #84]	@ (80028d4 <MX_I2C1_Init+0x74>)
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002882:	4b14      	ldr	r3, [pc, #80]	@ (80028d4 <MX_I2C1_Init+0x74>)
 8002884:	2200      	movs	r2, #0
 8002886:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002888:	4b12      	ldr	r3, [pc, #72]	@ (80028d4 <MX_I2C1_Init+0x74>)
 800288a:	2200      	movs	r2, #0
 800288c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800288e:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <MX_I2C1_Init+0x74>)
 8002890:	2200      	movs	r2, #0
 8002892:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002894:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <MX_I2C1_Init+0x74>)
 8002896:	2200      	movs	r2, #0
 8002898:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800289a:	480e      	ldr	r0, [pc, #56]	@ (80028d4 <MX_I2C1_Init+0x74>)
 800289c:	f000 fd9e 	bl	80033dc <HAL_I2C_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80028a6:	f000 f89f 	bl	80029e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028aa:	2100      	movs	r1, #0
 80028ac:	4809      	ldr	r0, [pc, #36]	@ (80028d4 <MX_I2C1_Init+0x74>)
 80028ae:	f001 fc4d 	bl	800414c <HAL_I2CEx_ConfigAnalogFilter>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80028b8:	f000 f896 	bl	80029e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80028bc:	2100      	movs	r1, #0
 80028be:	4805      	ldr	r0, [pc, #20]	@ (80028d4 <MX_I2C1_Init+0x74>)
 80028c0:	f001 fc8f 	bl	80041e2 <HAL_I2CEx_ConfigDigitalFilter>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80028ca:	f000 f88d 	bl	80029e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200001f0 	.word	0x200001f0
 80028d8:	40005400 	.word	0x40005400
 80028dc:	00100d14 	.word	0x00100d14

080028e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e6:	f107 030c 	add.w	r3, r7, #12
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	60da      	str	r2, [r3, #12]
 80028f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f6:	4b19      	ldr	r3, [pc, #100]	@ (800295c <MX_GPIO_Init+0x7c>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fa:	4a18      	ldr	r2, [pc, #96]	@ (800295c <MX_GPIO_Init+0x7c>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002902:	4b16      	ldr	r3, [pc, #88]	@ (800295c <MX_GPIO_Init+0x7c>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290e:	4b13      	ldr	r3, [pc, #76]	@ (800295c <MX_GPIO_Init+0x7c>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002912:	4a12      	ldr	r2, [pc, #72]	@ (800295c <MX_GPIO_Init+0x7c>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800291a:	4b10      	ldr	r3, [pc, #64]	@ (800295c <MX_GPIO_Init+0x7c>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : mybutton_Pin */
  GPIO_InitStruct.Pin = mybutton_Pin;
 8002926:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800292a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800292c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002932:	2301      	movs	r3, #1
 8002934:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(mybutton_GPIO_Port, &GPIO_InitStruct);
 8002936:	f107 030c 	add.w	r3, r7, #12
 800293a:	4619      	mov	r1, r3
 800293c:	4808      	ldr	r0, [pc, #32]	@ (8002960 <MX_GPIO_Init+0x80>)
 800293e:	f000 fba3 	bl	8003088 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	2028      	movs	r0, #40	@ 0x28
 8002948:	f000 fb67 	bl	800301a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800294c:	2028      	movs	r0, #40	@ 0x28
 800294e:	f000 fb80 	bl	8003052 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002952:	bf00      	nop
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000
 8002960:	48000800 	.word	0x48000800

08002964 <HAL_GPIO_EXTI_Callback>:
    } else {
        printf("Failed to read calibration status register.\n");
    }
}

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == mybutton_Pin){
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002974:	d10e      	bne.n	8002994 <HAL_GPIO_EXTI_Callback+0x30>
		roll_init = eul.roll;
 8002976:	4b09      	ldr	r3, [pc, #36]	@ (800299c <HAL_GPIO_EXTI_Callback+0x38>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 800297c:	6013      	str	r3, [r2, #0]
		pitch_init = eul.pitch;
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <HAL_GPIO_EXTI_Callback+0x38>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a08      	ldr	r2, [pc, #32]	@ (80029a4 <HAL_GPIO_EXTI_Callback+0x40>)
 8002984:	6013      	str	r3, [r2, #0]
		yaw_init = eul.yaw;
 8002986:	4b05      	ldr	r3, [pc, #20]	@ (800299c <HAL_GPIO_EXTI_Callback+0x38>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	4a07      	ldr	r2, [pc, #28]	@ (80029a8 <HAL_GPIO_EXTI_Callback+0x44>)
 800298c:	6013      	str	r3, [r2, #0]
		printf("euler reset\n");
 800298e:	4807      	ldr	r0, [pc, #28]	@ (80029ac <HAL_GPIO_EXTI_Callback+0x48>)
 8002990:	f003 fe72 	bl	8006678 <puts>
	}
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	2000030c 	.word	0x2000030c
 80029a0:	20000318 	.word	0x20000318
 80029a4:	2000031c 	.word	0x2000031c
 80029a8:	20000320 	.word	0x20000320
 80029ac:	0800894c 	.word	0x0800894c

080029b0 <_write>:

int _write(int file, char *ptr, int len)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	e009      	b.n	80029d6 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	60ba      	str	r2, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fdca 	bl	8002564 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3301      	adds	r3, #1
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	429a      	cmp	r2, r3
 80029dc:	dbf1      	blt.n	80029c2 <_write+0x12>
  }
  return len;
 80029de:	687b      	ldr	r3, [r7, #4]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029ec:	b672      	cpsid	i
}
 80029ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <Error_Handler+0x8>

080029f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002a38 <HAL_MspInit+0x44>)
 80029fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002a38 <HAL_MspInit+0x44>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a06:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <HAL_MspInit+0x44>)
 8002a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <HAL_MspInit+0x44>)
 8002a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a16:	4a08      	ldr	r2, [pc, #32]	@ (8002a38 <HAL_MspInit+0x44>)
 8002a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <HAL_MspInit+0x44>)
 8002a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000

08002a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b0ae      	sub	sp, #184	@ 0xb8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a54:	f107 0310 	add.w	r3, r7, #16
 8002a58:	2294      	movs	r2, #148	@ 0x94
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 feeb 	bl	8006838 <memset>
  if(hi2c->Instance==I2C1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a21      	ldr	r2, [pc, #132]	@ (8002aec <HAL_I2C_MspInit+0xb0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d13b      	bne.n	8002ae4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a6c:	2340      	movs	r3, #64	@ 0x40
 8002a6e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a70:	2300      	movs	r3, #0
 8002a72:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a74:	f107 0310 	add.w	r3, r7, #16
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f002 fb63 	bl	8005144 <HAL_RCCEx_PeriphCLKConfig>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002a84:	f7ff ffb0 	bl	80029e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a88:	4b19      	ldr	r3, [pc, #100]	@ (8002af0 <HAL_I2C_MspInit+0xb4>)
 8002a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8c:	4a18      	ldr	r2, [pc, #96]	@ (8002af0 <HAL_I2C_MspInit+0xb4>)
 8002a8e:	f043 0302 	orr.w	r3, r3, #2
 8002a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a94:	4b16      	ldr	r3, [pc, #88]	@ (8002af0 <HAL_I2C_MspInit+0xb4>)
 8002a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002aa0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aa8:	2312      	movs	r3, #18
 8002aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aba:	2304      	movs	r3, #4
 8002abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	480b      	ldr	r0, [pc, #44]	@ (8002af4 <HAL_I2C_MspInit+0xb8>)
 8002ac8:	f000 fade 	bl	8003088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002acc:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <HAL_I2C_MspInit+0xb4>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad0:	4a07      	ldr	r2, [pc, #28]	@ (8002af0 <HAL_I2C_MspInit+0xb4>)
 8002ad2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ad6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ad8:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <HAL_I2C_MspInit+0xb4>)
 8002ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002ae4:	bf00      	nop
 8002ae6:	37b8      	adds	r7, #184	@ 0xb8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40005400 	.word	0x40005400
 8002af0:	40021000 	.word	0x40021000
 8002af4:	48000400 	.word	0x48000400

08002af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <NMI_Handler+0x4>

08002b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <HardFault_Handler+0x4>

08002b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <MemManage_Handler+0x4>

08002b10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <BusFault_Handler+0x4>

08002b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <UsageFault_Handler+0x4>

08002b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b4e:	f000 f945 	bl	8002ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(mybutton_Pin);
 8002b5a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002b5e:	f000 fc25 	bl	80033ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0
  return 1;
 8002b6a:	2301      	movs	r3, #1
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <_kill>:

int _kill(int pid, int sig)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b80:	f003 feac 	bl	80068dc <__errno>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2216      	movs	r2, #22
 8002b88:	601a      	str	r2, [r3, #0]
  return -1;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <_exit>:

void _exit (int status)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b9e:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff ffe7 	bl	8002b76 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <_exit+0x12>

08002bac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e00a      	b.n	8002bd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bbe:	f3af 8000 	nop.w
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	60ba      	str	r2, [r7, #8]
 8002bca:	b2ca      	uxtb	r2, r1
 8002bcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	dbf0      	blt.n	8002bbe <_read+0x12>
  }

  return len;
 8002bdc:	687b      	ldr	r3, [r7, #4]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c0e:	605a      	str	r2, [r3, #4]
  return 0;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <_isatty>:

int _isatty(int file)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c26:	2301      	movs	r3, #1
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c58:	4a14      	ldr	r2, [pc, #80]	@ (8002cac <_sbrk+0x5c>)
 8002c5a:	4b15      	ldr	r3, [pc, #84]	@ (8002cb0 <_sbrk+0x60>)
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c64:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <_sbrk+0x64>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c6c:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <_sbrk+0x64>)
 8002c6e:	4a12      	ldr	r2, [pc, #72]	@ (8002cb8 <_sbrk+0x68>)
 8002c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c72:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <_sbrk+0x64>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d207      	bcs.n	8002c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c80:	f003 fe2c 	bl	80068dc <__errno>
 8002c84:	4603      	mov	r3, r0
 8002c86:	220c      	movs	r2, #12
 8002c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	e009      	b.n	8002ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c90:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <_sbrk+0x64>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c96:	4b07      	ldr	r3, [pc, #28]	@ (8002cb4 <_sbrk+0x64>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	4a05      	ldr	r2, [pc, #20]	@ (8002cb4 <_sbrk+0x64>)
 8002ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	200a0000 	.word	0x200a0000
 8002cb0:	00000400 	.word	0x00000400
 8002cb4:	20000324 	.word	0x20000324
 8002cb8:	20000478 	.word	0x20000478

08002cbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002cc0:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <SystemInit+0x20>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc6:	4a05      	ldr	r2, [pc, #20]	@ (8002cdc <SystemInit+0x20>)
 8002cc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ccc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ce0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ce4:	f7ff ffea 	bl	8002cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ce8:	480c      	ldr	r0, [pc, #48]	@ (8002d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8002cea:	490d      	ldr	r1, [pc, #52]	@ (8002d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cec:	4a0d      	ldr	r2, [pc, #52]	@ (8002d24 <LoopForever+0xe>)
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf0:	e002      	b.n	8002cf8 <LoopCopyDataInit>

08002cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cf6:	3304      	adds	r3, #4

08002cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cfc:	d3f9      	bcc.n	8002cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8002d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d00:	4c0a      	ldr	r4, [pc, #40]	@ (8002d2c <LoopForever+0x16>)
  movs r3, #0
 8002d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d04:	e001      	b.n	8002d0a <LoopFillZerobss>

08002d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d08:	3204      	adds	r2, #4

08002d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d0c:	d3fb      	bcc.n	8002d06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d0e:	f003 fdeb 	bl	80068e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d12:	f7ff fc4f 	bl	80025b4 <main>

08002d16 <LoopForever>:

LoopForever:
    b LoopForever
 8002d16:	e7fe      	b.n	8002d16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d18:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d20:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002d24:	08008d18 	.word	0x08008d18
  ldr r2, =_sbss
 8002d28:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002d2c:	20000478 	.word	0x20000478

08002d30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d30:	e7fe      	b.n	8002d30 <ADC1_IRQHandler>

08002d32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d3c:	2003      	movs	r0, #3
 8002d3e:	f000 f961 	bl	8003004 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d42:	200f      	movs	r0, #15
 8002d44:	f000 f80e 	bl	8002d64 <HAL_InitTick>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	71fb      	strb	r3, [r7, #7]
 8002d52:	e001      	b.n	8002d58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d54:	f7ff fe4e 	bl	80029f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d58:	79fb      	ldrb	r3, [r7, #7]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d70:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <HAL_InitTick+0x6c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d023      	beq.n	8002dc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d78:	4b16      	ldr	r3, [pc, #88]	@ (8002dd4 <HAL_InitTick+0x70>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <HAL_InitTick+0x6c>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f96d 	bl	800306e <HAL_SYSTICK_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10f      	bne.n	8002dba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b0f      	cmp	r3, #15
 8002d9e:	d809      	bhi.n	8002db4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da0:	2200      	movs	r2, #0
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	f000 f937 	bl	800301a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dac:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd8 <HAL_InitTick+0x74>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e007      	b.n	8002dc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e004      	b.n	8002dc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e001      	b.n	8002dc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000008 	.word	0x20000008
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	20000004 	.word	0x20000004

08002ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002de0:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <HAL_IncTick+0x20>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_IncTick+0x24>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	4a04      	ldr	r2, [pc, #16]	@ (8002e00 <HAL_IncTick+0x24>)
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000008 	.word	0x20000008
 8002e00:	20000328 	.word	0x20000328

08002e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return uwTick;
 8002e08:	4b03      	ldr	r3, [pc, #12]	@ (8002e18 <HAL_GetTick+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000328 	.word	0x20000328

08002e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7ff ffee 	bl	8002e04 <HAL_GetTick>
 8002e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d005      	beq.n	8002e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e36:	4b0a      	ldr	r3, [pc, #40]	@ (8002e60 <HAL_Delay+0x44>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e42:	bf00      	nop
 8002e44:	f7ff ffde 	bl	8002e04 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d8f7      	bhi.n	8002e44 <HAL_Delay+0x28>
  {
  }
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000008 	.word	0x20000008

08002e64 <__NVIC_SetPriorityGrouping>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e96:	4a04      	ldr	r2, [pc, #16]	@ (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	60d3      	str	r3, [r2, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <__NVIC_GetPriorityGrouping>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb0:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f003 0307 	and.w	r3, r3, #7
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_EnableIRQ>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db0b      	blt.n	8002ef2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	4907      	ldr	r1, [pc, #28]	@ (8002f00 <__NVIC_EnableIRQ+0x38>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2001      	movs	r0, #1
 8002eea:	fa00 f202 	lsl.w	r2, r0, r2
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000e100 	.word	0xe000e100

08002f04 <__NVIC_SetPriority>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	db0a      	blt.n	8002f2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	490c      	ldr	r1, [pc, #48]	@ (8002f50 <__NVIC_SetPriority+0x4c>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	0112      	lsls	r2, r2, #4
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	440b      	add	r3, r1
 8002f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002f2c:	e00a      	b.n	8002f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4908      	ldr	r1, [pc, #32]	@ (8002f54 <__NVIC_SetPriority+0x50>)
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	3b04      	subs	r3, #4
 8002f3c:	0112      	lsls	r2, r2, #4
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	440b      	add	r3, r1
 8002f42:	761a      	strb	r2, [r3, #24]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000e100 	.word	0xe000e100
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <NVIC_EncodePriority>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	@ 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f1c3 0307 	rsb	r3, r3, #7
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	bf28      	it	cs
 8002f76:	2304      	movcs	r3, #4
 8002f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d902      	bls.n	8002f88 <NVIC_EncodePriority+0x30>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3b03      	subs	r3, #3
 8002f86:	e000      	b.n	8002f8a <NVIC_EncodePriority+0x32>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	43d9      	mvns	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	4313      	orrs	r3, r2
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3724      	adds	r7, #36	@ 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <SysTick_Config>:
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd0:	d301      	bcc.n	8002fd6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e00f      	b.n	8002ff6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003000 <SysTick_Config+0x40>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fde:	210f      	movs	r1, #15
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	f7ff ff8e 	bl	8002f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe8:	4b05      	ldr	r3, [pc, #20]	@ (8003000 <SysTick_Config+0x40>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fee:	4b04      	ldr	r3, [pc, #16]	@ (8003000 <SysTick_Config+0x40>)
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	e000e010 	.word	0xe000e010

08003004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ff29 	bl	8002e64 <__NVIC_SetPriorityGrouping>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	4603      	mov	r3, r0
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800302c:	f7ff ff3e 	bl	8002eac <__NVIC_GetPriorityGrouping>
 8003030:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	6978      	ldr	r0, [r7, #20]
 8003038:	f7ff ff8e 	bl	8002f58 <NVIC_EncodePriority>
 800303c:	4602      	mov	r2, r0
 800303e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff ff5d 	bl	8002f04 <__NVIC_SetPriority>
}
 800304a:	bf00      	nop
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	4603      	mov	r3, r0
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800305c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff ff31 	bl	8002ec8 <__NVIC_EnableIRQ>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff ffa2 	bl	8002fc0 <SysTick_Config>
 800307c:	4603      	mov	r3, r0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003096:	e166      	b.n	8003366 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	2101      	movs	r1, #1
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8158 	beq.w	8003360 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d005      	beq.n	80030c8 <HAL_GPIO_Init+0x40>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d130      	bne.n	800312a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030fe:	2201      	movs	r2, #1
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 0201 	and.w	r2, r3, #1
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b03      	cmp	r3, #3
 8003134:	d017      	beq.n	8003166 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d123      	bne.n	80031ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	08da      	lsrs	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3208      	adds	r2, #8
 800317a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	08da      	lsrs	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3208      	adds	r2, #8
 80031b4:	6939      	ldr	r1, [r7, #16]
 80031b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0203 	and.w	r2, r3, #3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 80b2 	beq.w	8003360 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fc:	4b61      	ldr	r3, [pc, #388]	@ (8003384 <HAL_GPIO_Init+0x2fc>)
 80031fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003200:	4a60      	ldr	r2, [pc, #384]	@ (8003384 <HAL_GPIO_Init+0x2fc>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6613      	str	r3, [r2, #96]	@ 0x60
 8003208:	4b5e      	ldr	r3, [pc, #376]	@ (8003384 <HAL_GPIO_Init+0x2fc>)
 800320a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003214:	4a5c      	ldr	r2, [pc, #368]	@ (8003388 <HAL_GPIO_Init+0x300>)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	3302      	adds	r3, #2
 800321c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	220f      	movs	r2, #15
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800323e:	d02b      	beq.n	8003298 <HAL_GPIO_Init+0x210>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a52      	ldr	r2, [pc, #328]	@ (800338c <HAL_GPIO_Init+0x304>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d025      	beq.n	8003294 <HAL_GPIO_Init+0x20c>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a51      	ldr	r2, [pc, #324]	@ (8003390 <HAL_GPIO_Init+0x308>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d01f      	beq.n	8003290 <HAL_GPIO_Init+0x208>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a50      	ldr	r2, [pc, #320]	@ (8003394 <HAL_GPIO_Init+0x30c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d019      	beq.n	800328c <HAL_GPIO_Init+0x204>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a4f      	ldr	r2, [pc, #316]	@ (8003398 <HAL_GPIO_Init+0x310>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d013      	beq.n	8003288 <HAL_GPIO_Init+0x200>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a4e      	ldr	r2, [pc, #312]	@ (800339c <HAL_GPIO_Init+0x314>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00d      	beq.n	8003284 <HAL_GPIO_Init+0x1fc>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a4d      	ldr	r2, [pc, #308]	@ (80033a0 <HAL_GPIO_Init+0x318>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d007      	beq.n	8003280 <HAL_GPIO_Init+0x1f8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a4c      	ldr	r2, [pc, #304]	@ (80033a4 <HAL_GPIO_Init+0x31c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d101      	bne.n	800327c <HAL_GPIO_Init+0x1f4>
 8003278:	2307      	movs	r3, #7
 800327a:	e00e      	b.n	800329a <HAL_GPIO_Init+0x212>
 800327c:	2308      	movs	r3, #8
 800327e:	e00c      	b.n	800329a <HAL_GPIO_Init+0x212>
 8003280:	2306      	movs	r3, #6
 8003282:	e00a      	b.n	800329a <HAL_GPIO_Init+0x212>
 8003284:	2305      	movs	r3, #5
 8003286:	e008      	b.n	800329a <HAL_GPIO_Init+0x212>
 8003288:	2304      	movs	r3, #4
 800328a:	e006      	b.n	800329a <HAL_GPIO_Init+0x212>
 800328c:	2303      	movs	r3, #3
 800328e:	e004      	b.n	800329a <HAL_GPIO_Init+0x212>
 8003290:	2302      	movs	r3, #2
 8003292:	e002      	b.n	800329a <HAL_GPIO_Init+0x212>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_GPIO_Init+0x212>
 8003298:	2300      	movs	r3, #0
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	f002 0203 	and.w	r2, r2, #3
 80032a0:	0092      	lsls	r2, r2, #2
 80032a2:	4093      	lsls	r3, r2
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032aa:	4937      	ldr	r1, [pc, #220]	@ (8003388 <HAL_GPIO_Init+0x300>)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	3302      	adds	r3, #2
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032b8:	4b3b      	ldr	r3, [pc, #236]	@ (80033a8 <HAL_GPIO_Init+0x320>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032dc:	4a32      	ldr	r2, [pc, #200]	@ (80033a8 <HAL_GPIO_Init+0x320>)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032e2:	4b31      	ldr	r3, [pc, #196]	@ (80033a8 <HAL_GPIO_Init+0x320>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4013      	ands	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003306:	4a28      	ldr	r2, [pc, #160]	@ (80033a8 <HAL_GPIO_Init+0x320>)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800330c:	4b26      	ldr	r3, [pc, #152]	@ (80033a8 <HAL_GPIO_Init+0x320>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	43db      	mvns	r3, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003330:	4a1d      	ldr	r2, [pc, #116]	@ (80033a8 <HAL_GPIO_Init+0x320>)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003336:	4b1c      	ldr	r3, [pc, #112]	@ (80033a8 <HAL_GPIO_Init+0x320>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	43db      	mvns	r3, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800335a:	4a13      	ldr	r2, [pc, #76]	@ (80033a8 <HAL_GPIO_Init+0x320>)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3301      	adds	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	f47f ae91 	bne.w	8003098 <HAL_GPIO_Init+0x10>
  }
}
 8003376:	bf00      	nop
 8003378:	bf00      	nop
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40021000 	.word	0x40021000
 8003388:	40010000 	.word	0x40010000
 800338c:	48000400 	.word	0x48000400
 8003390:	48000800 	.word	0x48000800
 8003394:	48000c00 	.word	0x48000c00
 8003398:	48001000 	.word	0x48001000
 800339c:	48001400 	.word	0x48001400
 80033a0:	48001800 	.word	0x48001800
 80033a4:	48001c00 	.word	0x48001c00
 80033a8:	40010400 	.word	0x40010400

080033ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033b6:	4b08      	ldr	r3, [pc, #32]	@ (80033d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d006      	beq.n	80033d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033c2:	4a05      	ldr	r2, [pc, #20]	@ (80033d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033c4:	88fb      	ldrh	r3, [r7, #6]
 80033c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff faca 	bl	8002964 <HAL_GPIO_EXTI_Callback>
  }
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40010400 	.word	0x40010400

080033dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e08d      	b.n	800350a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff fb1a 	bl	8002a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2224      	movs	r2, #36	@ 0x24
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800342c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800343c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d107      	bne.n	8003456 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	e006      	b.n	8003464 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003462:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d108      	bne.n	800347e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	e007      	b.n	800348e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800348c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800349c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69d9      	ldr	r1, [r3, #28]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1a      	ldr	r2, [r3, #32]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	461a      	mov	r2, r3
 8003520:	460b      	mov	r3, r1
 8003522:	817b      	strh	r3, [r7, #10]
 8003524:	4613      	mov	r3, r2
 8003526:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b20      	cmp	r3, #32
 8003532:	f040 80fd 	bne.w	8003730 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_I2C_Master_Transmit+0x30>
 8003540:	2302      	movs	r3, #2
 8003542:	e0f6      	b.n	8003732 <HAL_I2C_Master_Transmit+0x21e>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800354c:	f7ff fc5a 	bl	8002e04 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2319      	movs	r3, #25
 8003558:	2201      	movs	r2, #1
 800355a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fb72 	bl	8003c48 <I2C_WaitOnFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e0e1      	b.n	8003732 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2221      	movs	r2, #33	@ 0x21
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2210      	movs	r2, #16
 800357a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	893a      	ldrh	r2, [r7, #8]
 800358e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	2bff      	cmp	r3, #255	@ 0xff
 800359e:	d906      	bls.n	80035ae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	22ff      	movs	r2, #255	@ 0xff
 80035a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80035a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	e007      	b.n	80035be <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80035b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035bc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d024      	beq.n	8003610 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3301      	adds	r3, #1
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	8979      	ldrh	r1, [r7, #10]
 8003602:	4b4e      	ldr	r3, [pc, #312]	@ (800373c <HAL_I2C_Master_Transmit+0x228>)
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fd6d 	bl	80040e8 <I2C_TransferConfig>
 800360e:	e066      	b.n	80036de <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003614:	b2da      	uxtb	r2, r3
 8003616:	8979      	ldrh	r1, [r7, #10]
 8003618:	4b48      	ldr	r3, [pc, #288]	@ (800373c <HAL_I2C_Master_Transmit+0x228>)
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fd62 	bl	80040e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003624:	e05b      	b.n	80036de <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	6a39      	ldr	r1, [r7, #32]
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fb65 	bl	8003cfa <I2C_WaitOnTXISFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07b      	b.n	8003732 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	781a      	ldrb	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d034      	beq.n	80036de <HAL_I2C_Master_Transmit+0x1ca>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003678:	2b00      	cmp	r3, #0
 800367a:	d130      	bne.n	80036de <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	2200      	movs	r2, #0
 8003684:	2180      	movs	r1, #128	@ 0x80
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 fade 	bl	8003c48 <I2C_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e04d      	b.n	8003732 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	2bff      	cmp	r3, #255	@ 0xff
 800369e:	d90e      	bls.n	80036be <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	22ff      	movs	r2, #255	@ 0xff
 80036a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	8979      	ldrh	r1, [r7, #10]
 80036ae:	2300      	movs	r3, #0
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fd16 	bl	80040e8 <I2C_TransferConfig>
 80036bc:	e00f      	b.n	80036de <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	8979      	ldrh	r1, [r7, #10]
 80036d0:	2300      	movs	r3, #0
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fd05 	bl	80040e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d19e      	bne.n	8003626 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	6a39      	ldr	r1, [r7, #32]
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fb4b 	bl	8003d88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e01a      	b.n	8003732 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2220      	movs	r2, #32
 8003702:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4b0c      	ldr	r3, [pc, #48]	@ (8003740 <HAL_I2C_Master_Transmit+0x22c>)
 8003710:	400b      	ands	r3, r1
 8003712:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	80002000 	.word	0x80002000
 8003740:	fe00e800 	.word	0xfe00e800

08003744 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	461a      	mov	r2, r3
 8003750:	460b      	mov	r3, r1
 8003752:	817b      	strh	r3, [r7, #10]
 8003754:	4613      	mov	r3, r2
 8003756:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b20      	cmp	r3, #32
 8003762:	f040 80db 	bne.w	800391c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_I2C_Master_Receive+0x30>
 8003770:	2302      	movs	r3, #2
 8003772:	e0d4      	b.n	800391e <HAL_I2C_Master_Receive+0x1da>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800377c:	f7ff fb42 	bl	8002e04 <HAL_GetTick>
 8003780:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2319      	movs	r3, #25
 8003788:	2201      	movs	r2, #1
 800378a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fa5a 	bl	8003c48 <I2C_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e0bf      	b.n	800391e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2222      	movs	r2, #34	@ 0x22
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2210      	movs	r2, #16
 80037aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	893a      	ldrh	r2, [r7, #8]
 80037be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2bff      	cmp	r3, #255	@ 0xff
 80037ce:	d90e      	bls.n	80037ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	8979      	ldrh	r1, [r7, #10]
 80037de:	4b52      	ldr	r3, [pc, #328]	@ (8003928 <HAL_I2C_Master_Receive+0x1e4>)
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fc7e 	bl	80040e8 <I2C_TransferConfig>
 80037ec:	e06d      	b.n	80038ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	8979      	ldrh	r1, [r7, #10]
 8003800:	4b49      	ldr	r3, [pc, #292]	@ (8003928 <HAL_I2C_Master_Receive+0x1e4>)
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 fc6d 	bl	80040e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800380e:	e05c      	b.n	80038ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	6a39      	ldr	r1, [r7, #32]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fafb 	bl	8003e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e07c      	b.n	800391e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d034      	beq.n	80038ca <HAL_I2C_Master_Receive+0x186>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d130      	bne.n	80038ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	2200      	movs	r2, #0
 8003870:	2180      	movs	r1, #128	@ 0x80
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f9e8 	bl	8003c48 <I2C_WaitOnFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e04d      	b.n	800391e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2bff      	cmp	r3, #255	@ 0xff
 800388a:	d90e      	bls.n	80038aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	22ff      	movs	r2, #255	@ 0xff
 8003890:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003896:	b2da      	uxtb	r2, r3
 8003898:	8979      	ldrh	r1, [r7, #10]
 800389a:	2300      	movs	r3, #0
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fc20 	bl	80040e8 <I2C_TransferConfig>
 80038a8:	e00f      	b.n	80038ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	8979      	ldrh	r1, [r7, #10]
 80038bc:	2300      	movs	r3, #0
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 fc0f 	bl	80040e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d19d      	bne.n	8003810 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	6a39      	ldr	r1, [r7, #32]
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fa55 	bl	8003d88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e01a      	b.n	800391e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2220      	movs	r2, #32
 80038ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6859      	ldr	r1, [r3, #4]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4b0c      	ldr	r3, [pc, #48]	@ (800392c <HAL_I2C_Master_Receive+0x1e8>)
 80038fc:	400b      	ands	r3, r1
 80038fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	80002400 	.word	0x80002400
 800392c:	fe00e800 	.word	0xfe00e800

08003930 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	4608      	mov	r0, r1
 800393a:	4611      	mov	r1, r2
 800393c:	461a      	mov	r2, r3
 800393e:	4603      	mov	r3, r0
 8003940:	817b      	strh	r3, [r7, #10]
 8003942:	460b      	mov	r3, r1
 8003944:	813b      	strh	r3, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b20      	cmp	r3, #32
 8003954:	f040 80f9 	bne.w	8003b4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_I2C_Mem_Write+0x34>
 800395e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800396a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0ed      	b.n	8003b4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_I2C_Mem_Write+0x4e>
 800397a:	2302      	movs	r3, #2
 800397c:	e0e6      	b.n	8003b4c <HAL_I2C_Mem_Write+0x21c>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003986:	f7ff fa3d 	bl	8002e04 <HAL_GetTick>
 800398a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	2319      	movs	r3, #25
 8003992:	2201      	movs	r2, #1
 8003994:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f955 	bl	8003c48 <I2C_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0d1      	b.n	8003b4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2221      	movs	r2, #33	@ 0x21
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2240      	movs	r2, #64	@ 0x40
 80039b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a3a      	ldr	r2, [r7, #32]
 80039c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039d0:	88f8      	ldrh	r0, [r7, #6]
 80039d2:	893a      	ldrh	r2, [r7, #8]
 80039d4:	8979      	ldrh	r1, [r7, #10]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	4603      	mov	r3, r0
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f8b9 	bl	8003b58 <I2C_RequestMemoryWrite>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0a9      	b.n	8003b4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2bff      	cmp	r3, #255	@ 0xff
 8003a00:	d90e      	bls.n	8003a20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	22ff      	movs	r2, #255	@ 0xff
 8003a06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	8979      	ldrh	r1, [r7, #10]
 8003a10:	2300      	movs	r3, #0
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fb65 	bl	80040e8 <I2C_TransferConfig>
 8003a1e:	e00f      	b.n	8003a40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	8979      	ldrh	r1, [r7, #10]
 8003a32:	2300      	movs	r3, #0
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fb54 	bl	80040e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f958 	bl	8003cfa <I2C_WaitOnTXISFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e07b      	b.n	8003b4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d034      	beq.n	8003af8 <HAL_I2C_Mem_Write+0x1c8>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d130      	bne.n	8003af8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2180      	movs	r1, #128	@ 0x80
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f8d1 	bl	8003c48 <I2C_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e04d      	b.n	8003b4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2bff      	cmp	r3, #255	@ 0xff
 8003ab8:	d90e      	bls.n	8003ad8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	22ff      	movs	r2, #255	@ 0xff
 8003abe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	8979      	ldrh	r1, [r7, #10]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fb09 	bl	80040e8 <I2C_TransferConfig>
 8003ad6:	e00f      	b.n	8003af8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	8979      	ldrh	r1, [r7, #10]
 8003aea:	2300      	movs	r3, #0
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 faf8 	bl	80040e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d19e      	bne.n	8003a40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f93e 	bl	8003d88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e01a      	b.n	8003b4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b0a      	ldr	r3, [pc, #40]	@ (8003b54 <HAL_I2C_Mem_Write+0x224>)
 8003b2a:	400b      	ands	r3, r1
 8003b2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e000      	b.n	8003b4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b4a:	2302      	movs	r3, #2
  }
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	fe00e800 	.word	0xfe00e800

08003b58 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	4608      	mov	r0, r1
 8003b62:	4611      	mov	r1, r2
 8003b64:	461a      	mov	r2, r3
 8003b66:	4603      	mov	r3, r0
 8003b68:	817b      	strh	r3, [r7, #10]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	813b      	strh	r3, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	8979      	ldrh	r1, [r7, #10]
 8003b78:	4b20      	ldr	r3, [pc, #128]	@ (8003bfc <I2C_RequestMemoryWrite+0xa4>)
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fab1 	bl	80040e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	69b9      	ldr	r1, [r7, #24]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f8b5 	bl	8003cfa <I2C_WaitOnTXISFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e02c      	b.n	8003bf4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d105      	bne.n	8003bac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ba0:	893b      	ldrh	r3, [r7, #8]
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003baa:	e015      	b.n	8003bd8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bac:	893b      	ldrh	r3, [r7, #8]
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	69b9      	ldr	r1, [r7, #24]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f89b 	bl	8003cfa <I2C_WaitOnTXISFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e012      	b.n	8003bf4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bce:	893b      	ldrh	r3, [r7, #8]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2200      	movs	r2, #0
 8003be0:	2180      	movs	r1, #128	@ 0x80
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f830 	bl	8003c48 <I2C_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	80002000 	.word	0x80002000

08003c00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d103      	bne.n	8003c1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d007      	beq.n	8003c3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	619a      	str	r2, [r3, #24]
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	4613      	mov	r3, r2
 8003c56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c58:	e03b      	b.n	8003cd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	6839      	ldr	r1, [r7, #0]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f962 	bl	8003f28 <I2C_IsErrorOccurred>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e041      	b.n	8003cf2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d02d      	beq.n	8003cd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c76:	f7ff f8c5 	bl	8002e04 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d302      	bcc.n	8003c8c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d122      	bne.n	8003cd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4013      	ands	r3, r2
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d113      	bne.n	8003cd2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cae:	f043 0220 	orr.w	r2, r3, #32
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e00f      	b.n	8003cf2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699a      	ldr	r2, [r3, #24]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d0b4      	beq.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d06:	e033      	b.n	8003d70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 f90b 	bl	8003f28 <I2C_IsErrorOccurred>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e031      	b.n	8003d80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d22:	d025      	beq.n	8003d70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d24:	f7ff f86e 	bl	8002e04 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d302      	bcc.n	8003d3a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d11a      	bne.n	8003d70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d013      	beq.n	8003d70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4c:	f043 0220 	orr.w	r2, r3, #32
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e007      	b.n	8003d80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d1c4      	bne.n	8003d08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d94:	e02f      	b.n	8003df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f8c4 	bl	8003f28 <I2C_IsErrorOccurred>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e02d      	b.n	8003e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003daa:	f7ff f82b 	bl	8002e04 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d302      	bcc.n	8003dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d11a      	bne.n	8003df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d013      	beq.n	8003df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd2:	f043 0220 	orr.w	r2, r3, #32
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e007      	b.n	8003e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d1c8      	bne.n	8003d96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003e20:	e071      	b.n	8003f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f87e 	bl	8003f28 <I2C_IsErrorOccurred>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d13b      	bne.n	8003ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d138      	bne.n	8003ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d105      	bne.n	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d121      	bne.n	8003eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2210      	movs	r2, #16
 8003e78:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2220      	movs	r2, #32
 8003e86:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	4b24      	ldr	r3, [pc, #144]	@ (8003f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003e94:	400b      	ands	r3, r1
 8003e96:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]
 8003eb4:	e002      	b.n	8003ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003ebc:	f7fe ffa2 	bl	8002e04 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d302      	bcc.n	8003ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d119      	bne.n	8003f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d116      	bne.n	8003f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d00f      	beq.n	8003f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eea:	f043 0220 	orr.w	r2, r3, #32
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d002      	beq.n	8003f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003f14:	7dfb      	ldrb	r3, [r7, #23]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d083      	beq.n	8003e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	fe00e800 	.word	0xfe00e800

08003f28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	@ 0x28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d068      	beq.n	8004026 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2210      	movs	r2, #16
 8003f5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f5c:	e049      	b.n	8003ff2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d045      	beq.n	8003ff2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f66:	f7fe ff4d 	bl	8002e04 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d302      	bcc.n	8003f7c <I2C_IsErrorOccurred+0x54>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d13a      	bne.n	8003ff2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f9e:	d121      	bne.n	8003fe4 <I2C_IsErrorOccurred+0xbc>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa6:	d01d      	beq.n	8003fe4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d01a      	beq.n	8003fe4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fbc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fbe:	f7fe ff21 	bl	8002e04 <HAL_GetTick>
 8003fc2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fc4:	e00e      	b.n	8003fe4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003fc6:	f7fe ff1d 	bl	8002e04 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b19      	cmp	r3, #25
 8003fd2:	d907      	bls.n	8003fe4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	f043 0320 	orr.w	r3, r3, #32
 8003fda:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003fe2:	e006      	b.n	8003ff2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d1e9      	bne.n	8003fc6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d003      	beq.n	8004008 <I2C_IsErrorOccurred+0xe0>
 8004000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0aa      	beq.n	8003f5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800400c:	2b00      	cmp	r3, #0
 800400e:	d103      	bne.n	8004018 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2220      	movs	r2, #32
 8004016:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	f043 0304 	orr.w	r3, r3, #4
 800401e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004048:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00b      	beq.n	8004072 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f043 0308 	orr.w	r3, r3, #8
 8004060:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800406a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00b      	beq.n	8004094 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	f043 0302 	orr.w	r3, r3, #2
 8004082:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800408c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01c      	beq.n	80040d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff fdaf 	bl	8003c00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6859      	ldr	r1, [r3, #4]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b0d      	ldr	r3, [pc, #52]	@ (80040e4 <I2C_IsErrorOccurred+0x1bc>)
 80040ae:	400b      	ands	r3, r1
 80040b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80040d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3728      	adds	r7, #40	@ 0x28
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	fe00e800 	.word	0xfe00e800

080040e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	817b      	strh	r3, [r7, #10]
 80040f6:	4613      	mov	r3, r2
 80040f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040fa:	897b      	ldrh	r3, [r7, #10]
 80040fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004100:	7a7b      	ldrb	r3, [r7, #9]
 8004102:	041b      	lsls	r3, r3, #16
 8004104:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004108:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	4313      	orrs	r3, r2
 8004112:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004116:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	0d5b      	lsrs	r3, r3, #21
 8004122:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004126:	4b08      	ldr	r3, [pc, #32]	@ (8004148 <I2C_TransferConfig+0x60>)
 8004128:	430b      	orrs	r3, r1
 800412a:	43db      	mvns	r3, r3
 800412c:	ea02 0103 	and.w	r1, r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	03ff63ff 	.word	0x03ff63ff

0800414c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b20      	cmp	r3, #32
 8004160:	d138      	bne.n	80041d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800416c:	2302      	movs	r3, #2
 800416e:	e032      	b.n	80041d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2224      	movs	r2, #36	@ 0x24
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800419e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6819      	ldr	r1, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e000      	b.n	80041d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b085      	sub	sp, #20
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d139      	bne.n	800426c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004202:	2302      	movs	r3, #2
 8004204:	e033      	b.n	800426e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2224      	movs	r2, #36	@ 0x24
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004234:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	e000      	b.n	800426e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800426c:	2302      	movs	r3, #2
  }
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004280:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428c:	d102      	bne.n	8004294 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800428e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004292:	e00b      	b.n	80042ac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004294:	4b08      	ldr	r3, [pc, #32]	@ (80042b8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800429a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042a2:	d102      	bne.n	80042aa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80042a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042a8:	e000      	b.n	80042ac <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80042aa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40007000 	.word	0x40007000

080042bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d141      	bne.n	800434e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042ca:	4b4b      	ldr	r3, [pc, #300]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042d6:	d131      	bne.n	800433c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042d8:	4b47      	ldr	r3, [pc, #284]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042de:	4a46      	ldr	r2, [pc, #280]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042e8:	4b43      	ldr	r3, [pc, #268]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042f0:	4a41      	ldr	r2, [pc, #260]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80042f8:	4b40      	ldr	r3, [pc, #256]	@ (80043fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2232      	movs	r2, #50	@ 0x32
 80042fe:	fb02 f303 	mul.w	r3, r2, r3
 8004302:	4a3f      	ldr	r2, [pc, #252]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004304:	fba2 2303 	umull	r2, r3, r2, r3
 8004308:	0c9b      	lsrs	r3, r3, #18
 800430a:	3301      	adds	r3, #1
 800430c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800430e:	e002      	b.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3b01      	subs	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004316:	4b38      	ldr	r3, [pc, #224]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004322:	d102      	bne.n	800432a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f2      	bne.n	8004310 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800432a:	4b33      	ldr	r3, [pc, #204]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004336:	d158      	bne.n	80043ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e057      	b.n	80043ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800433c:	4b2e      	ldr	r3, [pc, #184]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004342:	4a2d      	ldr	r2, [pc, #180]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004348:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800434c:	e04d      	b.n	80043ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004354:	d141      	bne.n	80043da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004356:	4b28      	ldr	r3, [pc, #160]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800435e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004362:	d131      	bne.n	80043c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004364:	4b24      	ldr	r3, [pc, #144]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800436a:	4a23      	ldr	r2, [pc, #140]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800436c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004370:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004374:	4b20      	ldr	r3, [pc, #128]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800437c:	4a1e      	ldr	r2, [pc, #120]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004382:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004384:	4b1d      	ldr	r3, [pc, #116]	@ (80043fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2232      	movs	r2, #50	@ 0x32
 800438a:	fb02 f303 	mul.w	r3, r2, r3
 800438e:	4a1c      	ldr	r2, [pc, #112]	@ (8004400 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004390:	fba2 2303 	umull	r2, r3, r2, r3
 8004394:	0c9b      	lsrs	r3, r3, #18
 8004396:	3301      	adds	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800439a:	e002      	b.n	80043a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3b01      	subs	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043a2:	4b15      	ldr	r3, [pc, #84]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ae:	d102      	bne.n	80043b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f2      	bne.n	800439c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043b6:	4b10      	ldr	r3, [pc, #64]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c2:	d112      	bne.n	80043ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e011      	b.n	80043ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043c8:	4b0b      	ldr	r3, [pc, #44]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ce:	4a0a      	ldr	r2, [pc, #40]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80043d8:	e007      	b.n	80043ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043da:	4b07      	ldr	r3, [pc, #28]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043e2:	4a05      	ldr	r2, [pc, #20]	@ (80043f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043e8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	40007000 	.word	0x40007000
 80043fc:	20000000 	.word	0x20000000
 8004400:	431bde83 	.word	0x431bde83

08004404 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	f000 bc08 	b.w	8004c28 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004418:	4b96      	ldr	r3, [pc, #600]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004422:	4b94      	ldr	r3, [pc, #592]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80e4 	beq.w	8004602 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d007      	beq.n	8004450 <HAL_RCC_OscConfig+0x4c>
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b0c      	cmp	r3, #12
 8004444:	f040 808b 	bne.w	800455e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2b01      	cmp	r3, #1
 800444c:	f040 8087 	bne.w	800455e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004450:	4b88      	ldr	r3, [pc, #544]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_RCC_OscConfig+0x64>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e3df      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1a      	ldr	r2, [r3, #32]
 800446c:	4b81      	ldr	r3, [pc, #516]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d004      	beq.n	8004482 <HAL_RCC_OscConfig+0x7e>
 8004478:	4b7e      	ldr	r3, [pc, #504]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004480:	e005      	b.n	800448e <HAL_RCC_OscConfig+0x8a>
 8004482:	4b7c      	ldr	r3, [pc, #496]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 8004484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800448e:	4293      	cmp	r3, r2
 8004490:	d223      	bcs.n	80044da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fd94 	bl	8004fc4 <RCC_SetFlashLatencyFromMSIRange>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e3c0      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044a6:	4b73      	ldr	r3, [pc, #460]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a72      	ldr	r2, [pc, #456]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80044ac:	f043 0308 	orr.w	r3, r3, #8
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	4b70      	ldr	r3, [pc, #448]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	496d      	ldr	r1, [pc, #436]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	4968      	ldr	r1, [pc, #416]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
 80044d8:	e025      	b.n	8004526 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044da:	4b66      	ldr	r3, [pc, #408]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a65      	ldr	r2, [pc, #404]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80044e0:	f043 0308 	orr.w	r3, r3, #8
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	4b63      	ldr	r3, [pc, #396]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	4960      	ldr	r1, [pc, #384]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	495b      	ldr	r1, [pc, #364]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 8004508:	4313      	orrs	r3, r2
 800450a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fd54 	bl	8004fc4 <RCC_SetFlashLatencyFromMSIRange>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e380      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004526:	f000 fcc1 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 800452a:	4602      	mov	r2, r0
 800452c:	4b51      	ldr	r3, [pc, #324]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	4950      	ldr	r1, [pc, #320]	@ (8004678 <HAL_RCC_OscConfig+0x274>)
 8004538:	5ccb      	ldrb	r3, [r1, r3]
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	fa22 f303 	lsr.w	r3, r2, r3
 8004542:	4a4e      	ldr	r2, [pc, #312]	@ (800467c <HAL_RCC_OscConfig+0x278>)
 8004544:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004546:	4b4e      	ldr	r3, [pc, #312]	@ (8004680 <HAL_RCC_OscConfig+0x27c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe fc0a 	bl	8002d64 <HAL_InitTick>
 8004550:	4603      	mov	r3, r0
 8004552:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d052      	beq.n	8004600 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	e364      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d032      	beq.n	80045cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004566:	4b43      	ldr	r3, [pc, #268]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a42      	ldr	r2, [pc, #264]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004572:	f7fe fc47 	bl	8002e04 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800457a:	f7fe fc43 	bl	8002e04 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e34d      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800458c:	4b39      	ldr	r3, [pc, #228]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004598:	4b36      	ldr	r3, [pc, #216]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a35      	ldr	r2, [pc, #212]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 800459e:	f043 0308 	orr.w	r3, r3, #8
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b33      	ldr	r3, [pc, #204]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4930      	ldr	r1, [pc, #192]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	492b      	ldr	r1, [pc, #172]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	604b      	str	r3, [r1, #4]
 80045ca:	e01a      	b.n	8004602 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045cc:	4b29      	ldr	r3, [pc, #164]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a28      	ldr	r2, [pc, #160]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045d8:	f7fe fc14 	bl	8002e04 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045e0:	f7fe fc10 	bl	8002e04 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e31a      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045f2:	4b20      	ldr	r3, [pc, #128]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x1dc>
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004600:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d073      	beq.n	80046f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d005      	beq.n	8004620 <HAL_RCC_OscConfig+0x21c>
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b0c      	cmp	r3, #12
 8004618:	d10e      	bne.n	8004638 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b03      	cmp	r3, #3
 800461e:	d10b      	bne.n	8004638 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004620:	4b14      	ldr	r3, [pc, #80]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d063      	beq.n	80046f4 <HAL_RCC_OscConfig+0x2f0>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d15f      	bne.n	80046f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e2f7      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004640:	d106      	bne.n	8004650 <HAL_RCC_OscConfig+0x24c>
 8004642:	4b0c      	ldr	r3, [pc, #48]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a0b      	ldr	r2, [pc, #44]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 8004648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	e025      	b.n	800469c <HAL_RCC_OscConfig+0x298>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004658:	d114      	bne.n	8004684 <HAL_RCC_OscConfig+0x280>
 800465a:	4b06      	ldr	r3, [pc, #24]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a05      	ldr	r2, [pc, #20]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 8004660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	4b03      	ldr	r3, [pc, #12]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a02      	ldr	r2, [pc, #8]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 800466c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	e013      	b.n	800469c <HAL_RCC_OscConfig+0x298>
 8004674:	40021000 	.word	0x40021000
 8004678:	08008958 	.word	0x08008958
 800467c:	20000000 	.word	0x20000000
 8004680:	20000004 	.word	0x20000004
 8004684:	4ba0      	ldr	r3, [pc, #640]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a9f      	ldr	r2, [pc, #636]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 800468a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	4b9d      	ldr	r3, [pc, #628]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a9c      	ldr	r2, [pc, #624]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 8004696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800469a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d013      	beq.n	80046cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fe fbae 	bl	8002e04 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fe fbaa 	bl	8002e04 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	@ 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e2b4      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046be:	4b92      	ldr	r3, [pc, #584]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x2a8>
 80046ca:	e014      	b.n	80046f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fe fb9a 	bl	8002e04 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d4:	f7fe fb96 	bl	8002e04 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	@ 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e2a0      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046e6:	4b88      	ldr	r3, [pc, #544]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x2d0>
 80046f2:	e000      	b.n	80046f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d060      	beq.n	80047c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b04      	cmp	r3, #4
 8004706:	d005      	beq.n	8004714 <HAL_RCC_OscConfig+0x310>
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b0c      	cmp	r3, #12
 800470c:	d119      	bne.n	8004742 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d116      	bne.n	8004742 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004714:	4b7c      	ldr	r3, [pc, #496]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_RCC_OscConfig+0x328>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e27d      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472c:	4b76      	ldr	r3, [pc, #472]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	061b      	lsls	r3, r3, #24
 800473a:	4973      	ldr	r1, [pc, #460]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 800473c:	4313      	orrs	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004740:	e040      	b.n	80047c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d023      	beq.n	8004792 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800474a:	4b6f      	ldr	r3, [pc, #444]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6e      	ldr	r2, [pc, #440]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 8004750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004756:	f7fe fb55 	bl	8002e04 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800475e:	f7fe fb51 	bl	8002e04 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e25b      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004770:	4b65      	ldr	r3, [pc, #404]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477c:	4b62      	ldr	r3, [pc, #392]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	061b      	lsls	r3, r3, #24
 800478a:	495f      	ldr	r1, [pc, #380]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 800478c:	4313      	orrs	r3, r2
 800478e:	604b      	str	r3, [r1, #4]
 8004790:	e018      	b.n	80047c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004792:	4b5d      	ldr	r3, [pc, #372]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a5c      	ldr	r2, [pc, #368]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 8004798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800479c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479e:	f7fe fb31 	bl	8002e04 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a6:	f7fe fb2d 	bl	8002e04 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e237      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047b8:	4b53      	ldr	r3, [pc, #332]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f0      	bne.n	80047a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d03c      	beq.n	800484a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01c      	beq.n	8004812 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 80047da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047de:	4a4a      	ldr	r2, [pc, #296]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e8:	f7fe fb0c 	bl	8002e04 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047f0:	f7fe fb08 	bl	8002e04 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e212      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004802:	4b41      	ldr	r3, [pc, #260]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 8004804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0ef      	beq.n	80047f0 <HAL_RCC_OscConfig+0x3ec>
 8004810:	e01b      	b.n	800484a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004812:	4b3d      	ldr	r3, [pc, #244]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 8004814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004818:	4a3b      	ldr	r2, [pc, #236]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 800481a:	f023 0301 	bic.w	r3, r3, #1
 800481e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004822:	f7fe faef 	bl	8002e04 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800482a:	f7fe faeb 	bl	8002e04 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e1f5      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800483c:	4b32      	ldr	r3, [pc, #200]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 800483e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1ef      	bne.n	800482a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 80a6 	beq.w	80049a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004858:	2300      	movs	r3, #0
 800485a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800485c:	4b2a      	ldr	r3, [pc, #168]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 800485e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10d      	bne.n	8004884 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004868:	4b27      	ldr	r3, [pc, #156]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 800486a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486c:	4a26      	ldr	r2, [pc, #152]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 800486e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004872:	6593      	str	r3, [r2, #88]	@ 0x58
 8004874:	4b24      	ldr	r3, [pc, #144]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 8004876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004880:	2301      	movs	r3, #1
 8004882:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004884:	4b21      	ldr	r3, [pc, #132]	@ (800490c <HAL_RCC_OscConfig+0x508>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d118      	bne.n	80048c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004890:	4b1e      	ldr	r3, [pc, #120]	@ (800490c <HAL_RCC_OscConfig+0x508>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1d      	ldr	r2, [pc, #116]	@ (800490c <HAL_RCC_OscConfig+0x508>)
 8004896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800489a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800489c:	f7fe fab2 	bl	8002e04 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a4:	f7fe faae 	bl	8002e04 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e1b8      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048b6:	4b15      	ldr	r3, [pc, #84]	@ (800490c <HAL_RCC_OscConfig+0x508>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d108      	bne.n	80048dc <HAL_RCC_OscConfig+0x4d8>
 80048ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048da:	e029      	b.n	8004930 <HAL_RCC_OscConfig+0x52c>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b05      	cmp	r3, #5
 80048e2:	d115      	bne.n	8004910 <HAL_RCC_OscConfig+0x50c>
 80048e4:	4b08      	ldr	r3, [pc, #32]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ea:	4a07      	ldr	r2, [pc, #28]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 80048ec:	f043 0304 	orr.w	r3, r3, #4
 80048f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048f4:	4b04      	ldr	r3, [pc, #16]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fa:	4a03      	ldr	r2, [pc, #12]	@ (8004908 <HAL_RCC_OscConfig+0x504>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004904:	e014      	b.n	8004930 <HAL_RCC_OscConfig+0x52c>
 8004906:	bf00      	nop
 8004908:	40021000 	.word	0x40021000
 800490c:	40007000 	.word	0x40007000
 8004910:	4b9d      	ldr	r3, [pc, #628]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004916:	4a9c      	ldr	r2, [pc, #624]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004920:	4b99      	ldr	r3, [pc, #612]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004926:	4a98      	ldr	r2, [pc, #608]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004928:	f023 0304 	bic.w	r3, r3, #4
 800492c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d016      	beq.n	8004966 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004938:	f7fe fa64 	bl	8002e04 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800493e:	e00a      	b.n	8004956 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004940:	f7fe fa60 	bl	8002e04 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e168      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004956:	4b8c      	ldr	r3, [pc, #560]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0ed      	beq.n	8004940 <HAL_RCC_OscConfig+0x53c>
 8004964:	e015      	b.n	8004992 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004966:	f7fe fa4d 	bl	8002e04 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800496c:	e00a      	b.n	8004984 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496e:	f7fe fa49 	bl	8002e04 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497c:	4293      	cmp	r3, r2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e151      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004984:	4b80      	ldr	r3, [pc, #512]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1ed      	bne.n	800496e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004992:	7ffb      	ldrb	r3, [r7, #31]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d105      	bne.n	80049a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004998:	4b7b      	ldr	r3, [pc, #492]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 800499a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499c:	4a7a      	ldr	r2, [pc, #488]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 800499e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d03c      	beq.n	8004a2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01c      	beq.n	80049f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049b8:	4b73      	ldr	r3, [pc, #460]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 80049ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049be:	4a72      	ldr	r2, [pc, #456]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c8:	f7fe fa1c 	bl	8002e04 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049d0:	f7fe fa18 	bl	8002e04 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e122      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049e2:	4b69      	ldr	r3, [pc, #420]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 80049e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0ef      	beq.n	80049d0 <HAL_RCC_OscConfig+0x5cc>
 80049f0:	e01b      	b.n	8004a2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049f2:	4b65      	ldr	r3, [pc, #404]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 80049f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049f8:	4a63      	ldr	r2, [pc, #396]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 80049fa:	f023 0301 	bic.w	r3, r3, #1
 80049fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a02:	f7fe f9ff 	bl	8002e04 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a0a:	f7fe f9fb 	bl	8002e04 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e105      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a1c:	4b5a      	ldr	r3, [pc, #360]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1ef      	bne.n	8004a0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 80f9 	beq.w	8004c26 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	f040 80cf 	bne.w	8004bdc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a3e:	4b52      	ldr	r3, [pc, #328]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f003 0203 	and.w	r2, r3, #3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d12c      	bne.n	8004aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d123      	bne.n	8004aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d11b      	bne.n	8004aac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d113      	bne.n	8004aac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	3b01      	subs	r3, #1
 8004a92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d109      	bne.n	8004aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	085b      	lsrs	r3, r3, #1
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d071      	beq.n	8004b90 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b0c      	cmp	r3, #12
 8004ab0:	d068      	beq.n	8004b84 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ab2:	4b35      	ldr	r3, [pc, #212]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d105      	bne.n	8004aca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004abe:	4b32      	ldr	r3, [pc, #200]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e0ac      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ace:	4b2e      	ldr	r3, [pc, #184]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2d      	ldr	r2, [pc, #180]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004ad4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ad8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ada:	f7fe f993 	bl	8002e04 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fe f98f 	bl	8002e04 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e099      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af4:	4b24      	ldr	r3, [pc, #144]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f0      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b00:	4b21      	ldr	r3, [pc, #132]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	4b21      	ldr	r3, [pc, #132]	@ (8004b8c <HAL_RCC_OscConfig+0x788>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b10:	3a01      	subs	r2, #1
 8004b12:	0112      	lsls	r2, r2, #4
 8004b14:	4311      	orrs	r1, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b1a:	0212      	lsls	r2, r2, #8
 8004b1c:	4311      	orrs	r1, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b22:	0852      	lsrs	r2, r2, #1
 8004b24:	3a01      	subs	r2, #1
 8004b26:	0552      	lsls	r2, r2, #21
 8004b28:	4311      	orrs	r1, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b2e:	0852      	lsrs	r2, r2, #1
 8004b30:	3a01      	subs	r2, #1
 8004b32:	0652      	lsls	r2, r2, #25
 8004b34:	4311      	orrs	r1, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b3a:	06d2      	lsls	r2, r2, #27
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	4912      	ldr	r1, [pc, #72]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b44:	4b10      	ldr	r3, [pc, #64]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a0f      	ldr	r2, [pc, #60]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b50:	4b0d      	ldr	r3, [pc, #52]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4a0c      	ldr	r2, [pc, #48]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b5c:	f7fe f952 	bl	8002e04 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b64:	f7fe f94e 	bl	8002e04 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e058      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b76:	4b04      	ldr	r3, [pc, #16]	@ (8004b88 <HAL_RCC_OscConfig+0x784>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0f0      	beq.n	8004b64 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b82:	e050      	b.n	8004c26 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e04f      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b90:	4b27      	ldr	r3, [pc, #156]	@ (8004c30 <HAL_RCC_OscConfig+0x82c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d144      	bne.n	8004c26 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b9c:	4b24      	ldr	r3, [pc, #144]	@ (8004c30 <HAL_RCC_OscConfig+0x82c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a23      	ldr	r2, [pc, #140]	@ (8004c30 <HAL_RCC_OscConfig+0x82c>)
 8004ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ba8:	4b21      	ldr	r3, [pc, #132]	@ (8004c30 <HAL_RCC_OscConfig+0x82c>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4a20      	ldr	r2, [pc, #128]	@ (8004c30 <HAL_RCC_OscConfig+0x82c>)
 8004bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bb4:	f7fe f926 	bl	8002e04 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fe f922 	bl	8002e04 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e02c      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bce:	4b18      	ldr	r3, [pc, #96]	@ (8004c30 <HAL_RCC_OscConfig+0x82c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x7b8>
 8004bda:	e024      	b.n	8004c26 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	2b0c      	cmp	r3, #12
 8004be0:	d01f      	beq.n	8004c22 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be2:	4b13      	ldr	r3, [pc, #76]	@ (8004c30 <HAL_RCC_OscConfig+0x82c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a12      	ldr	r2, [pc, #72]	@ (8004c30 <HAL_RCC_OscConfig+0x82c>)
 8004be8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bee:	f7fe f909 	bl	8002e04 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf6:	f7fe f905 	bl	8002e04 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e00f      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c08:	4b09      	ldr	r3, [pc, #36]	@ (8004c30 <HAL_RCC_OscConfig+0x82c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f0      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c14:	4b06      	ldr	r3, [pc, #24]	@ (8004c30 <HAL_RCC_OscConfig+0x82c>)
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	4905      	ldr	r1, [pc, #20]	@ (8004c30 <HAL_RCC_OscConfig+0x82c>)
 8004c1a:	4b06      	ldr	r3, [pc, #24]	@ (8004c34 <HAL_RCC_OscConfig+0x830>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	60cb      	str	r3, [r1, #12]
 8004c20:	e001      	b.n	8004c26 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3720      	adds	r7, #32
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40021000 	.word	0x40021000
 8004c34:	feeefffc 	.word	0xfeeefffc

08004c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e11d      	b.n	8004e8c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c50:	4b90      	ldr	r3, [pc, #576]	@ (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d910      	bls.n	8004c80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5e:	4b8d      	ldr	r3, [pc, #564]	@ (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f023 020f 	bic.w	r2, r3, #15
 8004c66:	498b      	ldr	r1, [pc, #556]	@ (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6e:	4b89      	ldr	r3, [pc, #548]	@ (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e105      	b.n	8004e8c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d010      	beq.n	8004cae <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	4b81      	ldr	r3, [pc, #516]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d908      	bls.n	8004cae <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c9c:	4b7e      	ldr	r3, [pc, #504]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	497b      	ldr	r1, [pc, #492]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d079      	beq.n	8004dae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d11e      	bne.n	8004d00 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc2:	4b75      	ldr	r3, [pc, #468]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e0dc      	b.n	8004e8c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004cd2:	f000 f9d1 	bl	8005078 <RCC_GetSysClockFreqFromPLLSource>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4a70      	ldr	r2, [pc, #448]	@ (8004e9c <HAL_RCC_ClockConfig+0x264>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d946      	bls.n	8004d6c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004cde:	4b6e      	ldr	r3, [pc, #440]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d140      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004cea:	4b6b      	ldr	r3, [pc, #428]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cf2:	4a69      	ldr	r2, [pc, #420]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004cfa:	2380      	movs	r3, #128	@ 0x80
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	e035      	b.n	8004d6c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d08:	4b63      	ldr	r3, [pc, #396]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d115      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0b9      	b.n	8004e8c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d107      	bne.n	8004d30 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d20:	4b5d      	ldr	r3, [pc, #372]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d109      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0ad      	b.n	8004e8c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d30:	4b59      	ldr	r3, [pc, #356]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0a5      	b.n	8004e8c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004d40:	f000 f8b4 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 8004d44:	4603      	mov	r3, r0
 8004d46:	4a55      	ldr	r2, [pc, #340]	@ (8004e9c <HAL_RCC_ClockConfig+0x264>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d90f      	bls.n	8004d6c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004d4c:	4b52      	ldr	r3, [pc, #328]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d109      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d58:	4b4f      	ldr	r3, [pc, #316]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d60:	4a4d      	ldr	r2, [pc, #308]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d66:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d68:	2380      	movs	r3, #128	@ 0x80
 8004d6a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d6c:	4b4a      	ldr	r3, [pc, #296]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f023 0203 	bic.w	r2, r3, #3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	4947      	ldr	r1, [pc, #284]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d7e:	f7fe f841 	bl	8002e04 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d84:	e00a      	b.n	8004d9c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d86:	f7fe f83d 	bl	8002e04 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e077      	b.n	8004e8c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 020c 	and.w	r2, r3, #12
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d1eb      	bne.n	8004d86 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b80      	cmp	r3, #128	@ 0x80
 8004db2:	d105      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004db4:	4b38      	ldr	r3, [pc, #224]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	4a37      	ldr	r2, [pc, #220]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004dba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dbe:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d010      	beq.n	8004dee <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	4b31      	ldr	r3, [pc, #196]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d208      	bcs.n	8004dee <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	492b      	ldr	r1, [pc, #172]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dee:	4b29      	ldr	r3, [pc, #164]	@ (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d210      	bcs.n	8004e1e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfc:	4b25      	ldr	r3, [pc, #148]	@ (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f023 020f 	bic.w	r2, r3, #15
 8004e04:	4923      	ldr	r1, [pc, #140]	@ (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0c:	4b21      	ldr	r3, [pc, #132]	@ (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d001      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e036      	b.n	8004e8c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d008      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	4918      	ldr	r1, [pc, #96]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d009      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e48:	4b13      	ldr	r3, [pc, #76]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4910      	ldr	r1, [pc, #64]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e5c:	f000 f826 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 8004e60:	4602      	mov	r2, r0
 8004e62:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	091b      	lsrs	r3, r3, #4
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	490c      	ldr	r1, [pc, #48]	@ (8004ea0 <HAL_RCC_ClockConfig+0x268>)
 8004e6e:	5ccb      	ldrb	r3, [r1, r3]
 8004e70:	f003 031f 	and.w	r3, r3, #31
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
 8004e78:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea4 <HAL_RCC_ClockConfig+0x26c>)
 8004e7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea8 <HAL_RCC_ClockConfig+0x270>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fd ff6f 	bl	8002d64 <HAL_InitTick>
 8004e86:	4603      	mov	r3, r0
 8004e88:	73fb      	strb	r3, [r7, #15]

  return status;
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40022000 	.word	0x40022000
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	04c4b400 	.word	0x04c4b400
 8004ea0:	08008958 	.word	0x08008958
 8004ea4:	20000000 	.word	0x20000000
 8004ea8:	20000004 	.word	0x20000004

08004eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b089      	sub	sp, #36	@ 0x24
 8004eb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eba:	4b3e      	ldr	r3, [pc, #248]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
 8004ec2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b0c      	cmp	r3, #12
 8004ed8:	d121      	bne.n	8004f1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d11e      	bne.n	8004f1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ee0:	4b34      	ldr	r3, [pc, #208]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d107      	bne.n	8004efc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004eec:	4b31      	ldr	r3, [pc, #196]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ef2:	0a1b      	lsrs	r3, r3, #8
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	e005      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004efc:	4b2d      	ldr	r3, [pc, #180]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	091b      	lsrs	r3, r3, #4
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f08:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10d      	bne.n	8004f34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f1c:	e00a      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d102      	bne.n	8004f2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f24:	4b25      	ldr	r3, [pc, #148]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8004f26:	61bb      	str	r3, [r7, #24]
 8004f28:	e004      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f30:	4b23      	ldr	r3, [pc, #140]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b0c      	cmp	r3, #12
 8004f38:	d134      	bne.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d003      	beq.n	8004f52 <HAL_RCC_GetSysClockFreq+0xa6>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d003      	beq.n	8004f58 <HAL_RCC_GetSysClockFreq+0xac>
 8004f50:	e005      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f52:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8004f54:	617b      	str	r3, [r7, #20]
      break;
 8004f56:	e005      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f58:	4b19      	ldr	r3, [pc, #100]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f5a:	617b      	str	r3, [r7, #20]
      break;
 8004f5c:	e002      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	617b      	str	r3, [r7, #20]
      break;
 8004f62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f64:	4b13      	ldr	r3, [pc, #76]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	091b      	lsrs	r3, r3, #4
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	3301      	adds	r3, #1
 8004f70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f72:	4b10      	ldr	r3, [pc, #64]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	0a1b      	lsrs	r3, r3, #8
 8004f78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	fb03 f202 	mul.w	r2, r3, r2
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	0e5b      	lsrs	r3, r3, #25
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	3301      	adds	r3, #1
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3724      	adds	r7, #36	@ 0x24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	08008968 	.word	0x08008968
 8004fbc:	00f42400 	.word	0x00f42400
 8004fc0:	007a1200 	.word	0x007a1200

08004fc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fcc:	2300      	movs	r3, #0
 8004fce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fd0:	4b27      	ldr	r3, [pc, #156]	@ (8005070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fdc:	f7ff f94e 	bl	800427c <HAL_PWREx_GetVoltageRange>
 8004fe0:	6178      	str	r0, [r7, #20]
 8004fe2:	e014      	b.n	800500e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fe4:	4b22      	ldr	r3, [pc, #136]	@ (8005070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe8:	4a21      	ldr	r2, [pc, #132]	@ (8005070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fee:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8005070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ffc:	f7ff f93e 	bl	800427c <HAL_PWREx_GetVoltageRange>
 8005000:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005002:	4b1b      	ldr	r3, [pc, #108]	@ (8005070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005006:	4a1a      	ldr	r2, [pc, #104]	@ (8005070 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005008:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800500c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005014:	d10b      	bne.n	800502e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b80      	cmp	r3, #128	@ 0x80
 800501a:	d913      	bls.n	8005044 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005020:	d902      	bls.n	8005028 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005022:	2302      	movs	r3, #2
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	e00d      	b.n	8005044 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005028:	2301      	movs	r3, #1
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	e00a      	b.n	8005044 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b7f      	cmp	r3, #127	@ 0x7f
 8005032:	d902      	bls.n	800503a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005034:	2302      	movs	r3, #2
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	e004      	b.n	8005044 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b70      	cmp	r3, #112	@ 0x70
 800503e:	d101      	bne.n	8005044 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005040:	2301      	movs	r3, #1
 8005042:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005044:	4b0b      	ldr	r3, [pc, #44]	@ (8005074 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f023 020f 	bic.w	r2, r3, #15
 800504c:	4909      	ldr	r1, [pc, #36]	@ (8005074 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005054:	4b07      	ldr	r3, [pc, #28]	@ (8005074 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	429a      	cmp	r2, r3
 8005060:	d001      	beq.n	8005066 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40021000 	.word	0x40021000
 8005074:	40022000 	.word	0x40022000

08005078 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800507e:	4b2d      	ldr	r3, [pc, #180]	@ (8005134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b03      	cmp	r3, #3
 800508c:	d00b      	beq.n	80050a6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b03      	cmp	r3, #3
 8005092:	d825      	bhi.n	80050e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d008      	beq.n	80050ac <RCC_GetSysClockFreqFromPLLSource+0x34>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d11f      	bne.n	80050e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80050a0:	4b25      	ldr	r3, [pc, #148]	@ (8005138 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80050a2:	613b      	str	r3, [r7, #16]
    break;
 80050a4:	e01f      	b.n	80050e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80050a6:	4b25      	ldr	r3, [pc, #148]	@ (800513c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80050a8:	613b      	str	r3, [r7, #16]
    break;
 80050aa:	e01c      	b.n	80050e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050ac:	4b21      	ldr	r3, [pc, #132]	@ (8005134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d107      	bne.n	80050c8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80050ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050be:	0a1b      	lsrs	r3, r3, #8
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e005      	b.n	80050d4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80050d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005140 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050dc:	613b      	str	r3, [r7, #16]
    break;
 80050de:	e002      	b.n	80050e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]
    break;
 80050e4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050e6:	4b13      	ldr	r3, [pc, #76]	@ (8005134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	091b      	lsrs	r3, r3, #4
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	3301      	adds	r3, #1
 80050f2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	0a1b      	lsrs	r3, r3, #8
 80050fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	fb03 f202 	mul.w	r2, r3, r2
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	fbb2 f3f3 	udiv	r3, r2, r3
 800510a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800510c:	4b09      	ldr	r3, [pc, #36]	@ (8005134 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	0e5b      	lsrs	r3, r3, #25
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	3301      	adds	r3, #1
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005126:	683b      	ldr	r3, [r7, #0]
}
 8005128:	4618      	mov	r0, r3
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	40021000 	.word	0x40021000
 8005138:	00f42400 	.word	0x00f42400
 800513c:	007a1200 	.word	0x007a1200
 8005140:	08008968 	.word	0x08008968

08005144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800514c:	2300      	movs	r3, #0
 800514e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005150:	2300      	movs	r3, #0
 8005152:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800515c:	2b00      	cmp	r3, #0
 800515e:	d040      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005164:	2b80      	cmp	r3, #128	@ 0x80
 8005166:	d02a      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005168:	2b80      	cmp	r3, #128	@ 0x80
 800516a:	d825      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800516c:	2b60      	cmp	r3, #96	@ 0x60
 800516e:	d026      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005170:	2b60      	cmp	r3, #96	@ 0x60
 8005172:	d821      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005174:	2b40      	cmp	r3, #64	@ 0x40
 8005176:	d006      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005178:	2b40      	cmp	r3, #64	@ 0x40
 800517a:	d81d      	bhi.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005180:	2b20      	cmp	r3, #32
 8005182:	d010      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005184:	e018      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005186:	4b89      	ldr	r3, [pc, #548]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	4a88      	ldr	r2, [pc, #544]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800518c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005190:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005192:	e015      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3304      	adds	r3, #4
 8005198:	2100      	movs	r1, #0
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fb02 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051a4:	e00c      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3320      	adds	r3, #32
 80051aa:	2100      	movs	r1, #0
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fbed 	bl	800598c <RCCEx_PLLSAI2_Config>
 80051b2:	4603      	mov	r3, r0
 80051b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051b6:	e003      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	74fb      	strb	r3, [r7, #19]
      break;
 80051bc:	e000      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80051be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c0:	7cfb      	ldrb	r3, [r7, #19]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051c6:	4b79      	ldr	r3, [pc, #484]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051cc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051d4:	4975      	ldr	r1, [pc, #468]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80051dc:	e001      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051de:	7cfb      	ldrb	r3, [r7, #19]
 80051e0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d047      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f6:	d030      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80051f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051fc:	d82a      	bhi.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80051fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005202:	d02a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005204:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005208:	d824      	bhi.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800520a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800520e:	d008      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005214:	d81e      	bhi.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800521a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800521e:	d010      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005220:	e018      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005222:	4b62      	ldr	r3, [pc, #392]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	4a61      	ldr	r2, [pc, #388]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800522c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800522e:	e015      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	2100      	movs	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fab4 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005240:	e00c      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3320      	adds	r3, #32
 8005246:	2100      	movs	r1, #0
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fb9f 	bl	800598c <RCCEx_PLLSAI2_Config>
 800524e:	4603      	mov	r3, r0
 8005250:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005252:	e003      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	74fb      	strb	r3, [r7, #19]
      break;
 8005258:	e000      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800525a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800525c:	7cfb      	ldrb	r3, [r7, #19]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10b      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005262:	4b52      	ldr	r3, [pc, #328]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005264:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005268:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005270:	494e      	ldr	r1, [pc, #312]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005278:	e001      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527a:	7cfb      	ldrb	r3, [r7, #19]
 800527c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 809f 	beq.w	80053ca <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800528c:	2300      	movs	r3, #0
 800528e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005290:	4b46      	ldr	r3, [pc, #280]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80052a0:	2300      	movs	r3, #0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00d      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a6:	4b41      	ldr	r3, [pc, #260]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052aa:	4a40      	ldr	r2, [pc, #256]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80052b2:	4b3e      	ldr	r3, [pc, #248]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ba:	60bb      	str	r3, [r7, #8]
 80052bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052be:	2301      	movs	r3, #1
 80052c0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052c2:	4b3b      	ldr	r3, [pc, #236]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a3a      	ldr	r2, [pc, #232]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80052c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052ce:	f7fd fd99 	bl	8002e04 <HAL_GetTick>
 80052d2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052d4:	e009      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d6:	f7fd fd95 	bl	8002e04 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d902      	bls.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	74fb      	strb	r3, [r7, #19]
        break;
 80052e8:	e005      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052ea:	4b31      	ldr	r3, [pc, #196]	@ (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0ef      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80052f6:	7cfb      	ldrb	r3, [r7, #19]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d15b      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052fc:	4b2b      	ldr	r3, [pc, #172]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005306:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d01f      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	429a      	cmp	r2, r3
 8005318:	d019      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800531a:	4b24      	ldr	r3, [pc, #144]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005324:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005326:	4b21      	ldr	r3, [pc, #132]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800532c:	4a1f      	ldr	r2, [pc, #124]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800532e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005332:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005336:	4b1d      	ldr	r3, [pc, #116]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533c:	4a1b      	ldr	r2, [pc, #108]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800533e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005342:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005346:	4a19      	ldr	r2, [pc, #100]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d016      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fd fd54 	bl	8002e04 <HAL_GetTick>
 800535c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800535e:	e00b      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005360:	f7fd fd50 	bl	8002e04 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536e:	4293      	cmp	r3, r2
 8005370:	d902      	bls.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	74fb      	strb	r3, [r7, #19]
            break;
 8005376:	e006      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005378:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800537a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0ec      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005386:	7cfb      	ldrb	r3, [r7, #19]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10c      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800538c:	4b07      	ldr	r3, [pc, #28]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005392:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539c:	4903      	ldr	r1, [pc, #12]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80053a4:	e008      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053a6:	7cfb      	ldrb	r3, [r7, #19]
 80053a8:	74bb      	strb	r3, [r7, #18]
 80053aa:	e005      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80053ac:	40021000 	.word	0x40021000
 80053b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b4:	7cfb      	ldrb	r3, [r7, #19]
 80053b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053b8:	7c7b      	ldrb	r3, [r7, #17]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d105      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053be:	4ba0      	ldr	r3, [pc, #640]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c2:	4a9f      	ldr	r2, [pc, #636]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053d6:	4b9a      	ldr	r3, [pc, #616]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053dc:	f023 0203 	bic.w	r2, r3, #3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e4:	4996      	ldr	r1, [pc, #600]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053f8:	4b91      	ldr	r3, [pc, #580]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fe:	f023 020c 	bic.w	r2, r3, #12
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005406:	498e      	ldr	r1, [pc, #568]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800541a:	4b89      	ldr	r3, [pc, #548]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800541c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005420:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005428:	4985      	ldr	r1, [pc, #532]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800543c:	4b80      	ldr	r3, [pc, #512]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005442:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800544a:	497d      	ldr	r1, [pc, #500]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800545e:	4b78      	ldr	r3, [pc, #480]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005464:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800546c:	4974      	ldr	r1, [pc, #464]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005480:	4b6f      	ldr	r3, [pc, #444]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005486:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800548e:	496c      	ldr	r1, [pc, #432]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054a2:	4b67      	ldr	r3, [pc, #412]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054b0:	4963      	ldr	r1, [pc, #396]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054d2:	495b      	ldr	r1, [pc, #364]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054e6:	4b56      	ldr	r3, [pc, #344]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f4:	4952      	ldr	r1, [pc, #328]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005508:	4b4d      	ldr	r3, [pc, #308]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005516:	494a      	ldr	r1, [pc, #296]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800552a:	4b45      	ldr	r3, [pc, #276]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005530:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005538:	4941      	ldr	r1, [pc, #260]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800554c:	4b3c      	ldr	r3, [pc, #240]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800554e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005552:	f023 0203 	bic.w	r2, r3, #3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800555a:	4939      	ldr	r1, [pc, #228]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d028      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800556e:	4b34      	ldr	r3, [pc, #208]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005574:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800557c:	4930      	ldr	r1, [pc, #192]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005588:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800558c:	d106      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800558e:	4b2c      	ldr	r3, [pc, #176]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	4a2b      	ldr	r2, [pc, #172]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005598:	60d3      	str	r3, [r2, #12]
 800559a:	e011      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055a4:	d10c      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3304      	adds	r3, #4
 80055aa:	2101      	movs	r1, #1
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 f8f9 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80055b6:	7cfb      	ldrb	r3, [r7, #19]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80055bc:	7cfb      	ldrb	r3, [r7, #19]
 80055be:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d04d      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055d4:	d108      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80055d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055dc:	4a18      	ldr	r2, [pc, #96]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055e2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80055e6:	e012      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80055e8:	4b15      	ldr	r3, [pc, #84]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055ee:	4a14      	ldr	r2, [pc, #80]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055f4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80055f8:	4b11      	ldr	r3, [pc, #68]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005606:	490e      	ldr	r1, [pc, #56]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005612:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005616:	d106      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005618:	4b09      	ldr	r3, [pc, #36]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4a08      	ldr	r2, [pc, #32]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800561e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005622:	60d3      	str	r3, [r2, #12]
 8005624:	e020      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800562a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800562e:	d109      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005630:	4b03      	ldr	r3, [pc, #12]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4a02      	ldr	r2, [pc, #8]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800563a:	60d3      	str	r3, [r2, #12]
 800563c:	e014      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800563e:	bf00      	nop
 8005640:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005648:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800564c:	d10c      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3304      	adds	r3, #4
 8005652:	2101      	movs	r1, #1
 8005654:	4618      	mov	r0, r3
 8005656:	f000 f8a5 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800565e:	7cfb      	ldrb	r3, [r7, #19]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005664:	7cfb      	ldrb	r3, [r7, #19]
 8005666:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d028      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005674:	4b4a      	ldr	r3, [pc, #296]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005682:	4947      	ldr	r1, [pc, #284]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800568e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005692:	d106      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005694:	4b42      	ldr	r3, [pc, #264]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4a41      	ldr	r2, [pc, #260]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800569a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800569e:	60d3      	str	r3, [r2, #12]
 80056a0:	e011      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056aa:	d10c      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3304      	adds	r3, #4
 80056b0:	2101      	movs	r1, #1
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 f876 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 80056b8:	4603      	mov	r3, r0
 80056ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056bc:	7cfb      	ldrb	r3, [r7, #19]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80056c2:	7cfb      	ldrb	r3, [r7, #19]
 80056c4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01e      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056d2:	4b33      	ldr	r3, [pc, #204]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056e2:	492f      	ldr	r1, [pc, #188]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056f4:	d10c      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3304      	adds	r3, #4
 80056fa:	2102      	movs	r1, #2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 f851 	bl	80057a4 <RCCEx_PLLSAI1_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005706:	7cfb      	ldrb	r3, [r7, #19]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00b      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800571c:	4b20      	ldr	r3, [pc, #128]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800571e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005722:	f023 0204 	bic.w	r2, r3, #4
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800572c:	491c      	ldr	r1, [pc, #112]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00b      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005740:	4b17      	ldr	r3, [pc, #92]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005742:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005746:	f023 0218 	bic.w	r2, r3, #24
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005750:	4913      	ldr	r1, [pc, #76]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d017      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005764:	4b0e      	ldr	r3, [pc, #56]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005766:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800576a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005774:	490a      	ldr	r1, [pc, #40]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005782:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005786:	d105      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005788:	4b05      	ldr	r3, [pc, #20]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	4a04      	ldr	r2, [pc, #16]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800578e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005792:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005794:	7cbb      	ldrb	r3, [r7, #18]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40021000 	.word	0x40021000

080057a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057b2:	4b72      	ldr	r3, [pc, #456]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00e      	beq.n	80057dc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80057be:	4b6f      	ldr	r3, [pc, #444]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0203 	and.w	r2, r3, #3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d103      	bne.n	80057d6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
       ||
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d142      	bne.n	800585c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	73fb      	strb	r3, [r7, #15]
 80057da:	e03f      	b.n	800585c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d018      	beq.n	8005816 <RCCEx_PLLSAI1_Config+0x72>
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d825      	bhi.n	8005834 <RCCEx_PLLSAI1_Config+0x90>
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d002      	beq.n	80057f2 <RCCEx_PLLSAI1_Config+0x4e>
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d009      	beq.n	8005804 <RCCEx_PLLSAI1_Config+0x60>
 80057f0:	e020      	b.n	8005834 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057f2:	4b62      	ldr	r3, [pc, #392]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d11d      	bne.n	800583a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005802:	e01a      	b.n	800583a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005804:	4b5d      	ldr	r3, [pc, #372]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800580c:	2b00      	cmp	r3, #0
 800580e:	d116      	bne.n	800583e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005814:	e013      	b.n	800583e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005816:	4b59      	ldr	r3, [pc, #356]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10f      	bne.n	8005842 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005822:	4b56      	ldr	r3, [pc, #344]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005832:	e006      	b.n	8005842 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
      break;
 8005838:	e004      	b.n	8005844 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800583a:	bf00      	nop
 800583c:	e002      	b.n	8005844 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800583e:	bf00      	nop
 8005840:	e000      	b.n	8005844 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005842:	bf00      	nop
    }

    if(status == HAL_OK)
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d108      	bne.n	800585c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800584a:	4b4c      	ldr	r3, [pc, #304]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f023 0203 	bic.w	r2, r3, #3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4949      	ldr	r1, [pc, #292]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005858:	4313      	orrs	r3, r2
 800585a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f040 8086 	bne.w	8005970 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005864:	4b45      	ldr	r3, [pc, #276]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a44      	ldr	r2, [pc, #272]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 800586a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800586e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005870:	f7fd fac8 	bl	8002e04 <HAL_GetTick>
 8005874:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005876:	e009      	b.n	800588c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005878:	f7fd fac4 	bl	8002e04 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d902      	bls.n	800588c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	73fb      	strb	r3, [r7, #15]
        break;
 800588a:	e005      	b.n	8005898 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800588c:	4b3b      	ldr	r3, [pc, #236]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1ef      	bne.n	8005878 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d168      	bne.n	8005970 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d113      	bne.n	80058cc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058a4:	4b35      	ldr	r3, [pc, #212]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	4b35      	ldr	r3, [pc, #212]	@ (8005980 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058aa:	4013      	ands	r3, r2
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6892      	ldr	r2, [r2, #8]
 80058b0:	0211      	lsls	r1, r2, #8
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68d2      	ldr	r2, [r2, #12]
 80058b6:	06d2      	lsls	r2, r2, #27
 80058b8:	4311      	orrs	r1, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6852      	ldr	r2, [r2, #4]
 80058be:	3a01      	subs	r2, #1
 80058c0:	0112      	lsls	r2, r2, #4
 80058c2:	430a      	orrs	r2, r1
 80058c4:	492d      	ldr	r1, [pc, #180]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	610b      	str	r3, [r1, #16]
 80058ca:	e02d      	b.n	8005928 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d115      	bne.n	80058fe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058d2:	4b2a      	ldr	r3, [pc, #168]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005984 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058d8:	4013      	ands	r3, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6892      	ldr	r2, [r2, #8]
 80058de:	0211      	lsls	r1, r2, #8
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6912      	ldr	r2, [r2, #16]
 80058e4:	0852      	lsrs	r2, r2, #1
 80058e6:	3a01      	subs	r2, #1
 80058e8:	0552      	lsls	r2, r2, #21
 80058ea:	4311      	orrs	r1, r2
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6852      	ldr	r2, [r2, #4]
 80058f0:	3a01      	subs	r2, #1
 80058f2:	0112      	lsls	r2, r2, #4
 80058f4:	430a      	orrs	r2, r1
 80058f6:	4921      	ldr	r1, [pc, #132]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	610b      	str	r3, [r1, #16]
 80058fc:	e014      	b.n	8005928 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058fe:	4b1f      	ldr	r3, [pc, #124]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	4b21      	ldr	r3, [pc, #132]	@ (8005988 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005904:	4013      	ands	r3, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6892      	ldr	r2, [r2, #8]
 800590a:	0211      	lsls	r1, r2, #8
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6952      	ldr	r2, [r2, #20]
 8005910:	0852      	lsrs	r2, r2, #1
 8005912:	3a01      	subs	r2, #1
 8005914:	0652      	lsls	r2, r2, #25
 8005916:	4311      	orrs	r1, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6852      	ldr	r2, [r2, #4]
 800591c:	3a01      	subs	r2, #1
 800591e:	0112      	lsls	r2, r2, #4
 8005920:	430a      	orrs	r2, r1
 8005922:	4916      	ldr	r1, [pc, #88]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005924:	4313      	orrs	r3, r2
 8005926:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005928:	4b14      	ldr	r3, [pc, #80]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a13      	ldr	r2, [pc, #76]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 800592e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005932:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005934:	f7fd fa66 	bl	8002e04 <HAL_GetTick>
 8005938:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800593a:	e009      	b.n	8005950 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800593c:	f7fd fa62 	bl	8002e04 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d902      	bls.n	8005950 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	73fb      	strb	r3, [r7, #15]
          break;
 800594e:	e005      	b.n	800595c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005950:	4b0a      	ldr	r3, [pc, #40]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0ef      	beq.n	800593c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005962:	4b06      	ldr	r3, [pc, #24]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	4904      	ldr	r1, [pc, #16]	@ (800597c <RCCEx_PLLSAI1_Config+0x1d8>)
 800596c:	4313      	orrs	r3, r2
 800596e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005970:	7bfb      	ldrb	r3, [r7, #15]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	40021000 	.word	0x40021000
 8005980:	07ff800f 	.word	0x07ff800f
 8005984:	ff9f800f 	.word	0xff9f800f
 8005988:	f9ff800f 	.word	0xf9ff800f

0800598c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800599a:	4b72      	ldr	r3, [pc, #456]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00e      	beq.n	80059c4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80059a6:	4b6f      	ldr	r3, [pc, #444]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f003 0203 	and.w	r2, r3, #3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d103      	bne.n	80059be <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
       ||
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d142      	bne.n	8005a44 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	73fb      	strb	r3, [r7, #15]
 80059c2:	e03f      	b.n	8005a44 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d018      	beq.n	80059fe <RCCEx_PLLSAI2_Config+0x72>
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d825      	bhi.n	8005a1c <RCCEx_PLLSAI2_Config+0x90>
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d002      	beq.n	80059da <RCCEx_PLLSAI2_Config+0x4e>
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d009      	beq.n	80059ec <RCCEx_PLLSAI2_Config+0x60>
 80059d8:	e020      	b.n	8005a1c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059da:	4b62      	ldr	r3, [pc, #392]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d11d      	bne.n	8005a22 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ea:	e01a      	b.n	8005a22 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059ec:	4b5d      	ldr	r3, [pc, #372]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d116      	bne.n	8005a26 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059fc:	e013      	b.n	8005a26 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059fe:	4b59      	ldr	r3, [pc, #356]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10f      	bne.n	8005a2a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a0a:	4b56      	ldr	r3, [pc, #344]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a1a:	e006      	b.n	8005a2a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a20:	e004      	b.n	8005a2c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005a22:	bf00      	nop
 8005a24:	e002      	b.n	8005a2c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005a26:	bf00      	nop
 8005a28:	e000      	b.n	8005a2c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005a2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d108      	bne.n	8005a44 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005a32:	4b4c      	ldr	r3, [pc, #304]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f023 0203 	bic.w	r2, r3, #3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4949      	ldr	r1, [pc, #292]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f040 8086 	bne.w	8005b58 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a4c:	4b45      	ldr	r3, [pc, #276]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a44      	ldr	r2, [pc, #272]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a58:	f7fd f9d4 	bl	8002e04 <HAL_GetTick>
 8005a5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a5e:	e009      	b.n	8005a74 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a60:	f7fd f9d0 	bl	8002e04 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d902      	bls.n	8005a74 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	73fb      	strb	r3, [r7, #15]
        break;
 8005a72:	e005      	b.n	8005a80 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a74:	4b3b      	ldr	r3, [pc, #236]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1ef      	bne.n	8005a60 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d168      	bne.n	8005b58 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d113      	bne.n	8005ab4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a8c:	4b35      	ldr	r3, [pc, #212]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a8e:	695a      	ldr	r2, [r3, #20]
 8005a90:	4b35      	ldr	r3, [pc, #212]	@ (8005b68 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6892      	ldr	r2, [r2, #8]
 8005a98:	0211      	lsls	r1, r2, #8
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	68d2      	ldr	r2, [r2, #12]
 8005a9e:	06d2      	lsls	r2, r2, #27
 8005aa0:	4311      	orrs	r1, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6852      	ldr	r2, [r2, #4]
 8005aa6:	3a01      	subs	r2, #1
 8005aa8:	0112      	lsls	r2, r2, #4
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	492d      	ldr	r1, [pc, #180]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	614b      	str	r3, [r1, #20]
 8005ab2:	e02d      	b.n	8005b10 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d115      	bne.n	8005ae6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005aba:	4b2a      	ldr	r3, [pc, #168]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005abc:	695a      	ldr	r2, [r3, #20]
 8005abe:	4b2b      	ldr	r3, [pc, #172]	@ (8005b6c <RCCEx_PLLSAI2_Config+0x1e0>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6892      	ldr	r2, [r2, #8]
 8005ac6:	0211      	lsls	r1, r2, #8
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6912      	ldr	r2, [r2, #16]
 8005acc:	0852      	lsrs	r2, r2, #1
 8005ace:	3a01      	subs	r2, #1
 8005ad0:	0552      	lsls	r2, r2, #21
 8005ad2:	4311      	orrs	r1, r2
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6852      	ldr	r2, [r2, #4]
 8005ad8:	3a01      	subs	r2, #1
 8005ada:	0112      	lsls	r2, r2, #4
 8005adc:	430a      	orrs	r2, r1
 8005ade:	4921      	ldr	r1, [pc, #132]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	614b      	str	r3, [r1, #20]
 8005ae4:	e014      	b.n	8005b10 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ae8:	695a      	ldr	r2, [r3, #20]
 8005aea:	4b21      	ldr	r3, [pc, #132]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6892      	ldr	r2, [r2, #8]
 8005af2:	0211      	lsls	r1, r2, #8
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6952      	ldr	r2, [r2, #20]
 8005af8:	0852      	lsrs	r2, r2, #1
 8005afa:	3a01      	subs	r2, #1
 8005afc:	0652      	lsls	r2, r2, #25
 8005afe:	4311      	orrs	r1, r2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6852      	ldr	r2, [r2, #4]
 8005b04:	3a01      	subs	r2, #1
 8005b06:	0112      	lsls	r2, r2, #4
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	4916      	ldr	r1, [pc, #88]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b10:	4b14      	ldr	r3, [pc, #80]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a13      	ldr	r2, [pc, #76]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1c:	f7fd f972 	bl	8002e04 <HAL_GetTick>
 8005b20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b22:	e009      	b.n	8005b38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b24:	f7fd f96e 	bl	8002e04 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d902      	bls.n	8005b38 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	73fb      	strb	r3, [r7, #15]
          break;
 8005b36:	e005      	b.n	8005b44 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b38:	4b0a      	ldr	r3, [pc, #40]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0ef      	beq.n	8005b24 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b4a:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b4c:	695a      	ldr	r2, [r3, #20]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	4904      	ldr	r1, [pc, #16]	@ (8005b64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	40021000 	.word	0x40021000
 8005b68:	07ff800f 	.word	0x07ff800f
 8005b6c:	ff9f800f 	.word	0xff9f800f
 8005b70:	f9ff800f 	.word	0xf9ff800f

08005b74 <__cvt>:
 8005b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b78:	ec57 6b10 	vmov	r6, r7, d0
 8005b7c:	2f00      	cmp	r7, #0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	4619      	mov	r1, r3
 8005b82:	463b      	mov	r3, r7
 8005b84:	bfbb      	ittet	lt
 8005b86:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b8a:	461f      	movlt	r7, r3
 8005b8c:	2300      	movge	r3, #0
 8005b8e:	232d      	movlt	r3, #45	@ 0x2d
 8005b90:	700b      	strb	r3, [r1, #0]
 8005b92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b94:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005b98:	4691      	mov	r9, r2
 8005b9a:	f023 0820 	bic.w	r8, r3, #32
 8005b9e:	bfbc      	itt	lt
 8005ba0:	4632      	movlt	r2, r6
 8005ba2:	4616      	movlt	r6, r2
 8005ba4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ba8:	d005      	beq.n	8005bb6 <__cvt+0x42>
 8005baa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005bae:	d100      	bne.n	8005bb2 <__cvt+0x3e>
 8005bb0:	3401      	adds	r4, #1
 8005bb2:	2102      	movs	r1, #2
 8005bb4:	e000      	b.n	8005bb8 <__cvt+0x44>
 8005bb6:	2103      	movs	r1, #3
 8005bb8:	ab03      	add	r3, sp, #12
 8005bba:	9301      	str	r3, [sp, #4]
 8005bbc:	ab02      	add	r3, sp, #8
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	ec47 6b10 	vmov	d0, r6, r7
 8005bc4:	4653      	mov	r3, sl
 8005bc6:	4622      	mov	r2, r4
 8005bc8:	f000 ff4e 	bl	8006a68 <_dtoa_r>
 8005bcc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	d119      	bne.n	8005c08 <__cvt+0x94>
 8005bd4:	f019 0f01 	tst.w	r9, #1
 8005bd8:	d00e      	beq.n	8005bf8 <__cvt+0x84>
 8005bda:	eb00 0904 	add.w	r9, r0, r4
 8005bde:	2200      	movs	r2, #0
 8005be0:	2300      	movs	r3, #0
 8005be2:	4630      	mov	r0, r6
 8005be4:	4639      	mov	r1, r7
 8005be6:	f7fa ff87 	bl	8000af8 <__aeabi_dcmpeq>
 8005bea:	b108      	cbz	r0, 8005bf0 <__cvt+0x7c>
 8005bec:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bf0:	2230      	movs	r2, #48	@ 0x30
 8005bf2:	9b03      	ldr	r3, [sp, #12]
 8005bf4:	454b      	cmp	r3, r9
 8005bf6:	d31e      	bcc.n	8005c36 <__cvt+0xc2>
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bfc:	1b5b      	subs	r3, r3, r5
 8005bfe:	4628      	mov	r0, r5
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	b004      	add	sp, #16
 8005c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c0c:	eb00 0904 	add.w	r9, r0, r4
 8005c10:	d1e5      	bne.n	8005bde <__cvt+0x6a>
 8005c12:	7803      	ldrb	r3, [r0, #0]
 8005c14:	2b30      	cmp	r3, #48	@ 0x30
 8005c16:	d10a      	bne.n	8005c2e <__cvt+0xba>
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	4639      	mov	r1, r7
 8005c20:	f7fa ff6a 	bl	8000af8 <__aeabi_dcmpeq>
 8005c24:	b918      	cbnz	r0, 8005c2e <__cvt+0xba>
 8005c26:	f1c4 0401 	rsb	r4, r4, #1
 8005c2a:	f8ca 4000 	str.w	r4, [sl]
 8005c2e:	f8da 3000 	ldr.w	r3, [sl]
 8005c32:	4499      	add	r9, r3
 8005c34:	e7d3      	b.n	8005bde <__cvt+0x6a>
 8005c36:	1c59      	adds	r1, r3, #1
 8005c38:	9103      	str	r1, [sp, #12]
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	e7d9      	b.n	8005bf2 <__cvt+0x7e>

08005c3e <__exponent>:
 8005c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c40:	2900      	cmp	r1, #0
 8005c42:	bfba      	itte	lt
 8005c44:	4249      	neglt	r1, r1
 8005c46:	232d      	movlt	r3, #45	@ 0x2d
 8005c48:	232b      	movge	r3, #43	@ 0x2b
 8005c4a:	2909      	cmp	r1, #9
 8005c4c:	7002      	strb	r2, [r0, #0]
 8005c4e:	7043      	strb	r3, [r0, #1]
 8005c50:	dd29      	ble.n	8005ca6 <__exponent+0x68>
 8005c52:	f10d 0307 	add.w	r3, sp, #7
 8005c56:	461d      	mov	r5, r3
 8005c58:	270a      	movs	r7, #10
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c60:	fb07 1416 	mls	r4, r7, r6, r1
 8005c64:	3430      	adds	r4, #48	@ 0x30
 8005c66:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	2c63      	cmp	r4, #99	@ 0x63
 8005c6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c72:	4631      	mov	r1, r6
 8005c74:	dcf1      	bgt.n	8005c5a <__exponent+0x1c>
 8005c76:	3130      	adds	r1, #48	@ 0x30
 8005c78:	1e94      	subs	r4, r2, #2
 8005c7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c7e:	1c41      	adds	r1, r0, #1
 8005c80:	4623      	mov	r3, r4
 8005c82:	42ab      	cmp	r3, r5
 8005c84:	d30a      	bcc.n	8005c9c <__exponent+0x5e>
 8005c86:	f10d 0309 	add.w	r3, sp, #9
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	42ac      	cmp	r4, r5
 8005c8e:	bf88      	it	hi
 8005c90:	2300      	movhi	r3, #0
 8005c92:	3302      	adds	r3, #2
 8005c94:	4403      	add	r3, r0
 8005c96:	1a18      	subs	r0, r3, r0
 8005c98:	b003      	add	sp, #12
 8005c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005ca0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005ca4:	e7ed      	b.n	8005c82 <__exponent+0x44>
 8005ca6:	2330      	movs	r3, #48	@ 0x30
 8005ca8:	3130      	adds	r1, #48	@ 0x30
 8005caa:	7083      	strb	r3, [r0, #2]
 8005cac:	70c1      	strb	r1, [r0, #3]
 8005cae:	1d03      	adds	r3, r0, #4
 8005cb0:	e7f1      	b.n	8005c96 <__exponent+0x58>
	...

08005cb4 <_printf_float>:
 8005cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb8:	b08d      	sub	sp, #52	@ 0x34
 8005cba:	460c      	mov	r4, r1
 8005cbc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005cc0:	4616      	mov	r6, r2
 8005cc2:	461f      	mov	r7, r3
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	f000 fdbf 	bl	8006848 <_localeconv_r>
 8005cca:	6803      	ldr	r3, [r0, #0]
 8005ccc:	9304      	str	r3, [sp, #16]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fa fae6 	bl	80002a0 <strlen>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cdc:	9005      	str	r0, [sp, #20]
 8005cde:	3307      	adds	r3, #7
 8005ce0:	f023 0307 	bic.w	r3, r3, #7
 8005ce4:	f103 0208 	add.w	r2, r3, #8
 8005ce8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cec:	f8d4 b000 	ldr.w	fp, [r4]
 8005cf0:	f8c8 2000 	str.w	r2, [r8]
 8005cf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cf8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005cfc:	9307      	str	r3, [sp, #28]
 8005cfe:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d0a:	4b9c      	ldr	r3, [pc, #624]	@ (8005f7c <_printf_float+0x2c8>)
 8005d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d10:	f7fa ff24 	bl	8000b5c <__aeabi_dcmpun>
 8005d14:	bb70      	cbnz	r0, 8005d74 <_printf_float+0xc0>
 8005d16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d1a:	4b98      	ldr	r3, [pc, #608]	@ (8005f7c <_printf_float+0x2c8>)
 8005d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d20:	f7fa fefe 	bl	8000b20 <__aeabi_dcmple>
 8005d24:	bb30      	cbnz	r0, 8005d74 <_printf_float+0xc0>
 8005d26:	2200      	movs	r2, #0
 8005d28:	2300      	movs	r3, #0
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	f7fa feed 	bl	8000b0c <__aeabi_dcmplt>
 8005d32:	b110      	cbz	r0, 8005d3a <_printf_float+0x86>
 8005d34:	232d      	movs	r3, #45	@ 0x2d
 8005d36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d3a:	4a91      	ldr	r2, [pc, #580]	@ (8005f80 <_printf_float+0x2cc>)
 8005d3c:	4b91      	ldr	r3, [pc, #580]	@ (8005f84 <_printf_float+0x2d0>)
 8005d3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d42:	bf94      	ite	ls
 8005d44:	4690      	movls	r8, r2
 8005d46:	4698      	movhi	r8, r3
 8005d48:	2303      	movs	r3, #3
 8005d4a:	6123      	str	r3, [r4, #16]
 8005d4c:	f02b 0304 	bic.w	r3, fp, #4
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	f04f 0900 	mov.w	r9, #0
 8005d56:	9700      	str	r7, [sp, #0]
 8005d58:	4633      	mov	r3, r6
 8005d5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f000 f9d2 	bl	8006108 <_printf_common>
 8005d64:	3001      	adds	r0, #1
 8005d66:	f040 808d 	bne.w	8005e84 <_printf_float+0x1d0>
 8005d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6e:	b00d      	add	sp, #52	@ 0x34
 8005d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d74:	4642      	mov	r2, r8
 8005d76:	464b      	mov	r3, r9
 8005d78:	4640      	mov	r0, r8
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	f7fa feee 	bl	8000b5c <__aeabi_dcmpun>
 8005d80:	b140      	cbz	r0, 8005d94 <_printf_float+0xe0>
 8005d82:	464b      	mov	r3, r9
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bfbc      	itt	lt
 8005d88:	232d      	movlt	r3, #45	@ 0x2d
 8005d8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d8e:	4a7e      	ldr	r2, [pc, #504]	@ (8005f88 <_printf_float+0x2d4>)
 8005d90:	4b7e      	ldr	r3, [pc, #504]	@ (8005f8c <_printf_float+0x2d8>)
 8005d92:	e7d4      	b.n	8005d3e <_printf_float+0x8a>
 8005d94:	6863      	ldr	r3, [r4, #4]
 8005d96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005d9a:	9206      	str	r2, [sp, #24]
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	d13b      	bne.n	8005e18 <_printf_float+0x164>
 8005da0:	2306      	movs	r3, #6
 8005da2:	6063      	str	r3, [r4, #4]
 8005da4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005da8:	2300      	movs	r3, #0
 8005daa:	6022      	str	r2, [r4, #0]
 8005dac:	9303      	str	r3, [sp, #12]
 8005dae:	ab0a      	add	r3, sp, #40	@ 0x28
 8005db0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005db4:	ab09      	add	r3, sp, #36	@ 0x24
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	6861      	ldr	r1, [r4, #4]
 8005dba:	ec49 8b10 	vmov	d0, r8, r9
 8005dbe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f7ff fed6 	bl	8005b74 <__cvt>
 8005dc8:	9b06      	ldr	r3, [sp, #24]
 8005dca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005dcc:	2b47      	cmp	r3, #71	@ 0x47
 8005dce:	4680      	mov	r8, r0
 8005dd0:	d129      	bne.n	8005e26 <_printf_float+0x172>
 8005dd2:	1cc8      	adds	r0, r1, #3
 8005dd4:	db02      	blt.n	8005ddc <_printf_float+0x128>
 8005dd6:	6863      	ldr	r3, [r4, #4]
 8005dd8:	4299      	cmp	r1, r3
 8005dda:	dd41      	ble.n	8005e60 <_printf_float+0x1ac>
 8005ddc:	f1aa 0a02 	sub.w	sl, sl, #2
 8005de0:	fa5f fa8a 	uxtb.w	sl, sl
 8005de4:	3901      	subs	r1, #1
 8005de6:	4652      	mov	r2, sl
 8005de8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005dec:	9109      	str	r1, [sp, #36]	@ 0x24
 8005dee:	f7ff ff26 	bl	8005c3e <__exponent>
 8005df2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005df4:	1813      	adds	r3, r2, r0
 8005df6:	2a01      	cmp	r2, #1
 8005df8:	4681      	mov	r9, r0
 8005dfa:	6123      	str	r3, [r4, #16]
 8005dfc:	dc02      	bgt.n	8005e04 <_printf_float+0x150>
 8005dfe:	6822      	ldr	r2, [r4, #0]
 8005e00:	07d2      	lsls	r2, r2, #31
 8005e02:	d501      	bpl.n	8005e08 <_printf_float+0x154>
 8005e04:	3301      	adds	r3, #1
 8005e06:	6123      	str	r3, [r4, #16]
 8005e08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0a2      	beq.n	8005d56 <_printf_float+0xa2>
 8005e10:	232d      	movs	r3, #45	@ 0x2d
 8005e12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e16:	e79e      	b.n	8005d56 <_printf_float+0xa2>
 8005e18:	9a06      	ldr	r2, [sp, #24]
 8005e1a:	2a47      	cmp	r2, #71	@ 0x47
 8005e1c:	d1c2      	bne.n	8005da4 <_printf_float+0xf0>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1c0      	bne.n	8005da4 <_printf_float+0xf0>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e7bd      	b.n	8005da2 <_printf_float+0xee>
 8005e26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e2a:	d9db      	bls.n	8005de4 <_printf_float+0x130>
 8005e2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e30:	d118      	bne.n	8005e64 <_printf_float+0x1b0>
 8005e32:	2900      	cmp	r1, #0
 8005e34:	6863      	ldr	r3, [r4, #4]
 8005e36:	dd0b      	ble.n	8005e50 <_printf_float+0x19c>
 8005e38:	6121      	str	r1, [r4, #16]
 8005e3a:	b913      	cbnz	r3, 8005e42 <_printf_float+0x18e>
 8005e3c:	6822      	ldr	r2, [r4, #0]
 8005e3e:	07d0      	lsls	r0, r2, #31
 8005e40:	d502      	bpl.n	8005e48 <_printf_float+0x194>
 8005e42:	3301      	adds	r3, #1
 8005e44:	440b      	add	r3, r1
 8005e46:	6123      	str	r3, [r4, #16]
 8005e48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e4a:	f04f 0900 	mov.w	r9, #0
 8005e4e:	e7db      	b.n	8005e08 <_printf_float+0x154>
 8005e50:	b913      	cbnz	r3, 8005e58 <_printf_float+0x1a4>
 8005e52:	6822      	ldr	r2, [r4, #0]
 8005e54:	07d2      	lsls	r2, r2, #31
 8005e56:	d501      	bpl.n	8005e5c <_printf_float+0x1a8>
 8005e58:	3302      	adds	r3, #2
 8005e5a:	e7f4      	b.n	8005e46 <_printf_float+0x192>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e7f2      	b.n	8005e46 <_printf_float+0x192>
 8005e60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e66:	4299      	cmp	r1, r3
 8005e68:	db05      	blt.n	8005e76 <_printf_float+0x1c2>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	6121      	str	r1, [r4, #16]
 8005e6e:	07d8      	lsls	r0, r3, #31
 8005e70:	d5ea      	bpl.n	8005e48 <_printf_float+0x194>
 8005e72:	1c4b      	adds	r3, r1, #1
 8005e74:	e7e7      	b.n	8005e46 <_printf_float+0x192>
 8005e76:	2900      	cmp	r1, #0
 8005e78:	bfd4      	ite	le
 8005e7a:	f1c1 0202 	rsble	r2, r1, #2
 8005e7e:	2201      	movgt	r2, #1
 8005e80:	4413      	add	r3, r2
 8005e82:	e7e0      	b.n	8005e46 <_printf_float+0x192>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	055a      	lsls	r2, r3, #21
 8005e88:	d407      	bmi.n	8005e9a <_printf_float+0x1e6>
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	4642      	mov	r2, r8
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4628      	mov	r0, r5
 8005e92:	47b8      	blx	r7
 8005e94:	3001      	adds	r0, #1
 8005e96:	d12b      	bne.n	8005ef0 <_printf_float+0x23c>
 8005e98:	e767      	b.n	8005d6a <_printf_float+0xb6>
 8005e9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e9e:	f240 80dd 	bls.w	800605c <_printf_float+0x3a8>
 8005ea2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f7fa fe25 	bl	8000af8 <__aeabi_dcmpeq>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d033      	beq.n	8005f1a <_printf_float+0x266>
 8005eb2:	4a37      	ldr	r2, [pc, #220]	@ (8005f90 <_printf_float+0x2dc>)
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	4628      	mov	r0, r5
 8005eba:	47b8      	blx	r7
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	f43f af54 	beq.w	8005d6a <_printf_float+0xb6>
 8005ec2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005ec6:	4543      	cmp	r3, r8
 8005ec8:	db02      	blt.n	8005ed0 <_printf_float+0x21c>
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	07d8      	lsls	r0, r3, #31
 8005ece:	d50f      	bpl.n	8005ef0 <_printf_float+0x23c>
 8005ed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	47b8      	blx	r7
 8005eda:	3001      	adds	r0, #1
 8005edc:	f43f af45 	beq.w	8005d6a <_printf_float+0xb6>
 8005ee0:	f04f 0900 	mov.w	r9, #0
 8005ee4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ee8:	f104 0a1a 	add.w	sl, r4, #26
 8005eec:	45c8      	cmp	r8, r9
 8005eee:	dc09      	bgt.n	8005f04 <_printf_float+0x250>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	079b      	lsls	r3, r3, #30
 8005ef4:	f100 8103 	bmi.w	80060fe <_printf_float+0x44a>
 8005ef8:	68e0      	ldr	r0, [r4, #12]
 8005efa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005efc:	4298      	cmp	r0, r3
 8005efe:	bfb8      	it	lt
 8005f00:	4618      	movlt	r0, r3
 8005f02:	e734      	b.n	8005d6e <_printf_float+0xba>
 8005f04:	2301      	movs	r3, #1
 8005f06:	4652      	mov	r2, sl
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	47b8      	blx	r7
 8005f0e:	3001      	adds	r0, #1
 8005f10:	f43f af2b 	beq.w	8005d6a <_printf_float+0xb6>
 8005f14:	f109 0901 	add.w	r9, r9, #1
 8005f18:	e7e8      	b.n	8005eec <_printf_float+0x238>
 8005f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	dc39      	bgt.n	8005f94 <_printf_float+0x2e0>
 8005f20:	4a1b      	ldr	r2, [pc, #108]	@ (8005f90 <_printf_float+0x2dc>)
 8005f22:	2301      	movs	r3, #1
 8005f24:	4631      	mov	r1, r6
 8005f26:	4628      	mov	r0, r5
 8005f28:	47b8      	blx	r7
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	f43f af1d 	beq.w	8005d6a <_printf_float+0xb6>
 8005f30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005f34:	ea59 0303 	orrs.w	r3, r9, r3
 8005f38:	d102      	bne.n	8005f40 <_printf_float+0x28c>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	07d9      	lsls	r1, r3, #31
 8005f3e:	d5d7      	bpl.n	8005ef0 <_printf_float+0x23c>
 8005f40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f44:	4631      	mov	r1, r6
 8005f46:	4628      	mov	r0, r5
 8005f48:	47b8      	blx	r7
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	f43f af0d 	beq.w	8005d6a <_printf_float+0xb6>
 8005f50:	f04f 0a00 	mov.w	sl, #0
 8005f54:	f104 0b1a 	add.w	fp, r4, #26
 8005f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f5a:	425b      	negs	r3, r3
 8005f5c:	4553      	cmp	r3, sl
 8005f5e:	dc01      	bgt.n	8005f64 <_printf_float+0x2b0>
 8005f60:	464b      	mov	r3, r9
 8005f62:	e793      	b.n	8005e8c <_printf_float+0x1d8>
 8005f64:	2301      	movs	r3, #1
 8005f66:	465a      	mov	r2, fp
 8005f68:	4631      	mov	r1, r6
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	47b8      	blx	r7
 8005f6e:	3001      	adds	r0, #1
 8005f70:	f43f aefb 	beq.w	8005d6a <_printf_float+0xb6>
 8005f74:	f10a 0a01 	add.w	sl, sl, #1
 8005f78:	e7ee      	b.n	8005f58 <_printf_float+0x2a4>
 8005f7a:	bf00      	nop
 8005f7c:	7fefffff 	.word	0x7fefffff
 8005f80:	08008998 	.word	0x08008998
 8005f84:	0800899c 	.word	0x0800899c
 8005f88:	080089a0 	.word	0x080089a0
 8005f8c:	080089a4 	.word	0x080089a4
 8005f90:	080089a8 	.word	0x080089a8
 8005f94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f9a:	4553      	cmp	r3, sl
 8005f9c:	bfa8      	it	ge
 8005f9e:	4653      	movge	r3, sl
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	4699      	mov	r9, r3
 8005fa4:	dc36      	bgt.n	8006014 <_printf_float+0x360>
 8005fa6:	f04f 0b00 	mov.w	fp, #0
 8005faa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fae:	f104 021a 	add.w	r2, r4, #26
 8005fb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fb4:	9306      	str	r3, [sp, #24]
 8005fb6:	eba3 0309 	sub.w	r3, r3, r9
 8005fba:	455b      	cmp	r3, fp
 8005fbc:	dc31      	bgt.n	8006022 <_printf_float+0x36e>
 8005fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fc0:	459a      	cmp	sl, r3
 8005fc2:	dc3a      	bgt.n	800603a <_printf_float+0x386>
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	07da      	lsls	r2, r3, #31
 8005fc8:	d437      	bmi.n	800603a <_printf_float+0x386>
 8005fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fcc:	ebaa 0903 	sub.w	r9, sl, r3
 8005fd0:	9b06      	ldr	r3, [sp, #24]
 8005fd2:	ebaa 0303 	sub.w	r3, sl, r3
 8005fd6:	4599      	cmp	r9, r3
 8005fd8:	bfa8      	it	ge
 8005fda:	4699      	movge	r9, r3
 8005fdc:	f1b9 0f00 	cmp.w	r9, #0
 8005fe0:	dc33      	bgt.n	800604a <_printf_float+0x396>
 8005fe2:	f04f 0800 	mov.w	r8, #0
 8005fe6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fea:	f104 0b1a 	add.w	fp, r4, #26
 8005fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff0:	ebaa 0303 	sub.w	r3, sl, r3
 8005ff4:	eba3 0309 	sub.w	r3, r3, r9
 8005ff8:	4543      	cmp	r3, r8
 8005ffa:	f77f af79 	ble.w	8005ef0 <_printf_float+0x23c>
 8005ffe:	2301      	movs	r3, #1
 8006000:	465a      	mov	r2, fp
 8006002:	4631      	mov	r1, r6
 8006004:	4628      	mov	r0, r5
 8006006:	47b8      	blx	r7
 8006008:	3001      	adds	r0, #1
 800600a:	f43f aeae 	beq.w	8005d6a <_printf_float+0xb6>
 800600e:	f108 0801 	add.w	r8, r8, #1
 8006012:	e7ec      	b.n	8005fee <_printf_float+0x33a>
 8006014:	4642      	mov	r2, r8
 8006016:	4631      	mov	r1, r6
 8006018:	4628      	mov	r0, r5
 800601a:	47b8      	blx	r7
 800601c:	3001      	adds	r0, #1
 800601e:	d1c2      	bne.n	8005fa6 <_printf_float+0x2f2>
 8006020:	e6a3      	b.n	8005d6a <_printf_float+0xb6>
 8006022:	2301      	movs	r3, #1
 8006024:	4631      	mov	r1, r6
 8006026:	4628      	mov	r0, r5
 8006028:	9206      	str	r2, [sp, #24]
 800602a:	47b8      	blx	r7
 800602c:	3001      	adds	r0, #1
 800602e:	f43f ae9c 	beq.w	8005d6a <_printf_float+0xb6>
 8006032:	9a06      	ldr	r2, [sp, #24]
 8006034:	f10b 0b01 	add.w	fp, fp, #1
 8006038:	e7bb      	b.n	8005fb2 <_printf_float+0x2fe>
 800603a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800603e:	4631      	mov	r1, r6
 8006040:	4628      	mov	r0, r5
 8006042:	47b8      	blx	r7
 8006044:	3001      	adds	r0, #1
 8006046:	d1c0      	bne.n	8005fca <_printf_float+0x316>
 8006048:	e68f      	b.n	8005d6a <_printf_float+0xb6>
 800604a:	9a06      	ldr	r2, [sp, #24]
 800604c:	464b      	mov	r3, r9
 800604e:	4442      	add	r2, r8
 8006050:	4631      	mov	r1, r6
 8006052:	4628      	mov	r0, r5
 8006054:	47b8      	blx	r7
 8006056:	3001      	adds	r0, #1
 8006058:	d1c3      	bne.n	8005fe2 <_printf_float+0x32e>
 800605a:	e686      	b.n	8005d6a <_printf_float+0xb6>
 800605c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006060:	f1ba 0f01 	cmp.w	sl, #1
 8006064:	dc01      	bgt.n	800606a <_printf_float+0x3b6>
 8006066:	07db      	lsls	r3, r3, #31
 8006068:	d536      	bpl.n	80060d8 <_printf_float+0x424>
 800606a:	2301      	movs	r3, #1
 800606c:	4642      	mov	r2, r8
 800606e:	4631      	mov	r1, r6
 8006070:	4628      	mov	r0, r5
 8006072:	47b8      	blx	r7
 8006074:	3001      	adds	r0, #1
 8006076:	f43f ae78 	beq.w	8005d6a <_printf_float+0xb6>
 800607a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	47b8      	blx	r7
 8006084:	3001      	adds	r0, #1
 8006086:	f43f ae70 	beq.w	8005d6a <_printf_float+0xb6>
 800608a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800608e:	2200      	movs	r2, #0
 8006090:	2300      	movs	r3, #0
 8006092:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006096:	f7fa fd2f 	bl	8000af8 <__aeabi_dcmpeq>
 800609a:	b9c0      	cbnz	r0, 80060ce <_printf_float+0x41a>
 800609c:	4653      	mov	r3, sl
 800609e:	f108 0201 	add.w	r2, r8, #1
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	d10c      	bne.n	80060c6 <_printf_float+0x412>
 80060ac:	e65d      	b.n	8005d6a <_printf_float+0xb6>
 80060ae:	2301      	movs	r3, #1
 80060b0:	465a      	mov	r2, fp
 80060b2:	4631      	mov	r1, r6
 80060b4:	4628      	mov	r0, r5
 80060b6:	47b8      	blx	r7
 80060b8:	3001      	adds	r0, #1
 80060ba:	f43f ae56 	beq.w	8005d6a <_printf_float+0xb6>
 80060be:	f108 0801 	add.w	r8, r8, #1
 80060c2:	45d0      	cmp	r8, sl
 80060c4:	dbf3      	blt.n	80060ae <_printf_float+0x3fa>
 80060c6:	464b      	mov	r3, r9
 80060c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80060cc:	e6df      	b.n	8005e8e <_printf_float+0x1da>
 80060ce:	f04f 0800 	mov.w	r8, #0
 80060d2:	f104 0b1a 	add.w	fp, r4, #26
 80060d6:	e7f4      	b.n	80060c2 <_printf_float+0x40e>
 80060d8:	2301      	movs	r3, #1
 80060da:	4642      	mov	r2, r8
 80060dc:	e7e1      	b.n	80060a2 <_printf_float+0x3ee>
 80060de:	2301      	movs	r3, #1
 80060e0:	464a      	mov	r2, r9
 80060e2:	4631      	mov	r1, r6
 80060e4:	4628      	mov	r0, r5
 80060e6:	47b8      	blx	r7
 80060e8:	3001      	adds	r0, #1
 80060ea:	f43f ae3e 	beq.w	8005d6a <_printf_float+0xb6>
 80060ee:	f108 0801 	add.w	r8, r8, #1
 80060f2:	68e3      	ldr	r3, [r4, #12]
 80060f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060f6:	1a5b      	subs	r3, r3, r1
 80060f8:	4543      	cmp	r3, r8
 80060fa:	dcf0      	bgt.n	80060de <_printf_float+0x42a>
 80060fc:	e6fc      	b.n	8005ef8 <_printf_float+0x244>
 80060fe:	f04f 0800 	mov.w	r8, #0
 8006102:	f104 0919 	add.w	r9, r4, #25
 8006106:	e7f4      	b.n	80060f2 <_printf_float+0x43e>

08006108 <_printf_common>:
 8006108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	4616      	mov	r6, r2
 800610e:	4698      	mov	r8, r3
 8006110:	688a      	ldr	r2, [r1, #8]
 8006112:	690b      	ldr	r3, [r1, #16]
 8006114:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006118:	4293      	cmp	r3, r2
 800611a:	bfb8      	it	lt
 800611c:	4613      	movlt	r3, r2
 800611e:	6033      	str	r3, [r6, #0]
 8006120:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006124:	4607      	mov	r7, r0
 8006126:	460c      	mov	r4, r1
 8006128:	b10a      	cbz	r2, 800612e <_printf_common+0x26>
 800612a:	3301      	adds	r3, #1
 800612c:	6033      	str	r3, [r6, #0]
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	0699      	lsls	r1, r3, #26
 8006132:	bf42      	ittt	mi
 8006134:	6833      	ldrmi	r3, [r6, #0]
 8006136:	3302      	addmi	r3, #2
 8006138:	6033      	strmi	r3, [r6, #0]
 800613a:	6825      	ldr	r5, [r4, #0]
 800613c:	f015 0506 	ands.w	r5, r5, #6
 8006140:	d106      	bne.n	8006150 <_printf_common+0x48>
 8006142:	f104 0a19 	add.w	sl, r4, #25
 8006146:	68e3      	ldr	r3, [r4, #12]
 8006148:	6832      	ldr	r2, [r6, #0]
 800614a:	1a9b      	subs	r3, r3, r2
 800614c:	42ab      	cmp	r3, r5
 800614e:	dc26      	bgt.n	800619e <_printf_common+0x96>
 8006150:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006154:	6822      	ldr	r2, [r4, #0]
 8006156:	3b00      	subs	r3, #0
 8006158:	bf18      	it	ne
 800615a:	2301      	movne	r3, #1
 800615c:	0692      	lsls	r2, r2, #26
 800615e:	d42b      	bmi.n	80061b8 <_printf_common+0xb0>
 8006160:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006164:	4641      	mov	r1, r8
 8006166:	4638      	mov	r0, r7
 8006168:	47c8      	blx	r9
 800616a:	3001      	adds	r0, #1
 800616c:	d01e      	beq.n	80061ac <_printf_common+0xa4>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	6922      	ldr	r2, [r4, #16]
 8006172:	f003 0306 	and.w	r3, r3, #6
 8006176:	2b04      	cmp	r3, #4
 8006178:	bf02      	ittt	eq
 800617a:	68e5      	ldreq	r5, [r4, #12]
 800617c:	6833      	ldreq	r3, [r6, #0]
 800617e:	1aed      	subeq	r5, r5, r3
 8006180:	68a3      	ldr	r3, [r4, #8]
 8006182:	bf0c      	ite	eq
 8006184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006188:	2500      	movne	r5, #0
 800618a:	4293      	cmp	r3, r2
 800618c:	bfc4      	itt	gt
 800618e:	1a9b      	subgt	r3, r3, r2
 8006190:	18ed      	addgt	r5, r5, r3
 8006192:	2600      	movs	r6, #0
 8006194:	341a      	adds	r4, #26
 8006196:	42b5      	cmp	r5, r6
 8006198:	d11a      	bne.n	80061d0 <_printf_common+0xc8>
 800619a:	2000      	movs	r0, #0
 800619c:	e008      	b.n	80061b0 <_printf_common+0xa8>
 800619e:	2301      	movs	r3, #1
 80061a0:	4652      	mov	r2, sl
 80061a2:	4641      	mov	r1, r8
 80061a4:	4638      	mov	r0, r7
 80061a6:	47c8      	blx	r9
 80061a8:	3001      	adds	r0, #1
 80061aa:	d103      	bne.n	80061b4 <_printf_common+0xac>
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b4:	3501      	adds	r5, #1
 80061b6:	e7c6      	b.n	8006146 <_printf_common+0x3e>
 80061b8:	18e1      	adds	r1, r4, r3
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	2030      	movs	r0, #48	@ 0x30
 80061be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061c2:	4422      	add	r2, r4
 80061c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061cc:	3302      	adds	r3, #2
 80061ce:	e7c7      	b.n	8006160 <_printf_common+0x58>
 80061d0:	2301      	movs	r3, #1
 80061d2:	4622      	mov	r2, r4
 80061d4:	4641      	mov	r1, r8
 80061d6:	4638      	mov	r0, r7
 80061d8:	47c8      	blx	r9
 80061da:	3001      	adds	r0, #1
 80061dc:	d0e6      	beq.n	80061ac <_printf_common+0xa4>
 80061de:	3601      	adds	r6, #1
 80061e0:	e7d9      	b.n	8006196 <_printf_common+0x8e>
	...

080061e4 <_printf_i>:
 80061e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061e8:	7e0f      	ldrb	r7, [r1, #24]
 80061ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061ec:	2f78      	cmp	r7, #120	@ 0x78
 80061ee:	4691      	mov	r9, r2
 80061f0:	4680      	mov	r8, r0
 80061f2:	460c      	mov	r4, r1
 80061f4:	469a      	mov	sl, r3
 80061f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061fa:	d807      	bhi.n	800620c <_printf_i+0x28>
 80061fc:	2f62      	cmp	r7, #98	@ 0x62
 80061fe:	d80a      	bhi.n	8006216 <_printf_i+0x32>
 8006200:	2f00      	cmp	r7, #0
 8006202:	f000 80d2 	beq.w	80063aa <_printf_i+0x1c6>
 8006206:	2f58      	cmp	r7, #88	@ 0x58
 8006208:	f000 80b9 	beq.w	800637e <_printf_i+0x19a>
 800620c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006210:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006214:	e03a      	b.n	800628c <_printf_i+0xa8>
 8006216:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800621a:	2b15      	cmp	r3, #21
 800621c:	d8f6      	bhi.n	800620c <_printf_i+0x28>
 800621e:	a101      	add	r1, pc, #4	@ (adr r1, 8006224 <_printf_i+0x40>)
 8006220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006224:	0800627d 	.word	0x0800627d
 8006228:	08006291 	.word	0x08006291
 800622c:	0800620d 	.word	0x0800620d
 8006230:	0800620d 	.word	0x0800620d
 8006234:	0800620d 	.word	0x0800620d
 8006238:	0800620d 	.word	0x0800620d
 800623c:	08006291 	.word	0x08006291
 8006240:	0800620d 	.word	0x0800620d
 8006244:	0800620d 	.word	0x0800620d
 8006248:	0800620d 	.word	0x0800620d
 800624c:	0800620d 	.word	0x0800620d
 8006250:	08006391 	.word	0x08006391
 8006254:	080062bb 	.word	0x080062bb
 8006258:	0800634b 	.word	0x0800634b
 800625c:	0800620d 	.word	0x0800620d
 8006260:	0800620d 	.word	0x0800620d
 8006264:	080063b3 	.word	0x080063b3
 8006268:	0800620d 	.word	0x0800620d
 800626c:	080062bb 	.word	0x080062bb
 8006270:	0800620d 	.word	0x0800620d
 8006274:	0800620d 	.word	0x0800620d
 8006278:	08006353 	.word	0x08006353
 800627c:	6833      	ldr	r3, [r6, #0]
 800627e:	1d1a      	adds	r2, r3, #4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6032      	str	r2, [r6, #0]
 8006284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006288:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800628c:	2301      	movs	r3, #1
 800628e:	e09d      	b.n	80063cc <_printf_i+0x1e8>
 8006290:	6833      	ldr	r3, [r6, #0]
 8006292:	6820      	ldr	r0, [r4, #0]
 8006294:	1d19      	adds	r1, r3, #4
 8006296:	6031      	str	r1, [r6, #0]
 8006298:	0606      	lsls	r6, r0, #24
 800629a:	d501      	bpl.n	80062a0 <_printf_i+0xbc>
 800629c:	681d      	ldr	r5, [r3, #0]
 800629e:	e003      	b.n	80062a8 <_printf_i+0xc4>
 80062a0:	0645      	lsls	r5, r0, #25
 80062a2:	d5fb      	bpl.n	800629c <_printf_i+0xb8>
 80062a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062a8:	2d00      	cmp	r5, #0
 80062aa:	da03      	bge.n	80062b4 <_printf_i+0xd0>
 80062ac:	232d      	movs	r3, #45	@ 0x2d
 80062ae:	426d      	negs	r5, r5
 80062b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062b4:	4859      	ldr	r0, [pc, #356]	@ (800641c <_printf_i+0x238>)
 80062b6:	230a      	movs	r3, #10
 80062b8:	e011      	b.n	80062de <_printf_i+0xfa>
 80062ba:	6821      	ldr	r1, [r4, #0]
 80062bc:	6833      	ldr	r3, [r6, #0]
 80062be:	0608      	lsls	r0, r1, #24
 80062c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80062c4:	d402      	bmi.n	80062cc <_printf_i+0xe8>
 80062c6:	0649      	lsls	r1, r1, #25
 80062c8:	bf48      	it	mi
 80062ca:	b2ad      	uxthmi	r5, r5
 80062cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80062ce:	4853      	ldr	r0, [pc, #332]	@ (800641c <_printf_i+0x238>)
 80062d0:	6033      	str	r3, [r6, #0]
 80062d2:	bf14      	ite	ne
 80062d4:	230a      	movne	r3, #10
 80062d6:	2308      	moveq	r3, #8
 80062d8:	2100      	movs	r1, #0
 80062da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062de:	6866      	ldr	r6, [r4, #4]
 80062e0:	60a6      	str	r6, [r4, #8]
 80062e2:	2e00      	cmp	r6, #0
 80062e4:	bfa2      	ittt	ge
 80062e6:	6821      	ldrge	r1, [r4, #0]
 80062e8:	f021 0104 	bicge.w	r1, r1, #4
 80062ec:	6021      	strge	r1, [r4, #0]
 80062ee:	b90d      	cbnz	r5, 80062f4 <_printf_i+0x110>
 80062f0:	2e00      	cmp	r6, #0
 80062f2:	d04b      	beq.n	800638c <_printf_i+0x1a8>
 80062f4:	4616      	mov	r6, r2
 80062f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80062fa:	fb03 5711 	mls	r7, r3, r1, r5
 80062fe:	5dc7      	ldrb	r7, [r0, r7]
 8006300:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006304:	462f      	mov	r7, r5
 8006306:	42bb      	cmp	r3, r7
 8006308:	460d      	mov	r5, r1
 800630a:	d9f4      	bls.n	80062f6 <_printf_i+0x112>
 800630c:	2b08      	cmp	r3, #8
 800630e:	d10b      	bne.n	8006328 <_printf_i+0x144>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	07df      	lsls	r7, r3, #31
 8006314:	d508      	bpl.n	8006328 <_printf_i+0x144>
 8006316:	6923      	ldr	r3, [r4, #16]
 8006318:	6861      	ldr	r1, [r4, #4]
 800631a:	4299      	cmp	r1, r3
 800631c:	bfde      	ittt	le
 800631e:	2330      	movle	r3, #48	@ 0x30
 8006320:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006324:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006328:	1b92      	subs	r2, r2, r6
 800632a:	6122      	str	r2, [r4, #16]
 800632c:	f8cd a000 	str.w	sl, [sp]
 8006330:	464b      	mov	r3, r9
 8006332:	aa03      	add	r2, sp, #12
 8006334:	4621      	mov	r1, r4
 8006336:	4640      	mov	r0, r8
 8006338:	f7ff fee6 	bl	8006108 <_printf_common>
 800633c:	3001      	adds	r0, #1
 800633e:	d14a      	bne.n	80063d6 <_printf_i+0x1f2>
 8006340:	f04f 30ff 	mov.w	r0, #4294967295
 8006344:	b004      	add	sp, #16
 8006346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	f043 0320 	orr.w	r3, r3, #32
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	4833      	ldr	r0, [pc, #204]	@ (8006420 <_printf_i+0x23c>)
 8006354:	2778      	movs	r7, #120	@ 0x78
 8006356:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	6831      	ldr	r1, [r6, #0]
 800635e:	061f      	lsls	r7, r3, #24
 8006360:	f851 5b04 	ldr.w	r5, [r1], #4
 8006364:	d402      	bmi.n	800636c <_printf_i+0x188>
 8006366:	065f      	lsls	r7, r3, #25
 8006368:	bf48      	it	mi
 800636a:	b2ad      	uxthmi	r5, r5
 800636c:	6031      	str	r1, [r6, #0]
 800636e:	07d9      	lsls	r1, r3, #31
 8006370:	bf44      	itt	mi
 8006372:	f043 0320 	orrmi.w	r3, r3, #32
 8006376:	6023      	strmi	r3, [r4, #0]
 8006378:	b11d      	cbz	r5, 8006382 <_printf_i+0x19e>
 800637a:	2310      	movs	r3, #16
 800637c:	e7ac      	b.n	80062d8 <_printf_i+0xf4>
 800637e:	4827      	ldr	r0, [pc, #156]	@ (800641c <_printf_i+0x238>)
 8006380:	e7e9      	b.n	8006356 <_printf_i+0x172>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	f023 0320 	bic.w	r3, r3, #32
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	e7f6      	b.n	800637a <_printf_i+0x196>
 800638c:	4616      	mov	r6, r2
 800638e:	e7bd      	b.n	800630c <_printf_i+0x128>
 8006390:	6833      	ldr	r3, [r6, #0]
 8006392:	6825      	ldr	r5, [r4, #0]
 8006394:	6961      	ldr	r1, [r4, #20]
 8006396:	1d18      	adds	r0, r3, #4
 8006398:	6030      	str	r0, [r6, #0]
 800639a:	062e      	lsls	r6, r5, #24
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	d501      	bpl.n	80063a4 <_printf_i+0x1c0>
 80063a0:	6019      	str	r1, [r3, #0]
 80063a2:	e002      	b.n	80063aa <_printf_i+0x1c6>
 80063a4:	0668      	lsls	r0, r5, #25
 80063a6:	d5fb      	bpl.n	80063a0 <_printf_i+0x1bc>
 80063a8:	8019      	strh	r1, [r3, #0]
 80063aa:	2300      	movs	r3, #0
 80063ac:	6123      	str	r3, [r4, #16]
 80063ae:	4616      	mov	r6, r2
 80063b0:	e7bc      	b.n	800632c <_printf_i+0x148>
 80063b2:	6833      	ldr	r3, [r6, #0]
 80063b4:	1d1a      	adds	r2, r3, #4
 80063b6:	6032      	str	r2, [r6, #0]
 80063b8:	681e      	ldr	r6, [r3, #0]
 80063ba:	6862      	ldr	r2, [r4, #4]
 80063bc:	2100      	movs	r1, #0
 80063be:	4630      	mov	r0, r6
 80063c0:	f7f9 ff1e 	bl	8000200 <memchr>
 80063c4:	b108      	cbz	r0, 80063ca <_printf_i+0x1e6>
 80063c6:	1b80      	subs	r0, r0, r6
 80063c8:	6060      	str	r0, [r4, #4]
 80063ca:	6863      	ldr	r3, [r4, #4]
 80063cc:	6123      	str	r3, [r4, #16]
 80063ce:	2300      	movs	r3, #0
 80063d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063d4:	e7aa      	b.n	800632c <_printf_i+0x148>
 80063d6:	6923      	ldr	r3, [r4, #16]
 80063d8:	4632      	mov	r2, r6
 80063da:	4649      	mov	r1, r9
 80063dc:	4640      	mov	r0, r8
 80063de:	47d0      	blx	sl
 80063e0:	3001      	adds	r0, #1
 80063e2:	d0ad      	beq.n	8006340 <_printf_i+0x15c>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	079b      	lsls	r3, r3, #30
 80063e8:	d413      	bmi.n	8006412 <_printf_i+0x22e>
 80063ea:	68e0      	ldr	r0, [r4, #12]
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	4298      	cmp	r0, r3
 80063f0:	bfb8      	it	lt
 80063f2:	4618      	movlt	r0, r3
 80063f4:	e7a6      	b.n	8006344 <_printf_i+0x160>
 80063f6:	2301      	movs	r3, #1
 80063f8:	4632      	mov	r2, r6
 80063fa:	4649      	mov	r1, r9
 80063fc:	4640      	mov	r0, r8
 80063fe:	47d0      	blx	sl
 8006400:	3001      	adds	r0, #1
 8006402:	d09d      	beq.n	8006340 <_printf_i+0x15c>
 8006404:	3501      	adds	r5, #1
 8006406:	68e3      	ldr	r3, [r4, #12]
 8006408:	9903      	ldr	r1, [sp, #12]
 800640a:	1a5b      	subs	r3, r3, r1
 800640c:	42ab      	cmp	r3, r5
 800640e:	dcf2      	bgt.n	80063f6 <_printf_i+0x212>
 8006410:	e7eb      	b.n	80063ea <_printf_i+0x206>
 8006412:	2500      	movs	r5, #0
 8006414:	f104 0619 	add.w	r6, r4, #25
 8006418:	e7f5      	b.n	8006406 <_printf_i+0x222>
 800641a:	bf00      	nop
 800641c:	080089aa 	.word	0x080089aa
 8006420:	080089bb 	.word	0x080089bb

08006424 <std>:
 8006424:	2300      	movs	r3, #0
 8006426:	b510      	push	{r4, lr}
 8006428:	4604      	mov	r4, r0
 800642a:	e9c0 3300 	strd	r3, r3, [r0]
 800642e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006432:	6083      	str	r3, [r0, #8]
 8006434:	8181      	strh	r1, [r0, #12]
 8006436:	6643      	str	r3, [r0, #100]	@ 0x64
 8006438:	81c2      	strh	r2, [r0, #14]
 800643a:	6183      	str	r3, [r0, #24]
 800643c:	4619      	mov	r1, r3
 800643e:	2208      	movs	r2, #8
 8006440:	305c      	adds	r0, #92	@ 0x5c
 8006442:	f000 f9f9 	bl	8006838 <memset>
 8006446:	4b0d      	ldr	r3, [pc, #52]	@ (800647c <std+0x58>)
 8006448:	6263      	str	r3, [r4, #36]	@ 0x24
 800644a:	4b0d      	ldr	r3, [pc, #52]	@ (8006480 <std+0x5c>)
 800644c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800644e:	4b0d      	ldr	r3, [pc, #52]	@ (8006484 <std+0x60>)
 8006450:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006452:	4b0d      	ldr	r3, [pc, #52]	@ (8006488 <std+0x64>)
 8006454:	6323      	str	r3, [r4, #48]	@ 0x30
 8006456:	4b0d      	ldr	r3, [pc, #52]	@ (800648c <std+0x68>)
 8006458:	6224      	str	r4, [r4, #32]
 800645a:	429c      	cmp	r4, r3
 800645c:	d006      	beq.n	800646c <std+0x48>
 800645e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006462:	4294      	cmp	r4, r2
 8006464:	d002      	beq.n	800646c <std+0x48>
 8006466:	33d0      	adds	r3, #208	@ 0xd0
 8006468:	429c      	cmp	r4, r3
 800646a:	d105      	bne.n	8006478 <std+0x54>
 800646c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006474:	f000 ba5c 	b.w	8006930 <__retarget_lock_init_recursive>
 8006478:	bd10      	pop	{r4, pc}
 800647a:	bf00      	nop
 800647c:	08006689 	.word	0x08006689
 8006480:	080066ab 	.word	0x080066ab
 8006484:	080066e3 	.word	0x080066e3
 8006488:	08006707 	.word	0x08006707
 800648c:	2000032c 	.word	0x2000032c

08006490 <stdio_exit_handler>:
 8006490:	4a02      	ldr	r2, [pc, #8]	@ (800649c <stdio_exit_handler+0xc>)
 8006492:	4903      	ldr	r1, [pc, #12]	@ (80064a0 <stdio_exit_handler+0x10>)
 8006494:	4803      	ldr	r0, [pc, #12]	@ (80064a4 <stdio_exit_handler+0x14>)
 8006496:	f000 b869 	b.w	800656c <_fwalk_sglue>
 800649a:	bf00      	nop
 800649c:	2000000c 	.word	0x2000000c
 80064a0:	08008281 	.word	0x08008281
 80064a4:	2000001c 	.word	0x2000001c

080064a8 <cleanup_stdio>:
 80064a8:	6841      	ldr	r1, [r0, #4]
 80064aa:	4b0c      	ldr	r3, [pc, #48]	@ (80064dc <cleanup_stdio+0x34>)
 80064ac:	4299      	cmp	r1, r3
 80064ae:	b510      	push	{r4, lr}
 80064b0:	4604      	mov	r4, r0
 80064b2:	d001      	beq.n	80064b8 <cleanup_stdio+0x10>
 80064b4:	f001 fee4 	bl	8008280 <_fflush_r>
 80064b8:	68a1      	ldr	r1, [r4, #8]
 80064ba:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <cleanup_stdio+0x38>)
 80064bc:	4299      	cmp	r1, r3
 80064be:	d002      	beq.n	80064c6 <cleanup_stdio+0x1e>
 80064c0:	4620      	mov	r0, r4
 80064c2:	f001 fedd 	bl	8008280 <_fflush_r>
 80064c6:	68e1      	ldr	r1, [r4, #12]
 80064c8:	4b06      	ldr	r3, [pc, #24]	@ (80064e4 <cleanup_stdio+0x3c>)
 80064ca:	4299      	cmp	r1, r3
 80064cc:	d004      	beq.n	80064d8 <cleanup_stdio+0x30>
 80064ce:	4620      	mov	r0, r4
 80064d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064d4:	f001 bed4 	b.w	8008280 <_fflush_r>
 80064d8:	bd10      	pop	{r4, pc}
 80064da:	bf00      	nop
 80064dc:	2000032c 	.word	0x2000032c
 80064e0:	20000394 	.word	0x20000394
 80064e4:	200003fc 	.word	0x200003fc

080064e8 <global_stdio_init.part.0>:
 80064e8:	b510      	push	{r4, lr}
 80064ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006518 <global_stdio_init.part.0+0x30>)
 80064ec:	4c0b      	ldr	r4, [pc, #44]	@ (800651c <global_stdio_init.part.0+0x34>)
 80064ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006520 <global_stdio_init.part.0+0x38>)
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	4620      	mov	r0, r4
 80064f4:	2200      	movs	r2, #0
 80064f6:	2104      	movs	r1, #4
 80064f8:	f7ff ff94 	bl	8006424 <std>
 80064fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006500:	2201      	movs	r2, #1
 8006502:	2109      	movs	r1, #9
 8006504:	f7ff ff8e 	bl	8006424 <std>
 8006508:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800650c:	2202      	movs	r2, #2
 800650e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006512:	2112      	movs	r1, #18
 8006514:	f7ff bf86 	b.w	8006424 <std>
 8006518:	20000464 	.word	0x20000464
 800651c:	2000032c 	.word	0x2000032c
 8006520:	08006491 	.word	0x08006491

08006524 <__sfp_lock_acquire>:
 8006524:	4801      	ldr	r0, [pc, #4]	@ (800652c <__sfp_lock_acquire+0x8>)
 8006526:	f000 ba04 	b.w	8006932 <__retarget_lock_acquire_recursive>
 800652a:	bf00      	nop
 800652c:	2000046d 	.word	0x2000046d

08006530 <__sfp_lock_release>:
 8006530:	4801      	ldr	r0, [pc, #4]	@ (8006538 <__sfp_lock_release+0x8>)
 8006532:	f000 b9ff 	b.w	8006934 <__retarget_lock_release_recursive>
 8006536:	bf00      	nop
 8006538:	2000046d 	.word	0x2000046d

0800653c <__sinit>:
 800653c:	b510      	push	{r4, lr}
 800653e:	4604      	mov	r4, r0
 8006540:	f7ff fff0 	bl	8006524 <__sfp_lock_acquire>
 8006544:	6a23      	ldr	r3, [r4, #32]
 8006546:	b11b      	cbz	r3, 8006550 <__sinit+0x14>
 8006548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800654c:	f7ff bff0 	b.w	8006530 <__sfp_lock_release>
 8006550:	4b04      	ldr	r3, [pc, #16]	@ (8006564 <__sinit+0x28>)
 8006552:	6223      	str	r3, [r4, #32]
 8006554:	4b04      	ldr	r3, [pc, #16]	@ (8006568 <__sinit+0x2c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f5      	bne.n	8006548 <__sinit+0xc>
 800655c:	f7ff ffc4 	bl	80064e8 <global_stdio_init.part.0>
 8006560:	e7f2      	b.n	8006548 <__sinit+0xc>
 8006562:	bf00      	nop
 8006564:	080064a9 	.word	0x080064a9
 8006568:	20000464 	.word	0x20000464

0800656c <_fwalk_sglue>:
 800656c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006570:	4607      	mov	r7, r0
 8006572:	4688      	mov	r8, r1
 8006574:	4614      	mov	r4, r2
 8006576:	2600      	movs	r6, #0
 8006578:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800657c:	f1b9 0901 	subs.w	r9, r9, #1
 8006580:	d505      	bpl.n	800658e <_fwalk_sglue+0x22>
 8006582:	6824      	ldr	r4, [r4, #0]
 8006584:	2c00      	cmp	r4, #0
 8006586:	d1f7      	bne.n	8006578 <_fwalk_sglue+0xc>
 8006588:	4630      	mov	r0, r6
 800658a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800658e:	89ab      	ldrh	r3, [r5, #12]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d907      	bls.n	80065a4 <_fwalk_sglue+0x38>
 8006594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006598:	3301      	adds	r3, #1
 800659a:	d003      	beq.n	80065a4 <_fwalk_sglue+0x38>
 800659c:	4629      	mov	r1, r5
 800659e:	4638      	mov	r0, r7
 80065a0:	47c0      	blx	r8
 80065a2:	4306      	orrs	r6, r0
 80065a4:	3568      	adds	r5, #104	@ 0x68
 80065a6:	e7e9      	b.n	800657c <_fwalk_sglue+0x10>

080065a8 <iprintf>:
 80065a8:	b40f      	push	{r0, r1, r2, r3}
 80065aa:	b507      	push	{r0, r1, r2, lr}
 80065ac:	4906      	ldr	r1, [pc, #24]	@ (80065c8 <iprintf+0x20>)
 80065ae:	ab04      	add	r3, sp, #16
 80065b0:	6808      	ldr	r0, [r1, #0]
 80065b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80065b6:	6881      	ldr	r1, [r0, #8]
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	f001 fcc5 	bl	8007f48 <_vfiprintf_r>
 80065be:	b003      	add	sp, #12
 80065c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80065c4:	b004      	add	sp, #16
 80065c6:	4770      	bx	lr
 80065c8:	20000018 	.word	0x20000018

080065cc <_puts_r>:
 80065cc:	6a03      	ldr	r3, [r0, #32]
 80065ce:	b570      	push	{r4, r5, r6, lr}
 80065d0:	6884      	ldr	r4, [r0, #8]
 80065d2:	4605      	mov	r5, r0
 80065d4:	460e      	mov	r6, r1
 80065d6:	b90b      	cbnz	r3, 80065dc <_puts_r+0x10>
 80065d8:	f7ff ffb0 	bl	800653c <__sinit>
 80065dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065de:	07db      	lsls	r3, r3, #31
 80065e0:	d405      	bmi.n	80065ee <_puts_r+0x22>
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	0598      	lsls	r0, r3, #22
 80065e6:	d402      	bmi.n	80065ee <_puts_r+0x22>
 80065e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ea:	f000 f9a2 	bl	8006932 <__retarget_lock_acquire_recursive>
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	0719      	lsls	r1, r3, #28
 80065f2:	d502      	bpl.n	80065fa <_puts_r+0x2e>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d135      	bne.n	8006666 <_puts_r+0x9a>
 80065fa:	4621      	mov	r1, r4
 80065fc:	4628      	mov	r0, r5
 80065fe:	f000 f8c5 	bl	800678c <__swsetup_r>
 8006602:	b380      	cbz	r0, 8006666 <_puts_r+0x9a>
 8006604:	f04f 35ff 	mov.w	r5, #4294967295
 8006608:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800660a:	07da      	lsls	r2, r3, #31
 800660c:	d405      	bmi.n	800661a <_puts_r+0x4e>
 800660e:	89a3      	ldrh	r3, [r4, #12]
 8006610:	059b      	lsls	r3, r3, #22
 8006612:	d402      	bmi.n	800661a <_puts_r+0x4e>
 8006614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006616:	f000 f98d 	bl	8006934 <__retarget_lock_release_recursive>
 800661a:	4628      	mov	r0, r5
 800661c:	bd70      	pop	{r4, r5, r6, pc}
 800661e:	2b00      	cmp	r3, #0
 8006620:	da04      	bge.n	800662c <_puts_r+0x60>
 8006622:	69a2      	ldr	r2, [r4, #24]
 8006624:	429a      	cmp	r2, r3
 8006626:	dc17      	bgt.n	8006658 <_puts_r+0x8c>
 8006628:	290a      	cmp	r1, #10
 800662a:	d015      	beq.n	8006658 <_puts_r+0x8c>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	6022      	str	r2, [r4, #0]
 8006632:	7019      	strb	r1, [r3, #0]
 8006634:	68a3      	ldr	r3, [r4, #8]
 8006636:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800663a:	3b01      	subs	r3, #1
 800663c:	60a3      	str	r3, [r4, #8]
 800663e:	2900      	cmp	r1, #0
 8006640:	d1ed      	bne.n	800661e <_puts_r+0x52>
 8006642:	2b00      	cmp	r3, #0
 8006644:	da11      	bge.n	800666a <_puts_r+0x9e>
 8006646:	4622      	mov	r2, r4
 8006648:	210a      	movs	r1, #10
 800664a:	4628      	mov	r0, r5
 800664c:	f000 f85f 	bl	800670e <__swbuf_r>
 8006650:	3001      	adds	r0, #1
 8006652:	d0d7      	beq.n	8006604 <_puts_r+0x38>
 8006654:	250a      	movs	r5, #10
 8006656:	e7d7      	b.n	8006608 <_puts_r+0x3c>
 8006658:	4622      	mov	r2, r4
 800665a:	4628      	mov	r0, r5
 800665c:	f000 f857 	bl	800670e <__swbuf_r>
 8006660:	3001      	adds	r0, #1
 8006662:	d1e7      	bne.n	8006634 <_puts_r+0x68>
 8006664:	e7ce      	b.n	8006604 <_puts_r+0x38>
 8006666:	3e01      	subs	r6, #1
 8006668:	e7e4      	b.n	8006634 <_puts_r+0x68>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	6022      	str	r2, [r4, #0]
 8006670:	220a      	movs	r2, #10
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	e7ee      	b.n	8006654 <_puts_r+0x88>
	...

08006678 <puts>:
 8006678:	4b02      	ldr	r3, [pc, #8]	@ (8006684 <puts+0xc>)
 800667a:	4601      	mov	r1, r0
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	f7ff bfa5 	b.w	80065cc <_puts_r>
 8006682:	bf00      	nop
 8006684:	20000018 	.word	0x20000018

08006688 <__sread>:
 8006688:	b510      	push	{r4, lr}
 800668a:	460c      	mov	r4, r1
 800668c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006690:	f000 f900 	bl	8006894 <_read_r>
 8006694:	2800      	cmp	r0, #0
 8006696:	bfab      	itete	ge
 8006698:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800669a:	89a3      	ldrhlt	r3, [r4, #12]
 800669c:	181b      	addge	r3, r3, r0
 800669e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066a2:	bfac      	ite	ge
 80066a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066a6:	81a3      	strhlt	r3, [r4, #12]
 80066a8:	bd10      	pop	{r4, pc}

080066aa <__swrite>:
 80066aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ae:	461f      	mov	r7, r3
 80066b0:	898b      	ldrh	r3, [r1, #12]
 80066b2:	05db      	lsls	r3, r3, #23
 80066b4:	4605      	mov	r5, r0
 80066b6:	460c      	mov	r4, r1
 80066b8:	4616      	mov	r6, r2
 80066ba:	d505      	bpl.n	80066c8 <__swrite+0x1e>
 80066bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c0:	2302      	movs	r3, #2
 80066c2:	2200      	movs	r2, #0
 80066c4:	f000 f8d4 	bl	8006870 <_lseek_r>
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066d2:	81a3      	strh	r3, [r4, #12]
 80066d4:	4632      	mov	r2, r6
 80066d6:	463b      	mov	r3, r7
 80066d8:	4628      	mov	r0, r5
 80066da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066de:	f000 b8eb 	b.w	80068b8 <_write_r>

080066e2 <__sseek>:
 80066e2:	b510      	push	{r4, lr}
 80066e4:	460c      	mov	r4, r1
 80066e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ea:	f000 f8c1 	bl	8006870 <_lseek_r>
 80066ee:	1c43      	adds	r3, r0, #1
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	bf15      	itete	ne
 80066f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066fe:	81a3      	strheq	r3, [r4, #12]
 8006700:	bf18      	it	ne
 8006702:	81a3      	strhne	r3, [r4, #12]
 8006704:	bd10      	pop	{r4, pc}

08006706 <__sclose>:
 8006706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800670a:	f000 b8a1 	b.w	8006850 <_close_r>

0800670e <__swbuf_r>:
 800670e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006710:	460e      	mov	r6, r1
 8006712:	4614      	mov	r4, r2
 8006714:	4605      	mov	r5, r0
 8006716:	b118      	cbz	r0, 8006720 <__swbuf_r+0x12>
 8006718:	6a03      	ldr	r3, [r0, #32]
 800671a:	b90b      	cbnz	r3, 8006720 <__swbuf_r+0x12>
 800671c:	f7ff ff0e 	bl	800653c <__sinit>
 8006720:	69a3      	ldr	r3, [r4, #24]
 8006722:	60a3      	str	r3, [r4, #8]
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	071a      	lsls	r2, r3, #28
 8006728:	d501      	bpl.n	800672e <__swbuf_r+0x20>
 800672a:	6923      	ldr	r3, [r4, #16]
 800672c:	b943      	cbnz	r3, 8006740 <__swbuf_r+0x32>
 800672e:	4621      	mov	r1, r4
 8006730:	4628      	mov	r0, r5
 8006732:	f000 f82b 	bl	800678c <__swsetup_r>
 8006736:	b118      	cbz	r0, 8006740 <__swbuf_r+0x32>
 8006738:	f04f 37ff 	mov.w	r7, #4294967295
 800673c:	4638      	mov	r0, r7
 800673e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	6922      	ldr	r2, [r4, #16]
 8006744:	1a98      	subs	r0, r3, r2
 8006746:	6963      	ldr	r3, [r4, #20]
 8006748:	b2f6      	uxtb	r6, r6
 800674a:	4283      	cmp	r3, r0
 800674c:	4637      	mov	r7, r6
 800674e:	dc05      	bgt.n	800675c <__swbuf_r+0x4e>
 8006750:	4621      	mov	r1, r4
 8006752:	4628      	mov	r0, r5
 8006754:	f001 fd94 	bl	8008280 <_fflush_r>
 8006758:	2800      	cmp	r0, #0
 800675a:	d1ed      	bne.n	8006738 <__swbuf_r+0x2a>
 800675c:	68a3      	ldr	r3, [r4, #8]
 800675e:	3b01      	subs	r3, #1
 8006760:	60a3      	str	r3, [r4, #8]
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	6022      	str	r2, [r4, #0]
 8006768:	701e      	strb	r6, [r3, #0]
 800676a:	6962      	ldr	r2, [r4, #20]
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	429a      	cmp	r2, r3
 8006770:	d004      	beq.n	800677c <__swbuf_r+0x6e>
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	07db      	lsls	r3, r3, #31
 8006776:	d5e1      	bpl.n	800673c <__swbuf_r+0x2e>
 8006778:	2e0a      	cmp	r6, #10
 800677a:	d1df      	bne.n	800673c <__swbuf_r+0x2e>
 800677c:	4621      	mov	r1, r4
 800677e:	4628      	mov	r0, r5
 8006780:	f001 fd7e 	bl	8008280 <_fflush_r>
 8006784:	2800      	cmp	r0, #0
 8006786:	d0d9      	beq.n	800673c <__swbuf_r+0x2e>
 8006788:	e7d6      	b.n	8006738 <__swbuf_r+0x2a>
	...

0800678c <__swsetup_r>:
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	4b29      	ldr	r3, [pc, #164]	@ (8006834 <__swsetup_r+0xa8>)
 8006790:	4605      	mov	r5, r0
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	460c      	mov	r4, r1
 8006796:	b118      	cbz	r0, 80067a0 <__swsetup_r+0x14>
 8006798:	6a03      	ldr	r3, [r0, #32]
 800679a:	b90b      	cbnz	r3, 80067a0 <__swsetup_r+0x14>
 800679c:	f7ff fece 	bl	800653c <__sinit>
 80067a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a4:	0719      	lsls	r1, r3, #28
 80067a6:	d422      	bmi.n	80067ee <__swsetup_r+0x62>
 80067a8:	06da      	lsls	r2, r3, #27
 80067aa:	d407      	bmi.n	80067bc <__swsetup_r+0x30>
 80067ac:	2209      	movs	r2, #9
 80067ae:	602a      	str	r2, [r5, #0]
 80067b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ba:	e033      	b.n	8006824 <__swsetup_r+0x98>
 80067bc:	0758      	lsls	r0, r3, #29
 80067be:	d512      	bpl.n	80067e6 <__swsetup_r+0x5a>
 80067c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067c2:	b141      	cbz	r1, 80067d6 <__swsetup_r+0x4a>
 80067c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067c8:	4299      	cmp	r1, r3
 80067ca:	d002      	beq.n	80067d2 <__swsetup_r+0x46>
 80067cc:	4628      	mov	r0, r5
 80067ce:	f000 ff0f 	bl	80075f0 <_free_r>
 80067d2:	2300      	movs	r3, #0
 80067d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067dc:	81a3      	strh	r3, [r4, #12]
 80067de:	2300      	movs	r3, #0
 80067e0:	6063      	str	r3, [r4, #4]
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	f043 0308 	orr.w	r3, r3, #8
 80067ec:	81a3      	strh	r3, [r4, #12]
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	b94b      	cbnz	r3, 8006806 <__swsetup_r+0x7a>
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067fc:	d003      	beq.n	8006806 <__swsetup_r+0x7a>
 80067fe:	4621      	mov	r1, r4
 8006800:	4628      	mov	r0, r5
 8006802:	f001 fd8b 	bl	800831c <__smakebuf_r>
 8006806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800680a:	f013 0201 	ands.w	r2, r3, #1
 800680e:	d00a      	beq.n	8006826 <__swsetup_r+0x9a>
 8006810:	2200      	movs	r2, #0
 8006812:	60a2      	str	r2, [r4, #8]
 8006814:	6962      	ldr	r2, [r4, #20]
 8006816:	4252      	negs	r2, r2
 8006818:	61a2      	str	r2, [r4, #24]
 800681a:	6922      	ldr	r2, [r4, #16]
 800681c:	b942      	cbnz	r2, 8006830 <__swsetup_r+0xa4>
 800681e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006822:	d1c5      	bne.n	80067b0 <__swsetup_r+0x24>
 8006824:	bd38      	pop	{r3, r4, r5, pc}
 8006826:	0799      	lsls	r1, r3, #30
 8006828:	bf58      	it	pl
 800682a:	6962      	ldrpl	r2, [r4, #20]
 800682c:	60a2      	str	r2, [r4, #8]
 800682e:	e7f4      	b.n	800681a <__swsetup_r+0x8e>
 8006830:	2000      	movs	r0, #0
 8006832:	e7f7      	b.n	8006824 <__swsetup_r+0x98>
 8006834:	20000018 	.word	0x20000018

08006838 <memset>:
 8006838:	4402      	add	r2, r0
 800683a:	4603      	mov	r3, r0
 800683c:	4293      	cmp	r3, r2
 800683e:	d100      	bne.n	8006842 <memset+0xa>
 8006840:	4770      	bx	lr
 8006842:	f803 1b01 	strb.w	r1, [r3], #1
 8006846:	e7f9      	b.n	800683c <memset+0x4>

08006848 <_localeconv_r>:
 8006848:	4800      	ldr	r0, [pc, #0]	@ (800684c <_localeconv_r+0x4>)
 800684a:	4770      	bx	lr
 800684c:	20000158 	.word	0x20000158

08006850 <_close_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4d06      	ldr	r5, [pc, #24]	@ (800686c <_close_r+0x1c>)
 8006854:	2300      	movs	r3, #0
 8006856:	4604      	mov	r4, r0
 8006858:	4608      	mov	r0, r1
 800685a:	602b      	str	r3, [r5, #0]
 800685c:	f7fc f9c3 	bl	8002be6 <_close>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d102      	bne.n	800686a <_close_r+0x1a>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	b103      	cbz	r3, 800686a <_close_r+0x1a>
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	20000468 	.word	0x20000468

08006870 <_lseek_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	4d07      	ldr	r5, [pc, #28]	@ (8006890 <_lseek_r+0x20>)
 8006874:	4604      	mov	r4, r0
 8006876:	4608      	mov	r0, r1
 8006878:	4611      	mov	r1, r2
 800687a:	2200      	movs	r2, #0
 800687c:	602a      	str	r2, [r5, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	f7fc f9d8 	bl	8002c34 <_lseek>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	d102      	bne.n	800688e <_lseek_r+0x1e>
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	b103      	cbz	r3, 800688e <_lseek_r+0x1e>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	20000468 	.word	0x20000468

08006894 <_read_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	4d07      	ldr	r5, [pc, #28]	@ (80068b4 <_read_r+0x20>)
 8006898:	4604      	mov	r4, r0
 800689a:	4608      	mov	r0, r1
 800689c:	4611      	mov	r1, r2
 800689e:	2200      	movs	r2, #0
 80068a0:	602a      	str	r2, [r5, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	f7fc f982 	bl	8002bac <_read>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d102      	bne.n	80068b2 <_read_r+0x1e>
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	b103      	cbz	r3, 80068b2 <_read_r+0x1e>
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	20000468 	.word	0x20000468

080068b8 <_write_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	4d07      	ldr	r5, [pc, #28]	@ (80068d8 <_write_r+0x20>)
 80068bc:	4604      	mov	r4, r0
 80068be:	4608      	mov	r0, r1
 80068c0:	4611      	mov	r1, r2
 80068c2:	2200      	movs	r2, #0
 80068c4:	602a      	str	r2, [r5, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	f7fc f872 	bl	80029b0 <_write>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_write_r+0x1e>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_write_r+0x1e>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	20000468 	.word	0x20000468

080068dc <__errno>:
 80068dc:	4b01      	ldr	r3, [pc, #4]	@ (80068e4 <__errno+0x8>)
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	20000018 	.word	0x20000018

080068e8 <__libc_init_array>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006920 <__libc_init_array+0x38>)
 80068ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006924 <__libc_init_array+0x3c>)
 80068ee:	1b64      	subs	r4, r4, r5
 80068f0:	10a4      	asrs	r4, r4, #2
 80068f2:	2600      	movs	r6, #0
 80068f4:	42a6      	cmp	r6, r4
 80068f6:	d109      	bne.n	800690c <__libc_init_array+0x24>
 80068f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006928 <__libc_init_array+0x40>)
 80068fa:	4c0c      	ldr	r4, [pc, #48]	@ (800692c <__libc_init_array+0x44>)
 80068fc:	f001 fe2c 	bl	8008558 <_init>
 8006900:	1b64      	subs	r4, r4, r5
 8006902:	10a4      	asrs	r4, r4, #2
 8006904:	2600      	movs	r6, #0
 8006906:	42a6      	cmp	r6, r4
 8006908:	d105      	bne.n	8006916 <__libc_init_array+0x2e>
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006910:	4798      	blx	r3
 8006912:	3601      	adds	r6, #1
 8006914:	e7ee      	b.n	80068f4 <__libc_init_array+0xc>
 8006916:	f855 3b04 	ldr.w	r3, [r5], #4
 800691a:	4798      	blx	r3
 800691c:	3601      	adds	r6, #1
 800691e:	e7f2      	b.n	8006906 <__libc_init_array+0x1e>
 8006920:	08008d10 	.word	0x08008d10
 8006924:	08008d10 	.word	0x08008d10
 8006928:	08008d10 	.word	0x08008d10
 800692c:	08008d14 	.word	0x08008d14

08006930 <__retarget_lock_init_recursive>:
 8006930:	4770      	bx	lr

08006932 <__retarget_lock_acquire_recursive>:
 8006932:	4770      	bx	lr

08006934 <__retarget_lock_release_recursive>:
 8006934:	4770      	bx	lr

08006936 <memcpy>:
 8006936:	440a      	add	r2, r1
 8006938:	4291      	cmp	r1, r2
 800693a:	f100 33ff 	add.w	r3, r0, #4294967295
 800693e:	d100      	bne.n	8006942 <memcpy+0xc>
 8006940:	4770      	bx	lr
 8006942:	b510      	push	{r4, lr}
 8006944:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006948:	f803 4f01 	strb.w	r4, [r3, #1]!
 800694c:	4291      	cmp	r1, r2
 800694e:	d1f9      	bne.n	8006944 <memcpy+0xe>
 8006950:	bd10      	pop	{r4, pc}

08006952 <quorem>:
 8006952:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006956:	6903      	ldr	r3, [r0, #16]
 8006958:	690c      	ldr	r4, [r1, #16]
 800695a:	42a3      	cmp	r3, r4
 800695c:	4607      	mov	r7, r0
 800695e:	db7e      	blt.n	8006a5e <quorem+0x10c>
 8006960:	3c01      	subs	r4, #1
 8006962:	f101 0814 	add.w	r8, r1, #20
 8006966:	00a3      	lsls	r3, r4, #2
 8006968:	f100 0514 	add.w	r5, r0, #20
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006972:	9301      	str	r3, [sp, #4]
 8006974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800697c:	3301      	adds	r3, #1
 800697e:	429a      	cmp	r2, r3
 8006980:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006984:	fbb2 f6f3 	udiv	r6, r2, r3
 8006988:	d32e      	bcc.n	80069e8 <quorem+0x96>
 800698a:	f04f 0a00 	mov.w	sl, #0
 800698e:	46c4      	mov	ip, r8
 8006990:	46ae      	mov	lr, r5
 8006992:	46d3      	mov	fp, sl
 8006994:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006998:	b298      	uxth	r0, r3
 800699a:	fb06 a000 	mla	r0, r6, r0, sl
 800699e:	0c02      	lsrs	r2, r0, #16
 80069a0:	0c1b      	lsrs	r3, r3, #16
 80069a2:	fb06 2303 	mla	r3, r6, r3, r2
 80069a6:	f8de 2000 	ldr.w	r2, [lr]
 80069aa:	b280      	uxth	r0, r0
 80069ac:	b292      	uxth	r2, r2
 80069ae:	1a12      	subs	r2, r2, r0
 80069b0:	445a      	add	r2, fp
 80069b2:	f8de 0000 	ldr.w	r0, [lr]
 80069b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80069c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80069c4:	b292      	uxth	r2, r2
 80069c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80069ca:	45e1      	cmp	r9, ip
 80069cc:	f84e 2b04 	str.w	r2, [lr], #4
 80069d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80069d4:	d2de      	bcs.n	8006994 <quorem+0x42>
 80069d6:	9b00      	ldr	r3, [sp, #0]
 80069d8:	58eb      	ldr	r3, [r5, r3]
 80069da:	b92b      	cbnz	r3, 80069e8 <quorem+0x96>
 80069dc:	9b01      	ldr	r3, [sp, #4]
 80069de:	3b04      	subs	r3, #4
 80069e0:	429d      	cmp	r5, r3
 80069e2:	461a      	mov	r2, r3
 80069e4:	d32f      	bcc.n	8006a46 <quorem+0xf4>
 80069e6:	613c      	str	r4, [r7, #16]
 80069e8:	4638      	mov	r0, r7
 80069ea:	f001 f97b 	bl	8007ce4 <__mcmp>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	db25      	blt.n	8006a3e <quorem+0xec>
 80069f2:	4629      	mov	r1, r5
 80069f4:	2000      	movs	r0, #0
 80069f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80069fa:	f8d1 c000 	ldr.w	ip, [r1]
 80069fe:	fa1f fe82 	uxth.w	lr, r2
 8006a02:	fa1f f38c 	uxth.w	r3, ip
 8006a06:	eba3 030e 	sub.w	r3, r3, lr
 8006a0a:	4403      	add	r3, r0
 8006a0c:	0c12      	lsrs	r2, r2, #16
 8006a0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a1c:	45c1      	cmp	r9, r8
 8006a1e:	f841 3b04 	str.w	r3, [r1], #4
 8006a22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a26:	d2e6      	bcs.n	80069f6 <quorem+0xa4>
 8006a28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a30:	b922      	cbnz	r2, 8006a3c <quorem+0xea>
 8006a32:	3b04      	subs	r3, #4
 8006a34:	429d      	cmp	r5, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	d30b      	bcc.n	8006a52 <quorem+0x100>
 8006a3a:	613c      	str	r4, [r7, #16]
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	4630      	mov	r0, r6
 8006a40:	b003      	add	sp, #12
 8006a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a46:	6812      	ldr	r2, [r2, #0]
 8006a48:	3b04      	subs	r3, #4
 8006a4a:	2a00      	cmp	r2, #0
 8006a4c:	d1cb      	bne.n	80069e6 <quorem+0x94>
 8006a4e:	3c01      	subs	r4, #1
 8006a50:	e7c6      	b.n	80069e0 <quorem+0x8e>
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	3b04      	subs	r3, #4
 8006a56:	2a00      	cmp	r2, #0
 8006a58:	d1ef      	bne.n	8006a3a <quorem+0xe8>
 8006a5a:	3c01      	subs	r4, #1
 8006a5c:	e7ea      	b.n	8006a34 <quorem+0xe2>
 8006a5e:	2000      	movs	r0, #0
 8006a60:	e7ee      	b.n	8006a40 <quorem+0xee>
 8006a62:	0000      	movs	r0, r0
 8006a64:	0000      	movs	r0, r0
	...

08006a68 <_dtoa_r>:
 8006a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	69c7      	ldr	r7, [r0, #28]
 8006a6e:	b099      	sub	sp, #100	@ 0x64
 8006a70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a74:	ec55 4b10 	vmov	r4, r5, d0
 8006a78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006a7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a7c:	4683      	mov	fp, r0
 8006a7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a82:	b97f      	cbnz	r7, 8006aa4 <_dtoa_r+0x3c>
 8006a84:	2010      	movs	r0, #16
 8006a86:	f000 fdfd 	bl	8007684 <malloc>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006a90:	b920      	cbnz	r0, 8006a9c <_dtoa_r+0x34>
 8006a92:	4ba7      	ldr	r3, [pc, #668]	@ (8006d30 <_dtoa_r+0x2c8>)
 8006a94:	21ef      	movs	r1, #239	@ 0xef
 8006a96:	48a7      	ldr	r0, [pc, #668]	@ (8006d34 <_dtoa_r+0x2cc>)
 8006a98:	f001 fcae 	bl	80083f8 <__assert_func>
 8006a9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006aa0:	6007      	str	r7, [r0, #0]
 8006aa2:	60c7      	str	r7, [r0, #12]
 8006aa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006aa8:	6819      	ldr	r1, [r3, #0]
 8006aaa:	b159      	cbz	r1, 8006ac4 <_dtoa_r+0x5c>
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	604a      	str	r2, [r1, #4]
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	4093      	lsls	r3, r2
 8006ab4:	608b      	str	r3, [r1, #8]
 8006ab6:	4658      	mov	r0, fp
 8006ab8:	f000 feda 	bl	8007870 <_Bfree>
 8006abc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	1e2b      	subs	r3, r5, #0
 8006ac6:	bfb9      	ittee	lt
 8006ac8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006acc:	9303      	strlt	r3, [sp, #12]
 8006ace:	2300      	movge	r3, #0
 8006ad0:	6033      	strge	r3, [r6, #0]
 8006ad2:	9f03      	ldr	r7, [sp, #12]
 8006ad4:	4b98      	ldr	r3, [pc, #608]	@ (8006d38 <_dtoa_r+0x2d0>)
 8006ad6:	bfbc      	itt	lt
 8006ad8:	2201      	movlt	r2, #1
 8006ada:	6032      	strlt	r2, [r6, #0]
 8006adc:	43bb      	bics	r3, r7
 8006ade:	d112      	bne.n	8006b06 <_dtoa_r+0x9e>
 8006ae0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ae2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006aec:	4323      	orrs	r3, r4
 8006aee:	f000 854d 	beq.w	800758c <_dtoa_r+0xb24>
 8006af2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006af4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006d4c <_dtoa_r+0x2e4>
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 854f 	beq.w	800759c <_dtoa_r+0xb34>
 8006afe:	f10a 0303 	add.w	r3, sl, #3
 8006b02:	f000 bd49 	b.w	8007598 <_dtoa_r+0xb30>
 8006b06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	ec51 0b17 	vmov	r0, r1, d7
 8006b10:	2300      	movs	r3, #0
 8006b12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006b16:	f7f9 ffef 	bl	8000af8 <__aeabi_dcmpeq>
 8006b1a:	4680      	mov	r8, r0
 8006b1c:	b158      	cbz	r0, 8006b36 <_dtoa_r+0xce>
 8006b1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b20:	2301      	movs	r3, #1
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b26:	b113      	cbz	r3, 8006b2e <_dtoa_r+0xc6>
 8006b28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b2a:	4b84      	ldr	r3, [pc, #528]	@ (8006d3c <_dtoa_r+0x2d4>)
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006d50 <_dtoa_r+0x2e8>
 8006b32:	f000 bd33 	b.w	800759c <_dtoa_r+0xb34>
 8006b36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006b3a:	aa16      	add	r2, sp, #88	@ 0x58
 8006b3c:	a917      	add	r1, sp, #92	@ 0x5c
 8006b3e:	4658      	mov	r0, fp
 8006b40:	f001 f980 	bl	8007e44 <__d2b>
 8006b44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006b48:	4681      	mov	r9, r0
 8006b4a:	2e00      	cmp	r6, #0
 8006b4c:	d077      	beq.n	8006c3e <_dtoa_r+0x1d6>
 8006b4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b68:	4619      	mov	r1, r3
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	4b74      	ldr	r3, [pc, #464]	@ (8006d40 <_dtoa_r+0x2d8>)
 8006b6e:	f7f9 fba3 	bl	80002b8 <__aeabi_dsub>
 8006b72:	a369      	add	r3, pc, #420	@ (adr r3, 8006d18 <_dtoa_r+0x2b0>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f7f9 fd56 	bl	8000628 <__aeabi_dmul>
 8006b7c:	a368      	add	r3, pc, #416	@ (adr r3, 8006d20 <_dtoa_r+0x2b8>)
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	f7f9 fb9b 	bl	80002bc <__adddf3>
 8006b86:	4604      	mov	r4, r0
 8006b88:	4630      	mov	r0, r6
 8006b8a:	460d      	mov	r5, r1
 8006b8c:	f7f9 fce2 	bl	8000554 <__aeabi_i2d>
 8006b90:	a365      	add	r3, pc, #404	@ (adr r3, 8006d28 <_dtoa_r+0x2c0>)
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f7f9 fd47 	bl	8000628 <__aeabi_dmul>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	f7f9 fb8b 	bl	80002bc <__adddf3>
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	460d      	mov	r5, r1
 8006baa:	f7f9 ffed 	bl	8000b88 <__aeabi_d2iz>
 8006bae:	2200      	movs	r2, #0
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	f7f9 ffa8 	bl	8000b0c <__aeabi_dcmplt>
 8006bbc:	b140      	cbz	r0, 8006bd0 <_dtoa_r+0x168>
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	f7f9 fcc8 	bl	8000554 <__aeabi_i2d>
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	462b      	mov	r3, r5
 8006bc8:	f7f9 ff96 	bl	8000af8 <__aeabi_dcmpeq>
 8006bcc:	b900      	cbnz	r0, 8006bd0 <_dtoa_r+0x168>
 8006bce:	3f01      	subs	r7, #1
 8006bd0:	2f16      	cmp	r7, #22
 8006bd2:	d851      	bhi.n	8006c78 <_dtoa_r+0x210>
 8006bd4:	4b5b      	ldr	r3, [pc, #364]	@ (8006d44 <_dtoa_r+0x2dc>)
 8006bd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006be2:	f7f9 ff93 	bl	8000b0c <__aeabi_dcmplt>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d048      	beq.n	8006c7c <_dtoa_r+0x214>
 8006bea:	3f01      	subs	r7, #1
 8006bec:	2300      	movs	r3, #0
 8006bee:	9312      	str	r3, [sp, #72]	@ 0x48
 8006bf0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006bf2:	1b9b      	subs	r3, r3, r6
 8006bf4:	1e5a      	subs	r2, r3, #1
 8006bf6:	bf44      	itt	mi
 8006bf8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006bfc:	2300      	movmi	r3, #0
 8006bfe:	9208      	str	r2, [sp, #32]
 8006c00:	bf54      	ite	pl
 8006c02:	f04f 0800 	movpl.w	r8, #0
 8006c06:	9308      	strmi	r3, [sp, #32]
 8006c08:	2f00      	cmp	r7, #0
 8006c0a:	db39      	blt.n	8006c80 <_dtoa_r+0x218>
 8006c0c:	9b08      	ldr	r3, [sp, #32]
 8006c0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006c10:	443b      	add	r3, r7
 8006c12:	9308      	str	r3, [sp, #32]
 8006c14:	2300      	movs	r3, #0
 8006c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c1a:	2b09      	cmp	r3, #9
 8006c1c:	d864      	bhi.n	8006ce8 <_dtoa_r+0x280>
 8006c1e:	2b05      	cmp	r3, #5
 8006c20:	bfc4      	itt	gt
 8006c22:	3b04      	subgt	r3, #4
 8006c24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c28:	f1a3 0302 	sub.w	r3, r3, #2
 8006c2c:	bfcc      	ite	gt
 8006c2e:	2400      	movgt	r4, #0
 8006c30:	2401      	movle	r4, #1
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d863      	bhi.n	8006cfe <_dtoa_r+0x296>
 8006c36:	e8df f003 	tbb	[pc, r3]
 8006c3a:	372a      	.short	0x372a
 8006c3c:	5535      	.short	0x5535
 8006c3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006c42:	441e      	add	r6, r3
 8006c44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	bfc1      	itttt	gt
 8006c4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c50:	409f      	lslgt	r7, r3
 8006c52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c5a:	bfd6      	itet	le
 8006c5c:	f1c3 0320 	rsble	r3, r3, #32
 8006c60:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c64:	fa04 f003 	lslle.w	r0, r4, r3
 8006c68:	f7f9 fc64 	bl	8000534 <__aeabi_ui2d>
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c72:	3e01      	subs	r6, #1
 8006c74:	9214      	str	r2, [sp, #80]	@ 0x50
 8006c76:	e777      	b.n	8006b68 <_dtoa_r+0x100>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e7b8      	b.n	8006bee <_dtoa_r+0x186>
 8006c7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006c7e:	e7b7      	b.n	8006bf0 <_dtoa_r+0x188>
 8006c80:	427b      	negs	r3, r7
 8006c82:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c84:	2300      	movs	r3, #0
 8006c86:	eba8 0807 	sub.w	r8, r8, r7
 8006c8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c8c:	e7c4      	b.n	8006c18 <_dtoa_r+0x1b0>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	dc35      	bgt.n	8006d04 <_dtoa_r+0x29c>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	9307      	str	r3, [sp, #28]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ca2:	e00b      	b.n	8006cbc <_dtoa_r+0x254>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e7f3      	b.n	8006c90 <_dtoa_r+0x228>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cae:	18fb      	adds	r3, r7, r3
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	9307      	str	r3, [sp, #28]
 8006cb8:	bfb8      	it	lt
 8006cba:	2301      	movlt	r3, #1
 8006cbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	2204      	movs	r2, #4
 8006cc4:	f102 0514 	add.w	r5, r2, #20
 8006cc8:	429d      	cmp	r5, r3
 8006cca:	d91f      	bls.n	8006d0c <_dtoa_r+0x2a4>
 8006ccc:	6041      	str	r1, [r0, #4]
 8006cce:	4658      	mov	r0, fp
 8006cd0:	f000 fd8e 	bl	80077f0 <_Balloc>
 8006cd4:	4682      	mov	sl, r0
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d13c      	bne.n	8006d54 <_dtoa_r+0x2ec>
 8006cda:	4b1b      	ldr	r3, [pc, #108]	@ (8006d48 <_dtoa_r+0x2e0>)
 8006cdc:	4602      	mov	r2, r0
 8006cde:	f240 11af 	movw	r1, #431	@ 0x1af
 8006ce2:	e6d8      	b.n	8006a96 <_dtoa_r+0x2e>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e7e0      	b.n	8006caa <_dtoa_r+0x242>
 8006ce8:	2401      	movs	r4, #1
 8006cea:	2300      	movs	r3, #0
 8006cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	9307      	str	r3, [sp, #28]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2312      	movs	r3, #18
 8006cfc:	e7d0      	b.n	8006ca0 <_dtoa_r+0x238>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d02:	e7f5      	b.n	8006cf0 <_dtoa_r+0x288>
 8006d04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	9307      	str	r3, [sp, #28]
 8006d0a:	e7d7      	b.n	8006cbc <_dtoa_r+0x254>
 8006d0c:	3101      	adds	r1, #1
 8006d0e:	0052      	lsls	r2, r2, #1
 8006d10:	e7d8      	b.n	8006cc4 <_dtoa_r+0x25c>
 8006d12:	bf00      	nop
 8006d14:	f3af 8000 	nop.w
 8006d18:	636f4361 	.word	0x636f4361
 8006d1c:	3fd287a7 	.word	0x3fd287a7
 8006d20:	8b60c8b3 	.word	0x8b60c8b3
 8006d24:	3fc68a28 	.word	0x3fc68a28
 8006d28:	509f79fb 	.word	0x509f79fb
 8006d2c:	3fd34413 	.word	0x3fd34413
 8006d30:	080089d9 	.word	0x080089d9
 8006d34:	080089f0 	.word	0x080089f0
 8006d38:	7ff00000 	.word	0x7ff00000
 8006d3c:	080089a9 	.word	0x080089a9
 8006d40:	3ff80000 	.word	0x3ff80000
 8006d44:	08008ae8 	.word	0x08008ae8
 8006d48:	08008a48 	.word	0x08008a48
 8006d4c:	080089d5 	.word	0x080089d5
 8006d50:	080089a8 	.word	0x080089a8
 8006d54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d58:	6018      	str	r0, [r3, #0]
 8006d5a:	9b07      	ldr	r3, [sp, #28]
 8006d5c:	2b0e      	cmp	r3, #14
 8006d5e:	f200 80a4 	bhi.w	8006eaa <_dtoa_r+0x442>
 8006d62:	2c00      	cmp	r4, #0
 8006d64:	f000 80a1 	beq.w	8006eaa <_dtoa_r+0x442>
 8006d68:	2f00      	cmp	r7, #0
 8006d6a:	dd33      	ble.n	8006dd4 <_dtoa_r+0x36c>
 8006d6c:	4bad      	ldr	r3, [pc, #692]	@ (8007024 <_dtoa_r+0x5bc>)
 8006d6e:	f007 020f 	and.w	r2, r7, #15
 8006d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d76:	ed93 7b00 	vldr	d7, [r3]
 8006d7a:	05f8      	lsls	r0, r7, #23
 8006d7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006d80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d84:	d516      	bpl.n	8006db4 <_dtoa_r+0x34c>
 8006d86:	4ba8      	ldr	r3, [pc, #672]	@ (8007028 <_dtoa_r+0x5c0>)
 8006d88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d90:	f7f9 fd74 	bl	800087c <__aeabi_ddiv>
 8006d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d98:	f004 040f 	and.w	r4, r4, #15
 8006d9c:	2603      	movs	r6, #3
 8006d9e:	4da2      	ldr	r5, [pc, #648]	@ (8007028 <_dtoa_r+0x5c0>)
 8006da0:	b954      	cbnz	r4, 8006db8 <_dtoa_r+0x350>
 8006da2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006daa:	f7f9 fd67 	bl	800087c <__aeabi_ddiv>
 8006dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006db2:	e028      	b.n	8006e06 <_dtoa_r+0x39e>
 8006db4:	2602      	movs	r6, #2
 8006db6:	e7f2      	b.n	8006d9e <_dtoa_r+0x336>
 8006db8:	07e1      	lsls	r1, r4, #31
 8006dba:	d508      	bpl.n	8006dce <_dtoa_r+0x366>
 8006dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dc4:	f7f9 fc30 	bl	8000628 <__aeabi_dmul>
 8006dc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dcc:	3601      	adds	r6, #1
 8006dce:	1064      	asrs	r4, r4, #1
 8006dd0:	3508      	adds	r5, #8
 8006dd2:	e7e5      	b.n	8006da0 <_dtoa_r+0x338>
 8006dd4:	f000 80d2 	beq.w	8006f7c <_dtoa_r+0x514>
 8006dd8:	427c      	negs	r4, r7
 8006dda:	4b92      	ldr	r3, [pc, #584]	@ (8007024 <_dtoa_r+0x5bc>)
 8006ddc:	4d92      	ldr	r5, [pc, #584]	@ (8007028 <_dtoa_r+0x5c0>)
 8006dde:	f004 020f 	and.w	r2, r4, #15
 8006de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dee:	f7f9 fc1b 	bl	8000628 <__aeabi_dmul>
 8006df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006df6:	1124      	asrs	r4, r4, #4
 8006df8:	2300      	movs	r3, #0
 8006dfa:	2602      	movs	r6, #2
 8006dfc:	2c00      	cmp	r4, #0
 8006dfe:	f040 80b2 	bne.w	8006f66 <_dtoa_r+0x4fe>
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1d3      	bne.n	8006dae <_dtoa_r+0x346>
 8006e06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80b7 	beq.w	8006f80 <_dtoa_r+0x518>
 8006e12:	4b86      	ldr	r3, [pc, #536]	@ (800702c <_dtoa_r+0x5c4>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	4620      	mov	r0, r4
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f7f9 fe77 	bl	8000b0c <__aeabi_dcmplt>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	f000 80ae 	beq.w	8006f80 <_dtoa_r+0x518>
 8006e24:	9b07      	ldr	r3, [sp, #28]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 80aa 	beq.w	8006f80 <_dtoa_r+0x518>
 8006e2c:	9b00      	ldr	r3, [sp, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	dd37      	ble.n	8006ea2 <_dtoa_r+0x43a>
 8006e32:	1e7b      	subs	r3, r7, #1
 8006e34:	9304      	str	r3, [sp, #16]
 8006e36:	4620      	mov	r0, r4
 8006e38:	4b7d      	ldr	r3, [pc, #500]	@ (8007030 <_dtoa_r+0x5c8>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	f7f9 fbf3 	bl	8000628 <__aeabi_dmul>
 8006e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e46:	9c00      	ldr	r4, [sp, #0]
 8006e48:	3601      	adds	r6, #1
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	f7f9 fb82 	bl	8000554 <__aeabi_i2d>
 8006e50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e54:	f7f9 fbe8 	bl	8000628 <__aeabi_dmul>
 8006e58:	4b76      	ldr	r3, [pc, #472]	@ (8007034 <_dtoa_r+0x5cc>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f7f9 fa2e 	bl	80002bc <__adddf3>
 8006e60:	4605      	mov	r5, r0
 8006e62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e66:	2c00      	cmp	r4, #0
 8006e68:	f040 808d 	bne.w	8006f86 <_dtoa_r+0x51e>
 8006e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e70:	4b71      	ldr	r3, [pc, #452]	@ (8007038 <_dtoa_r+0x5d0>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	f7f9 fa20 	bl	80002b8 <__aeabi_dsub>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e80:	462a      	mov	r2, r5
 8006e82:	4633      	mov	r3, r6
 8006e84:	f7f9 fe60 	bl	8000b48 <__aeabi_dcmpgt>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	f040 828b 	bne.w	80073a4 <_dtoa_r+0x93c>
 8006e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e92:	462a      	mov	r2, r5
 8006e94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e98:	f7f9 fe38 	bl	8000b0c <__aeabi_dcmplt>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	f040 8128 	bne.w	80070f2 <_dtoa_r+0x68a>
 8006ea2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006ea6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006eaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f2c0 815a 	blt.w	8007166 <_dtoa_r+0x6fe>
 8006eb2:	2f0e      	cmp	r7, #14
 8006eb4:	f300 8157 	bgt.w	8007166 <_dtoa_r+0x6fe>
 8006eb8:	4b5a      	ldr	r3, [pc, #360]	@ (8007024 <_dtoa_r+0x5bc>)
 8006eba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ebe:	ed93 7b00 	vldr	d7, [r3]
 8006ec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	ed8d 7b00 	vstr	d7, [sp]
 8006eca:	da03      	bge.n	8006ed4 <_dtoa_r+0x46c>
 8006ecc:	9b07      	ldr	r3, [sp, #28]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f340 8101 	ble.w	80070d6 <_dtoa_r+0x66e>
 8006ed4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ed8:	4656      	mov	r6, sl
 8006eda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ede:	4620      	mov	r0, r4
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	f7f9 fccb 	bl	800087c <__aeabi_ddiv>
 8006ee6:	f7f9 fe4f 	bl	8000b88 <__aeabi_d2iz>
 8006eea:	4680      	mov	r8, r0
 8006eec:	f7f9 fb32 	bl	8000554 <__aeabi_i2d>
 8006ef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ef4:	f7f9 fb98 	bl	8000628 <__aeabi_dmul>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4620      	mov	r0, r4
 8006efe:	4629      	mov	r1, r5
 8006f00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006f04:	f7f9 f9d8 	bl	80002b8 <__aeabi_dsub>
 8006f08:	f806 4b01 	strb.w	r4, [r6], #1
 8006f0c:	9d07      	ldr	r5, [sp, #28]
 8006f0e:	eba6 040a 	sub.w	r4, r6, sl
 8006f12:	42a5      	cmp	r5, r4
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	f040 8117 	bne.w	800714a <_dtoa_r+0x6e2>
 8006f1c:	f7f9 f9ce 	bl	80002bc <__adddf3>
 8006f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f24:	4604      	mov	r4, r0
 8006f26:	460d      	mov	r5, r1
 8006f28:	f7f9 fe0e 	bl	8000b48 <__aeabi_dcmpgt>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	f040 80f9 	bne.w	8007124 <_dtoa_r+0x6bc>
 8006f32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f36:	4620      	mov	r0, r4
 8006f38:	4629      	mov	r1, r5
 8006f3a:	f7f9 fddd 	bl	8000af8 <__aeabi_dcmpeq>
 8006f3e:	b118      	cbz	r0, 8006f48 <_dtoa_r+0x4e0>
 8006f40:	f018 0f01 	tst.w	r8, #1
 8006f44:	f040 80ee 	bne.w	8007124 <_dtoa_r+0x6bc>
 8006f48:	4649      	mov	r1, r9
 8006f4a:	4658      	mov	r0, fp
 8006f4c:	f000 fc90 	bl	8007870 <_Bfree>
 8006f50:	2300      	movs	r3, #0
 8006f52:	7033      	strb	r3, [r6, #0]
 8006f54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f56:	3701      	adds	r7, #1
 8006f58:	601f      	str	r7, [r3, #0]
 8006f5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 831d 	beq.w	800759c <_dtoa_r+0xb34>
 8006f62:	601e      	str	r6, [r3, #0]
 8006f64:	e31a      	b.n	800759c <_dtoa_r+0xb34>
 8006f66:	07e2      	lsls	r2, r4, #31
 8006f68:	d505      	bpl.n	8006f76 <_dtoa_r+0x50e>
 8006f6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f6e:	f7f9 fb5b 	bl	8000628 <__aeabi_dmul>
 8006f72:	3601      	adds	r6, #1
 8006f74:	2301      	movs	r3, #1
 8006f76:	1064      	asrs	r4, r4, #1
 8006f78:	3508      	adds	r5, #8
 8006f7a:	e73f      	b.n	8006dfc <_dtoa_r+0x394>
 8006f7c:	2602      	movs	r6, #2
 8006f7e:	e742      	b.n	8006e06 <_dtoa_r+0x39e>
 8006f80:	9c07      	ldr	r4, [sp, #28]
 8006f82:	9704      	str	r7, [sp, #16]
 8006f84:	e761      	b.n	8006e4a <_dtoa_r+0x3e2>
 8006f86:	4b27      	ldr	r3, [pc, #156]	@ (8007024 <_dtoa_r+0x5bc>)
 8006f88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f92:	4454      	add	r4, sl
 8006f94:	2900      	cmp	r1, #0
 8006f96:	d053      	beq.n	8007040 <_dtoa_r+0x5d8>
 8006f98:	4928      	ldr	r1, [pc, #160]	@ (800703c <_dtoa_r+0x5d4>)
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	f7f9 fc6e 	bl	800087c <__aeabi_ddiv>
 8006fa0:	4633      	mov	r3, r6
 8006fa2:	462a      	mov	r2, r5
 8006fa4:	f7f9 f988 	bl	80002b8 <__aeabi_dsub>
 8006fa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fac:	4656      	mov	r6, sl
 8006fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fb2:	f7f9 fde9 	bl	8000b88 <__aeabi_d2iz>
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	f7f9 facc 	bl	8000554 <__aeabi_i2d>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fc4:	f7f9 f978 	bl	80002b8 <__aeabi_dsub>
 8006fc8:	3530      	adds	r5, #48	@ 0x30
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fd2:	f806 5b01 	strb.w	r5, [r6], #1
 8006fd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fda:	f7f9 fd97 	bl	8000b0c <__aeabi_dcmplt>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d171      	bne.n	80070c6 <_dtoa_r+0x65e>
 8006fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fe6:	4911      	ldr	r1, [pc, #68]	@ (800702c <_dtoa_r+0x5c4>)
 8006fe8:	2000      	movs	r0, #0
 8006fea:	f7f9 f965 	bl	80002b8 <__aeabi_dsub>
 8006fee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ff2:	f7f9 fd8b 	bl	8000b0c <__aeabi_dcmplt>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f040 8095 	bne.w	8007126 <_dtoa_r+0x6be>
 8006ffc:	42a6      	cmp	r6, r4
 8006ffe:	f43f af50 	beq.w	8006ea2 <_dtoa_r+0x43a>
 8007002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007006:	4b0a      	ldr	r3, [pc, #40]	@ (8007030 <_dtoa_r+0x5c8>)
 8007008:	2200      	movs	r2, #0
 800700a:	f7f9 fb0d 	bl	8000628 <__aeabi_dmul>
 800700e:	4b08      	ldr	r3, [pc, #32]	@ (8007030 <_dtoa_r+0x5c8>)
 8007010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007014:	2200      	movs	r2, #0
 8007016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800701a:	f7f9 fb05 	bl	8000628 <__aeabi_dmul>
 800701e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007022:	e7c4      	b.n	8006fae <_dtoa_r+0x546>
 8007024:	08008ae8 	.word	0x08008ae8
 8007028:	08008ac0 	.word	0x08008ac0
 800702c:	3ff00000 	.word	0x3ff00000
 8007030:	40240000 	.word	0x40240000
 8007034:	401c0000 	.word	0x401c0000
 8007038:	40140000 	.word	0x40140000
 800703c:	3fe00000 	.word	0x3fe00000
 8007040:	4631      	mov	r1, r6
 8007042:	4628      	mov	r0, r5
 8007044:	f7f9 faf0 	bl	8000628 <__aeabi_dmul>
 8007048:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800704c:	9415      	str	r4, [sp, #84]	@ 0x54
 800704e:	4656      	mov	r6, sl
 8007050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007054:	f7f9 fd98 	bl	8000b88 <__aeabi_d2iz>
 8007058:	4605      	mov	r5, r0
 800705a:	f7f9 fa7b 	bl	8000554 <__aeabi_i2d>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007066:	f7f9 f927 	bl	80002b8 <__aeabi_dsub>
 800706a:	3530      	adds	r5, #48	@ 0x30
 800706c:	f806 5b01 	strb.w	r5, [r6], #1
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	42a6      	cmp	r6, r4
 8007076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800707a:	f04f 0200 	mov.w	r2, #0
 800707e:	d124      	bne.n	80070ca <_dtoa_r+0x662>
 8007080:	4bac      	ldr	r3, [pc, #688]	@ (8007334 <_dtoa_r+0x8cc>)
 8007082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007086:	f7f9 f919 	bl	80002bc <__adddf3>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007092:	f7f9 fd59 	bl	8000b48 <__aeabi_dcmpgt>
 8007096:	2800      	cmp	r0, #0
 8007098:	d145      	bne.n	8007126 <_dtoa_r+0x6be>
 800709a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800709e:	49a5      	ldr	r1, [pc, #660]	@ (8007334 <_dtoa_r+0x8cc>)
 80070a0:	2000      	movs	r0, #0
 80070a2:	f7f9 f909 	bl	80002b8 <__aeabi_dsub>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ae:	f7f9 fd2d 	bl	8000b0c <__aeabi_dcmplt>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	f43f aef5 	beq.w	8006ea2 <_dtoa_r+0x43a>
 80070b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80070ba:	1e73      	subs	r3, r6, #1
 80070bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80070be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070c2:	2b30      	cmp	r3, #48	@ 0x30
 80070c4:	d0f8      	beq.n	80070b8 <_dtoa_r+0x650>
 80070c6:	9f04      	ldr	r7, [sp, #16]
 80070c8:	e73e      	b.n	8006f48 <_dtoa_r+0x4e0>
 80070ca:	4b9b      	ldr	r3, [pc, #620]	@ (8007338 <_dtoa_r+0x8d0>)
 80070cc:	f7f9 faac 	bl	8000628 <__aeabi_dmul>
 80070d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070d4:	e7bc      	b.n	8007050 <_dtoa_r+0x5e8>
 80070d6:	d10c      	bne.n	80070f2 <_dtoa_r+0x68a>
 80070d8:	4b98      	ldr	r3, [pc, #608]	@ (800733c <_dtoa_r+0x8d4>)
 80070da:	2200      	movs	r2, #0
 80070dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070e0:	f7f9 faa2 	bl	8000628 <__aeabi_dmul>
 80070e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070e8:	f7f9 fd24 	bl	8000b34 <__aeabi_dcmpge>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	f000 8157 	beq.w	80073a0 <_dtoa_r+0x938>
 80070f2:	2400      	movs	r4, #0
 80070f4:	4625      	mov	r5, r4
 80070f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070f8:	43db      	mvns	r3, r3
 80070fa:	9304      	str	r3, [sp, #16]
 80070fc:	4656      	mov	r6, sl
 80070fe:	2700      	movs	r7, #0
 8007100:	4621      	mov	r1, r4
 8007102:	4658      	mov	r0, fp
 8007104:	f000 fbb4 	bl	8007870 <_Bfree>
 8007108:	2d00      	cmp	r5, #0
 800710a:	d0dc      	beq.n	80070c6 <_dtoa_r+0x65e>
 800710c:	b12f      	cbz	r7, 800711a <_dtoa_r+0x6b2>
 800710e:	42af      	cmp	r7, r5
 8007110:	d003      	beq.n	800711a <_dtoa_r+0x6b2>
 8007112:	4639      	mov	r1, r7
 8007114:	4658      	mov	r0, fp
 8007116:	f000 fbab 	bl	8007870 <_Bfree>
 800711a:	4629      	mov	r1, r5
 800711c:	4658      	mov	r0, fp
 800711e:	f000 fba7 	bl	8007870 <_Bfree>
 8007122:	e7d0      	b.n	80070c6 <_dtoa_r+0x65e>
 8007124:	9704      	str	r7, [sp, #16]
 8007126:	4633      	mov	r3, r6
 8007128:	461e      	mov	r6, r3
 800712a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800712e:	2a39      	cmp	r2, #57	@ 0x39
 8007130:	d107      	bne.n	8007142 <_dtoa_r+0x6da>
 8007132:	459a      	cmp	sl, r3
 8007134:	d1f8      	bne.n	8007128 <_dtoa_r+0x6c0>
 8007136:	9a04      	ldr	r2, [sp, #16]
 8007138:	3201      	adds	r2, #1
 800713a:	9204      	str	r2, [sp, #16]
 800713c:	2230      	movs	r2, #48	@ 0x30
 800713e:	f88a 2000 	strb.w	r2, [sl]
 8007142:	781a      	ldrb	r2, [r3, #0]
 8007144:	3201      	adds	r2, #1
 8007146:	701a      	strb	r2, [r3, #0]
 8007148:	e7bd      	b.n	80070c6 <_dtoa_r+0x65e>
 800714a:	4b7b      	ldr	r3, [pc, #492]	@ (8007338 <_dtoa_r+0x8d0>)
 800714c:	2200      	movs	r2, #0
 800714e:	f7f9 fa6b 	bl	8000628 <__aeabi_dmul>
 8007152:	2200      	movs	r2, #0
 8007154:	2300      	movs	r3, #0
 8007156:	4604      	mov	r4, r0
 8007158:	460d      	mov	r5, r1
 800715a:	f7f9 fccd 	bl	8000af8 <__aeabi_dcmpeq>
 800715e:	2800      	cmp	r0, #0
 8007160:	f43f aebb 	beq.w	8006eda <_dtoa_r+0x472>
 8007164:	e6f0      	b.n	8006f48 <_dtoa_r+0x4e0>
 8007166:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007168:	2a00      	cmp	r2, #0
 800716a:	f000 80db 	beq.w	8007324 <_dtoa_r+0x8bc>
 800716e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007170:	2a01      	cmp	r2, #1
 8007172:	f300 80bf 	bgt.w	80072f4 <_dtoa_r+0x88c>
 8007176:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007178:	2a00      	cmp	r2, #0
 800717a:	f000 80b7 	beq.w	80072ec <_dtoa_r+0x884>
 800717e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007182:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007184:	4646      	mov	r6, r8
 8007186:	9a08      	ldr	r2, [sp, #32]
 8007188:	2101      	movs	r1, #1
 800718a:	441a      	add	r2, r3
 800718c:	4658      	mov	r0, fp
 800718e:	4498      	add	r8, r3
 8007190:	9208      	str	r2, [sp, #32]
 8007192:	f000 fc21 	bl	80079d8 <__i2b>
 8007196:	4605      	mov	r5, r0
 8007198:	b15e      	cbz	r6, 80071b2 <_dtoa_r+0x74a>
 800719a:	9b08      	ldr	r3, [sp, #32]
 800719c:	2b00      	cmp	r3, #0
 800719e:	dd08      	ble.n	80071b2 <_dtoa_r+0x74a>
 80071a0:	42b3      	cmp	r3, r6
 80071a2:	9a08      	ldr	r2, [sp, #32]
 80071a4:	bfa8      	it	ge
 80071a6:	4633      	movge	r3, r6
 80071a8:	eba8 0803 	sub.w	r8, r8, r3
 80071ac:	1af6      	subs	r6, r6, r3
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	9308      	str	r3, [sp, #32]
 80071b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071b4:	b1f3      	cbz	r3, 80071f4 <_dtoa_r+0x78c>
 80071b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 80b7 	beq.w	800732c <_dtoa_r+0x8c4>
 80071be:	b18c      	cbz	r4, 80071e4 <_dtoa_r+0x77c>
 80071c0:	4629      	mov	r1, r5
 80071c2:	4622      	mov	r2, r4
 80071c4:	4658      	mov	r0, fp
 80071c6:	f000 fcc7 	bl	8007b58 <__pow5mult>
 80071ca:	464a      	mov	r2, r9
 80071cc:	4601      	mov	r1, r0
 80071ce:	4605      	mov	r5, r0
 80071d0:	4658      	mov	r0, fp
 80071d2:	f000 fc17 	bl	8007a04 <__multiply>
 80071d6:	4649      	mov	r1, r9
 80071d8:	9004      	str	r0, [sp, #16]
 80071da:	4658      	mov	r0, fp
 80071dc:	f000 fb48 	bl	8007870 <_Bfree>
 80071e0:	9b04      	ldr	r3, [sp, #16]
 80071e2:	4699      	mov	r9, r3
 80071e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071e6:	1b1a      	subs	r2, r3, r4
 80071e8:	d004      	beq.n	80071f4 <_dtoa_r+0x78c>
 80071ea:	4649      	mov	r1, r9
 80071ec:	4658      	mov	r0, fp
 80071ee:	f000 fcb3 	bl	8007b58 <__pow5mult>
 80071f2:	4681      	mov	r9, r0
 80071f4:	2101      	movs	r1, #1
 80071f6:	4658      	mov	r0, fp
 80071f8:	f000 fbee 	bl	80079d8 <__i2b>
 80071fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071fe:	4604      	mov	r4, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 81cf 	beq.w	80075a4 <_dtoa_r+0xb3c>
 8007206:	461a      	mov	r2, r3
 8007208:	4601      	mov	r1, r0
 800720a:	4658      	mov	r0, fp
 800720c:	f000 fca4 	bl	8007b58 <__pow5mult>
 8007210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007212:	2b01      	cmp	r3, #1
 8007214:	4604      	mov	r4, r0
 8007216:	f300 8095 	bgt.w	8007344 <_dtoa_r+0x8dc>
 800721a:	9b02      	ldr	r3, [sp, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	f040 8087 	bne.w	8007330 <_dtoa_r+0x8c8>
 8007222:	9b03      	ldr	r3, [sp, #12]
 8007224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007228:	2b00      	cmp	r3, #0
 800722a:	f040 8089 	bne.w	8007340 <_dtoa_r+0x8d8>
 800722e:	9b03      	ldr	r3, [sp, #12]
 8007230:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007234:	0d1b      	lsrs	r3, r3, #20
 8007236:	051b      	lsls	r3, r3, #20
 8007238:	b12b      	cbz	r3, 8007246 <_dtoa_r+0x7de>
 800723a:	9b08      	ldr	r3, [sp, #32]
 800723c:	3301      	adds	r3, #1
 800723e:	9308      	str	r3, [sp, #32]
 8007240:	f108 0801 	add.w	r8, r8, #1
 8007244:	2301      	movs	r3, #1
 8007246:	930a      	str	r3, [sp, #40]	@ 0x28
 8007248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 81b0 	beq.w	80075b0 <_dtoa_r+0xb48>
 8007250:	6923      	ldr	r3, [r4, #16]
 8007252:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007256:	6918      	ldr	r0, [r3, #16]
 8007258:	f000 fb72 	bl	8007940 <__hi0bits>
 800725c:	f1c0 0020 	rsb	r0, r0, #32
 8007260:	9b08      	ldr	r3, [sp, #32]
 8007262:	4418      	add	r0, r3
 8007264:	f010 001f 	ands.w	r0, r0, #31
 8007268:	d077      	beq.n	800735a <_dtoa_r+0x8f2>
 800726a:	f1c0 0320 	rsb	r3, r0, #32
 800726e:	2b04      	cmp	r3, #4
 8007270:	dd6b      	ble.n	800734a <_dtoa_r+0x8e2>
 8007272:	9b08      	ldr	r3, [sp, #32]
 8007274:	f1c0 001c 	rsb	r0, r0, #28
 8007278:	4403      	add	r3, r0
 800727a:	4480      	add	r8, r0
 800727c:	4406      	add	r6, r0
 800727e:	9308      	str	r3, [sp, #32]
 8007280:	f1b8 0f00 	cmp.w	r8, #0
 8007284:	dd05      	ble.n	8007292 <_dtoa_r+0x82a>
 8007286:	4649      	mov	r1, r9
 8007288:	4642      	mov	r2, r8
 800728a:	4658      	mov	r0, fp
 800728c:	f000 fcbe 	bl	8007c0c <__lshift>
 8007290:	4681      	mov	r9, r0
 8007292:	9b08      	ldr	r3, [sp, #32]
 8007294:	2b00      	cmp	r3, #0
 8007296:	dd05      	ble.n	80072a4 <_dtoa_r+0x83c>
 8007298:	4621      	mov	r1, r4
 800729a:	461a      	mov	r2, r3
 800729c:	4658      	mov	r0, fp
 800729e:	f000 fcb5 	bl	8007c0c <__lshift>
 80072a2:	4604      	mov	r4, r0
 80072a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d059      	beq.n	800735e <_dtoa_r+0x8f6>
 80072aa:	4621      	mov	r1, r4
 80072ac:	4648      	mov	r0, r9
 80072ae:	f000 fd19 	bl	8007ce4 <__mcmp>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	da53      	bge.n	800735e <_dtoa_r+0x8f6>
 80072b6:	1e7b      	subs	r3, r7, #1
 80072b8:	9304      	str	r3, [sp, #16]
 80072ba:	4649      	mov	r1, r9
 80072bc:	2300      	movs	r3, #0
 80072be:	220a      	movs	r2, #10
 80072c0:	4658      	mov	r0, fp
 80072c2:	f000 faf7 	bl	80078b4 <__multadd>
 80072c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072c8:	4681      	mov	r9, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 8172 	beq.w	80075b4 <_dtoa_r+0xb4c>
 80072d0:	2300      	movs	r3, #0
 80072d2:	4629      	mov	r1, r5
 80072d4:	220a      	movs	r2, #10
 80072d6:	4658      	mov	r0, fp
 80072d8:	f000 faec 	bl	80078b4 <__multadd>
 80072dc:	9b00      	ldr	r3, [sp, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	4605      	mov	r5, r0
 80072e2:	dc67      	bgt.n	80073b4 <_dtoa_r+0x94c>
 80072e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	dc41      	bgt.n	800736e <_dtoa_r+0x906>
 80072ea:	e063      	b.n	80073b4 <_dtoa_r+0x94c>
 80072ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80072ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80072f2:	e746      	b.n	8007182 <_dtoa_r+0x71a>
 80072f4:	9b07      	ldr	r3, [sp, #28]
 80072f6:	1e5c      	subs	r4, r3, #1
 80072f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072fa:	42a3      	cmp	r3, r4
 80072fc:	bfbf      	itttt	lt
 80072fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007300:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007302:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007304:	1ae3      	sublt	r3, r4, r3
 8007306:	bfb4      	ite	lt
 8007308:	18d2      	addlt	r2, r2, r3
 800730a:	1b1c      	subge	r4, r3, r4
 800730c:	9b07      	ldr	r3, [sp, #28]
 800730e:	bfbc      	itt	lt
 8007310:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007312:	2400      	movlt	r4, #0
 8007314:	2b00      	cmp	r3, #0
 8007316:	bfb5      	itete	lt
 8007318:	eba8 0603 	sublt.w	r6, r8, r3
 800731c:	9b07      	ldrge	r3, [sp, #28]
 800731e:	2300      	movlt	r3, #0
 8007320:	4646      	movge	r6, r8
 8007322:	e730      	b.n	8007186 <_dtoa_r+0x71e>
 8007324:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007326:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007328:	4646      	mov	r6, r8
 800732a:	e735      	b.n	8007198 <_dtoa_r+0x730>
 800732c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800732e:	e75c      	b.n	80071ea <_dtoa_r+0x782>
 8007330:	2300      	movs	r3, #0
 8007332:	e788      	b.n	8007246 <_dtoa_r+0x7de>
 8007334:	3fe00000 	.word	0x3fe00000
 8007338:	40240000 	.word	0x40240000
 800733c:	40140000 	.word	0x40140000
 8007340:	9b02      	ldr	r3, [sp, #8]
 8007342:	e780      	b.n	8007246 <_dtoa_r+0x7de>
 8007344:	2300      	movs	r3, #0
 8007346:	930a      	str	r3, [sp, #40]	@ 0x28
 8007348:	e782      	b.n	8007250 <_dtoa_r+0x7e8>
 800734a:	d099      	beq.n	8007280 <_dtoa_r+0x818>
 800734c:	9a08      	ldr	r2, [sp, #32]
 800734e:	331c      	adds	r3, #28
 8007350:	441a      	add	r2, r3
 8007352:	4498      	add	r8, r3
 8007354:	441e      	add	r6, r3
 8007356:	9208      	str	r2, [sp, #32]
 8007358:	e792      	b.n	8007280 <_dtoa_r+0x818>
 800735a:	4603      	mov	r3, r0
 800735c:	e7f6      	b.n	800734c <_dtoa_r+0x8e4>
 800735e:	9b07      	ldr	r3, [sp, #28]
 8007360:	9704      	str	r7, [sp, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	dc20      	bgt.n	80073a8 <_dtoa_r+0x940>
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800736a:	2b02      	cmp	r3, #2
 800736c:	dd1e      	ble.n	80073ac <_dtoa_r+0x944>
 800736e:	9b00      	ldr	r3, [sp, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	f47f aec0 	bne.w	80070f6 <_dtoa_r+0x68e>
 8007376:	4621      	mov	r1, r4
 8007378:	2205      	movs	r2, #5
 800737a:	4658      	mov	r0, fp
 800737c:	f000 fa9a 	bl	80078b4 <__multadd>
 8007380:	4601      	mov	r1, r0
 8007382:	4604      	mov	r4, r0
 8007384:	4648      	mov	r0, r9
 8007386:	f000 fcad 	bl	8007ce4 <__mcmp>
 800738a:	2800      	cmp	r0, #0
 800738c:	f77f aeb3 	ble.w	80070f6 <_dtoa_r+0x68e>
 8007390:	4656      	mov	r6, sl
 8007392:	2331      	movs	r3, #49	@ 0x31
 8007394:	f806 3b01 	strb.w	r3, [r6], #1
 8007398:	9b04      	ldr	r3, [sp, #16]
 800739a:	3301      	adds	r3, #1
 800739c:	9304      	str	r3, [sp, #16]
 800739e:	e6ae      	b.n	80070fe <_dtoa_r+0x696>
 80073a0:	9c07      	ldr	r4, [sp, #28]
 80073a2:	9704      	str	r7, [sp, #16]
 80073a4:	4625      	mov	r5, r4
 80073a6:	e7f3      	b.n	8007390 <_dtoa_r+0x928>
 80073a8:	9b07      	ldr	r3, [sp, #28]
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 8104 	beq.w	80075bc <_dtoa_r+0xb54>
 80073b4:	2e00      	cmp	r6, #0
 80073b6:	dd05      	ble.n	80073c4 <_dtoa_r+0x95c>
 80073b8:	4629      	mov	r1, r5
 80073ba:	4632      	mov	r2, r6
 80073bc:	4658      	mov	r0, fp
 80073be:	f000 fc25 	bl	8007c0c <__lshift>
 80073c2:	4605      	mov	r5, r0
 80073c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d05a      	beq.n	8007480 <_dtoa_r+0xa18>
 80073ca:	6869      	ldr	r1, [r5, #4]
 80073cc:	4658      	mov	r0, fp
 80073ce:	f000 fa0f 	bl	80077f0 <_Balloc>
 80073d2:	4606      	mov	r6, r0
 80073d4:	b928      	cbnz	r0, 80073e2 <_dtoa_r+0x97a>
 80073d6:	4b84      	ldr	r3, [pc, #528]	@ (80075e8 <_dtoa_r+0xb80>)
 80073d8:	4602      	mov	r2, r0
 80073da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80073de:	f7ff bb5a 	b.w	8006a96 <_dtoa_r+0x2e>
 80073e2:	692a      	ldr	r2, [r5, #16]
 80073e4:	3202      	adds	r2, #2
 80073e6:	0092      	lsls	r2, r2, #2
 80073e8:	f105 010c 	add.w	r1, r5, #12
 80073ec:	300c      	adds	r0, #12
 80073ee:	f7ff faa2 	bl	8006936 <memcpy>
 80073f2:	2201      	movs	r2, #1
 80073f4:	4631      	mov	r1, r6
 80073f6:	4658      	mov	r0, fp
 80073f8:	f000 fc08 	bl	8007c0c <__lshift>
 80073fc:	f10a 0301 	add.w	r3, sl, #1
 8007400:	9307      	str	r3, [sp, #28]
 8007402:	9b00      	ldr	r3, [sp, #0]
 8007404:	4453      	add	r3, sl
 8007406:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007408:	9b02      	ldr	r3, [sp, #8]
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	462f      	mov	r7, r5
 8007410:	930a      	str	r3, [sp, #40]	@ 0x28
 8007412:	4605      	mov	r5, r0
 8007414:	9b07      	ldr	r3, [sp, #28]
 8007416:	4621      	mov	r1, r4
 8007418:	3b01      	subs	r3, #1
 800741a:	4648      	mov	r0, r9
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	f7ff fa98 	bl	8006952 <quorem>
 8007422:	4639      	mov	r1, r7
 8007424:	9002      	str	r0, [sp, #8]
 8007426:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800742a:	4648      	mov	r0, r9
 800742c:	f000 fc5a 	bl	8007ce4 <__mcmp>
 8007430:	462a      	mov	r2, r5
 8007432:	9008      	str	r0, [sp, #32]
 8007434:	4621      	mov	r1, r4
 8007436:	4658      	mov	r0, fp
 8007438:	f000 fc70 	bl	8007d1c <__mdiff>
 800743c:	68c2      	ldr	r2, [r0, #12]
 800743e:	4606      	mov	r6, r0
 8007440:	bb02      	cbnz	r2, 8007484 <_dtoa_r+0xa1c>
 8007442:	4601      	mov	r1, r0
 8007444:	4648      	mov	r0, r9
 8007446:	f000 fc4d 	bl	8007ce4 <__mcmp>
 800744a:	4602      	mov	r2, r0
 800744c:	4631      	mov	r1, r6
 800744e:	4658      	mov	r0, fp
 8007450:	920e      	str	r2, [sp, #56]	@ 0x38
 8007452:	f000 fa0d 	bl	8007870 <_Bfree>
 8007456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800745a:	9e07      	ldr	r6, [sp, #28]
 800745c:	ea43 0102 	orr.w	r1, r3, r2
 8007460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007462:	4319      	orrs	r1, r3
 8007464:	d110      	bne.n	8007488 <_dtoa_r+0xa20>
 8007466:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800746a:	d029      	beq.n	80074c0 <_dtoa_r+0xa58>
 800746c:	9b08      	ldr	r3, [sp, #32]
 800746e:	2b00      	cmp	r3, #0
 8007470:	dd02      	ble.n	8007478 <_dtoa_r+0xa10>
 8007472:	9b02      	ldr	r3, [sp, #8]
 8007474:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007478:	9b00      	ldr	r3, [sp, #0]
 800747a:	f883 8000 	strb.w	r8, [r3]
 800747e:	e63f      	b.n	8007100 <_dtoa_r+0x698>
 8007480:	4628      	mov	r0, r5
 8007482:	e7bb      	b.n	80073fc <_dtoa_r+0x994>
 8007484:	2201      	movs	r2, #1
 8007486:	e7e1      	b.n	800744c <_dtoa_r+0x9e4>
 8007488:	9b08      	ldr	r3, [sp, #32]
 800748a:	2b00      	cmp	r3, #0
 800748c:	db04      	blt.n	8007498 <_dtoa_r+0xa30>
 800748e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007490:	430b      	orrs	r3, r1
 8007492:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007494:	430b      	orrs	r3, r1
 8007496:	d120      	bne.n	80074da <_dtoa_r+0xa72>
 8007498:	2a00      	cmp	r2, #0
 800749a:	dded      	ble.n	8007478 <_dtoa_r+0xa10>
 800749c:	4649      	mov	r1, r9
 800749e:	2201      	movs	r2, #1
 80074a0:	4658      	mov	r0, fp
 80074a2:	f000 fbb3 	bl	8007c0c <__lshift>
 80074a6:	4621      	mov	r1, r4
 80074a8:	4681      	mov	r9, r0
 80074aa:	f000 fc1b 	bl	8007ce4 <__mcmp>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	dc03      	bgt.n	80074ba <_dtoa_r+0xa52>
 80074b2:	d1e1      	bne.n	8007478 <_dtoa_r+0xa10>
 80074b4:	f018 0f01 	tst.w	r8, #1
 80074b8:	d0de      	beq.n	8007478 <_dtoa_r+0xa10>
 80074ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074be:	d1d8      	bne.n	8007472 <_dtoa_r+0xa0a>
 80074c0:	9a00      	ldr	r2, [sp, #0]
 80074c2:	2339      	movs	r3, #57	@ 0x39
 80074c4:	7013      	strb	r3, [r2, #0]
 80074c6:	4633      	mov	r3, r6
 80074c8:	461e      	mov	r6, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80074d0:	2a39      	cmp	r2, #57	@ 0x39
 80074d2:	d052      	beq.n	800757a <_dtoa_r+0xb12>
 80074d4:	3201      	adds	r2, #1
 80074d6:	701a      	strb	r2, [r3, #0]
 80074d8:	e612      	b.n	8007100 <_dtoa_r+0x698>
 80074da:	2a00      	cmp	r2, #0
 80074dc:	dd07      	ble.n	80074ee <_dtoa_r+0xa86>
 80074de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074e2:	d0ed      	beq.n	80074c0 <_dtoa_r+0xa58>
 80074e4:	9a00      	ldr	r2, [sp, #0]
 80074e6:	f108 0301 	add.w	r3, r8, #1
 80074ea:	7013      	strb	r3, [r2, #0]
 80074ec:	e608      	b.n	8007100 <_dtoa_r+0x698>
 80074ee:	9b07      	ldr	r3, [sp, #28]
 80074f0:	9a07      	ldr	r2, [sp, #28]
 80074f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80074f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d028      	beq.n	800754e <_dtoa_r+0xae6>
 80074fc:	4649      	mov	r1, r9
 80074fe:	2300      	movs	r3, #0
 8007500:	220a      	movs	r2, #10
 8007502:	4658      	mov	r0, fp
 8007504:	f000 f9d6 	bl	80078b4 <__multadd>
 8007508:	42af      	cmp	r7, r5
 800750a:	4681      	mov	r9, r0
 800750c:	f04f 0300 	mov.w	r3, #0
 8007510:	f04f 020a 	mov.w	r2, #10
 8007514:	4639      	mov	r1, r7
 8007516:	4658      	mov	r0, fp
 8007518:	d107      	bne.n	800752a <_dtoa_r+0xac2>
 800751a:	f000 f9cb 	bl	80078b4 <__multadd>
 800751e:	4607      	mov	r7, r0
 8007520:	4605      	mov	r5, r0
 8007522:	9b07      	ldr	r3, [sp, #28]
 8007524:	3301      	adds	r3, #1
 8007526:	9307      	str	r3, [sp, #28]
 8007528:	e774      	b.n	8007414 <_dtoa_r+0x9ac>
 800752a:	f000 f9c3 	bl	80078b4 <__multadd>
 800752e:	4629      	mov	r1, r5
 8007530:	4607      	mov	r7, r0
 8007532:	2300      	movs	r3, #0
 8007534:	220a      	movs	r2, #10
 8007536:	4658      	mov	r0, fp
 8007538:	f000 f9bc 	bl	80078b4 <__multadd>
 800753c:	4605      	mov	r5, r0
 800753e:	e7f0      	b.n	8007522 <_dtoa_r+0xaba>
 8007540:	9b00      	ldr	r3, [sp, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	bfcc      	ite	gt
 8007546:	461e      	movgt	r6, r3
 8007548:	2601      	movle	r6, #1
 800754a:	4456      	add	r6, sl
 800754c:	2700      	movs	r7, #0
 800754e:	4649      	mov	r1, r9
 8007550:	2201      	movs	r2, #1
 8007552:	4658      	mov	r0, fp
 8007554:	f000 fb5a 	bl	8007c0c <__lshift>
 8007558:	4621      	mov	r1, r4
 800755a:	4681      	mov	r9, r0
 800755c:	f000 fbc2 	bl	8007ce4 <__mcmp>
 8007560:	2800      	cmp	r0, #0
 8007562:	dcb0      	bgt.n	80074c6 <_dtoa_r+0xa5e>
 8007564:	d102      	bne.n	800756c <_dtoa_r+0xb04>
 8007566:	f018 0f01 	tst.w	r8, #1
 800756a:	d1ac      	bne.n	80074c6 <_dtoa_r+0xa5e>
 800756c:	4633      	mov	r3, r6
 800756e:	461e      	mov	r6, r3
 8007570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007574:	2a30      	cmp	r2, #48	@ 0x30
 8007576:	d0fa      	beq.n	800756e <_dtoa_r+0xb06>
 8007578:	e5c2      	b.n	8007100 <_dtoa_r+0x698>
 800757a:	459a      	cmp	sl, r3
 800757c:	d1a4      	bne.n	80074c8 <_dtoa_r+0xa60>
 800757e:	9b04      	ldr	r3, [sp, #16]
 8007580:	3301      	adds	r3, #1
 8007582:	9304      	str	r3, [sp, #16]
 8007584:	2331      	movs	r3, #49	@ 0x31
 8007586:	f88a 3000 	strb.w	r3, [sl]
 800758a:	e5b9      	b.n	8007100 <_dtoa_r+0x698>
 800758c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800758e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80075ec <_dtoa_r+0xb84>
 8007592:	b11b      	cbz	r3, 800759c <_dtoa_r+0xb34>
 8007594:	f10a 0308 	add.w	r3, sl, #8
 8007598:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	4650      	mov	r0, sl
 800759e:	b019      	add	sp, #100	@ 0x64
 80075a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	f77f ae37 	ble.w	800721a <_dtoa_r+0x7b2>
 80075ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80075b0:	2001      	movs	r0, #1
 80075b2:	e655      	b.n	8007260 <_dtoa_r+0x7f8>
 80075b4:	9b00      	ldr	r3, [sp, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f77f aed6 	ble.w	8007368 <_dtoa_r+0x900>
 80075bc:	4656      	mov	r6, sl
 80075be:	4621      	mov	r1, r4
 80075c0:	4648      	mov	r0, r9
 80075c2:	f7ff f9c6 	bl	8006952 <quorem>
 80075c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80075ca:	f806 8b01 	strb.w	r8, [r6], #1
 80075ce:	9b00      	ldr	r3, [sp, #0]
 80075d0:	eba6 020a 	sub.w	r2, r6, sl
 80075d4:	4293      	cmp	r3, r2
 80075d6:	ddb3      	ble.n	8007540 <_dtoa_r+0xad8>
 80075d8:	4649      	mov	r1, r9
 80075da:	2300      	movs	r3, #0
 80075dc:	220a      	movs	r2, #10
 80075de:	4658      	mov	r0, fp
 80075e0:	f000 f968 	bl	80078b4 <__multadd>
 80075e4:	4681      	mov	r9, r0
 80075e6:	e7ea      	b.n	80075be <_dtoa_r+0xb56>
 80075e8:	08008a48 	.word	0x08008a48
 80075ec:	080089cc 	.word	0x080089cc

080075f0 <_free_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4605      	mov	r5, r0
 80075f4:	2900      	cmp	r1, #0
 80075f6:	d041      	beq.n	800767c <_free_r+0x8c>
 80075f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075fc:	1f0c      	subs	r4, r1, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	bfb8      	it	lt
 8007602:	18e4      	addlt	r4, r4, r3
 8007604:	f000 f8e8 	bl	80077d8 <__malloc_lock>
 8007608:	4a1d      	ldr	r2, [pc, #116]	@ (8007680 <_free_r+0x90>)
 800760a:	6813      	ldr	r3, [r2, #0]
 800760c:	b933      	cbnz	r3, 800761c <_free_r+0x2c>
 800760e:	6063      	str	r3, [r4, #4]
 8007610:	6014      	str	r4, [r2, #0]
 8007612:	4628      	mov	r0, r5
 8007614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007618:	f000 b8e4 	b.w	80077e4 <__malloc_unlock>
 800761c:	42a3      	cmp	r3, r4
 800761e:	d908      	bls.n	8007632 <_free_r+0x42>
 8007620:	6820      	ldr	r0, [r4, #0]
 8007622:	1821      	adds	r1, r4, r0
 8007624:	428b      	cmp	r3, r1
 8007626:	bf01      	itttt	eq
 8007628:	6819      	ldreq	r1, [r3, #0]
 800762a:	685b      	ldreq	r3, [r3, #4]
 800762c:	1809      	addeq	r1, r1, r0
 800762e:	6021      	streq	r1, [r4, #0]
 8007630:	e7ed      	b.n	800760e <_free_r+0x1e>
 8007632:	461a      	mov	r2, r3
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	b10b      	cbz	r3, 800763c <_free_r+0x4c>
 8007638:	42a3      	cmp	r3, r4
 800763a:	d9fa      	bls.n	8007632 <_free_r+0x42>
 800763c:	6811      	ldr	r1, [r2, #0]
 800763e:	1850      	adds	r0, r2, r1
 8007640:	42a0      	cmp	r0, r4
 8007642:	d10b      	bne.n	800765c <_free_r+0x6c>
 8007644:	6820      	ldr	r0, [r4, #0]
 8007646:	4401      	add	r1, r0
 8007648:	1850      	adds	r0, r2, r1
 800764a:	4283      	cmp	r3, r0
 800764c:	6011      	str	r1, [r2, #0]
 800764e:	d1e0      	bne.n	8007612 <_free_r+0x22>
 8007650:	6818      	ldr	r0, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	6053      	str	r3, [r2, #4]
 8007656:	4408      	add	r0, r1
 8007658:	6010      	str	r0, [r2, #0]
 800765a:	e7da      	b.n	8007612 <_free_r+0x22>
 800765c:	d902      	bls.n	8007664 <_free_r+0x74>
 800765e:	230c      	movs	r3, #12
 8007660:	602b      	str	r3, [r5, #0]
 8007662:	e7d6      	b.n	8007612 <_free_r+0x22>
 8007664:	6820      	ldr	r0, [r4, #0]
 8007666:	1821      	adds	r1, r4, r0
 8007668:	428b      	cmp	r3, r1
 800766a:	bf04      	itt	eq
 800766c:	6819      	ldreq	r1, [r3, #0]
 800766e:	685b      	ldreq	r3, [r3, #4]
 8007670:	6063      	str	r3, [r4, #4]
 8007672:	bf04      	itt	eq
 8007674:	1809      	addeq	r1, r1, r0
 8007676:	6021      	streq	r1, [r4, #0]
 8007678:	6054      	str	r4, [r2, #4]
 800767a:	e7ca      	b.n	8007612 <_free_r+0x22>
 800767c:	bd38      	pop	{r3, r4, r5, pc}
 800767e:	bf00      	nop
 8007680:	20000474 	.word	0x20000474

08007684 <malloc>:
 8007684:	4b02      	ldr	r3, [pc, #8]	@ (8007690 <malloc+0xc>)
 8007686:	4601      	mov	r1, r0
 8007688:	6818      	ldr	r0, [r3, #0]
 800768a:	f000 b825 	b.w	80076d8 <_malloc_r>
 800768e:	bf00      	nop
 8007690:	20000018 	.word	0x20000018

08007694 <sbrk_aligned>:
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	4e0f      	ldr	r6, [pc, #60]	@ (80076d4 <sbrk_aligned+0x40>)
 8007698:	460c      	mov	r4, r1
 800769a:	6831      	ldr	r1, [r6, #0]
 800769c:	4605      	mov	r5, r0
 800769e:	b911      	cbnz	r1, 80076a6 <sbrk_aligned+0x12>
 80076a0:	f000 fe9a 	bl	80083d8 <_sbrk_r>
 80076a4:	6030      	str	r0, [r6, #0]
 80076a6:	4621      	mov	r1, r4
 80076a8:	4628      	mov	r0, r5
 80076aa:	f000 fe95 	bl	80083d8 <_sbrk_r>
 80076ae:	1c43      	adds	r3, r0, #1
 80076b0:	d103      	bne.n	80076ba <sbrk_aligned+0x26>
 80076b2:	f04f 34ff 	mov.w	r4, #4294967295
 80076b6:	4620      	mov	r0, r4
 80076b8:	bd70      	pop	{r4, r5, r6, pc}
 80076ba:	1cc4      	adds	r4, r0, #3
 80076bc:	f024 0403 	bic.w	r4, r4, #3
 80076c0:	42a0      	cmp	r0, r4
 80076c2:	d0f8      	beq.n	80076b6 <sbrk_aligned+0x22>
 80076c4:	1a21      	subs	r1, r4, r0
 80076c6:	4628      	mov	r0, r5
 80076c8:	f000 fe86 	bl	80083d8 <_sbrk_r>
 80076cc:	3001      	adds	r0, #1
 80076ce:	d1f2      	bne.n	80076b6 <sbrk_aligned+0x22>
 80076d0:	e7ef      	b.n	80076b2 <sbrk_aligned+0x1e>
 80076d2:	bf00      	nop
 80076d4:	20000470 	.word	0x20000470

080076d8 <_malloc_r>:
 80076d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076dc:	1ccd      	adds	r5, r1, #3
 80076de:	f025 0503 	bic.w	r5, r5, #3
 80076e2:	3508      	adds	r5, #8
 80076e4:	2d0c      	cmp	r5, #12
 80076e6:	bf38      	it	cc
 80076e8:	250c      	movcc	r5, #12
 80076ea:	2d00      	cmp	r5, #0
 80076ec:	4606      	mov	r6, r0
 80076ee:	db01      	blt.n	80076f4 <_malloc_r+0x1c>
 80076f0:	42a9      	cmp	r1, r5
 80076f2:	d904      	bls.n	80076fe <_malloc_r+0x26>
 80076f4:	230c      	movs	r3, #12
 80076f6:	6033      	str	r3, [r6, #0]
 80076f8:	2000      	movs	r0, #0
 80076fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077d4 <_malloc_r+0xfc>
 8007702:	f000 f869 	bl	80077d8 <__malloc_lock>
 8007706:	f8d8 3000 	ldr.w	r3, [r8]
 800770a:	461c      	mov	r4, r3
 800770c:	bb44      	cbnz	r4, 8007760 <_malloc_r+0x88>
 800770e:	4629      	mov	r1, r5
 8007710:	4630      	mov	r0, r6
 8007712:	f7ff ffbf 	bl	8007694 <sbrk_aligned>
 8007716:	1c43      	adds	r3, r0, #1
 8007718:	4604      	mov	r4, r0
 800771a:	d158      	bne.n	80077ce <_malloc_r+0xf6>
 800771c:	f8d8 4000 	ldr.w	r4, [r8]
 8007720:	4627      	mov	r7, r4
 8007722:	2f00      	cmp	r7, #0
 8007724:	d143      	bne.n	80077ae <_malloc_r+0xd6>
 8007726:	2c00      	cmp	r4, #0
 8007728:	d04b      	beq.n	80077c2 <_malloc_r+0xea>
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	4639      	mov	r1, r7
 800772e:	4630      	mov	r0, r6
 8007730:	eb04 0903 	add.w	r9, r4, r3
 8007734:	f000 fe50 	bl	80083d8 <_sbrk_r>
 8007738:	4581      	cmp	r9, r0
 800773a:	d142      	bne.n	80077c2 <_malloc_r+0xea>
 800773c:	6821      	ldr	r1, [r4, #0]
 800773e:	1a6d      	subs	r5, r5, r1
 8007740:	4629      	mov	r1, r5
 8007742:	4630      	mov	r0, r6
 8007744:	f7ff ffa6 	bl	8007694 <sbrk_aligned>
 8007748:	3001      	adds	r0, #1
 800774a:	d03a      	beq.n	80077c2 <_malloc_r+0xea>
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	442b      	add	r3, r5
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	f8d8 3000 	ldr.w	r3, [r8]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	bb62      	cbnz	r2, 80077b4 <_malloc_r+0xdc>
 800775a:	f8c8 7000 	str.w	r7, [r8]
 800775e:	e00f      	b.n	8007780 <_malloc_r+0xa8>
 8007760:	6822      	ldr	r2, [r4, #0]
 8007762:	1b52      	subs	r2, r2, r5
 8007764:	d420      	bmi.n	80077a8 <_malloc_r+0xd0>
 8007766:	2a0b      	cmp	r2, #11
 8007768:	d917      	bls.n	800779a <_malloc_r+0xc2>
 800776a:	1961      	adds	r1, r4, r5
 800776c:	42a3      	cmp	r3, r4
 800776e:	6025      	str	r5, [r4, #0]
 8007770:	bf18      	it	ne
 8007772:	6059      	strne	r1, [r3, #4]
 8007774:	6863      	ldr	r3, [r4, #4]
 8007776:	bf08      	it	eq
 8007778:	f8c8 1000 	streq.w	r1, [r8]
 800777c:	5162      	str	r2, [r4, r5]
 800777e:	604b      	str	r3, [r1, #4]
 8007780:	4630      	mov	r0, r6
 8007782:	f000 f82f 	bl	80077e4 <__malloc_unlock>
 8007786:	f104 000b 	add.w	r0, r4, #11
 800778a:	1d23      	adds	r3, r4, #4
 800778c:	f020 0007 	bic.w	r0, r0, #7
 8007790:	1ac2      	subs	r2, r0, r3
 8007792:	bf1c      	itt	ne
 8007794:	1a1b      	subne	r3, r3, r0
 8007796:	50a3      	strne	r3, [r4, r2]
 8007798:	e7af      	b.n	80076fa <_malloc_r+0x22>
 800779a:	6862      	ldr	r2, [r4, #4]
 800779c:	42a3      	cmp	r3, r4
 800779e:	bf0c      	ite	eq
 80077a0:	f8c8 2000 	streq.w	r2, [r8]
 80077a4:	605a      	strne	r2, [r3, #4]
 80077a6:	e7eb      	b.n	8007780 <_malloc_r+0xa8>
 80077a8:	4623      	mov	r3, r4
 80077aa:	6864      	ldr	r4, [r4, #4]
 80077ac:	e7ae      	b.n	800770c <_malloc_r+0x34>
 80077ae:	463c      	mov	r4, r7
 80077b0:	687f      	ldr	r7, [r7, #4]
 80077b2:	e7b6      	b.n	8007722 <_malloc_r+0x4a>
 80077b4:	461a      	mov	r2, r3
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	d1fb      	bne.n	80077b4 <_malloc_r+0xdc>
 80077bc:	2300      	movs	r3, #0
 80077be:	6053      	str	r3, [r2, #4]
 80077c0:	e7de      	b.n	8007780 <_malloc_r+0xa8>
 80077c2:	230c      	movs	r3, #12
 80077c4:	6033      	str	r3, [r6, #0]
 80077c6:	4630      	mov	r0, r6
 80077c8:	f000 f80c 	bl	80077e4 <__malloc_unlock>
 80077cc:	e794      	b.n	80076f8 <_malloc_r+0x20>
 80077ce:	6005      	str	r5, [r0, #0]
 80077d0:	e7d6      	b.n	8007780 <_malloc_r+0xa8>
 80077d2:	bf00      	nop
 80077d4:	20000474 	.word	0x20000474

080077d8 <__malloc_lock>:
 80077d8:	4801      	ldr	r0, [pc, #4]	@ (80077e0 <__malloc_lock+0x8>)
 80077da:	f7ff b8aa 	b.w	8006932 <__retarget_lock_acquire_recursive>
 80077de:	bf00      	nop
 80077e0:	2000046c 	.word	0x2000046c

080077e4 <__malloc_unlock>:
 80077e4:	4801      	ldr	r0, [pc, #4]	@ (80077ec <__malloc_unlock+0x8>)
 80077e6:	f7ff b8a5 	b.w	8006934 <__retarget_lock_release_recursive>
 80077ea:	bf00      	nop
 80077ec:	2000046c 	.word	0x2000046c

080077f0 <_Balloc>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	69c6      	ldr	r6, [r0, #28]
 80077f4:	4604      	mov	r4, r0
 80077f6:	460d      	mov	r5, r1
 80077f8:	b976      	cbnz	r6, 8007818 <_Balloc+0x28>
 80077fa:	2010      	movs	r0, #16
 80077fc:	f7ff ff42 	bl	8007684 <malloc>
 8007800:	4602      	mov	r2, r0
 8007802:	61e0      	str	r0, [r4, #28]
 8007804:	b920      	cbnz	r0, 8007810 <_Balloc+0x20>
 8007806:	4b18      	ldr	r3, [pc, #96]	@ (8007868 <_Balloc+0x78>)
 8007808:	4818      	ldr	r0, [pc, #96]	@ (800786c <_Balloc+0x7c>)
 800780a:	216b      	movs	r1, #107	@ 0x6b
 800780c:	f000 fdf4 	bl	80083f8 <__assert_func>
 8007810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007814:	6006      	str	r6, [r0, #0]
 8007816:	60c6      	str	r6, [r0, #12]
 8007818:	69e6      	ldr	r6, [r4, #28]
 800781a:	68f3      	ldr	r3, [r6, #12]
 800781c:	b183      	cbz	r3, 8007840 <_Balloc+0x50>
 800781e:	69e3      	ldr	r3, [r4, #28]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007826:	b9b8      	cbnz	r0, 8007858 <_Balloc+0x68>
 8007828:	2101      	movs	r1, #1
 800782a:	fa01 f605 	lsl.w	r6, r1, r5
 800782e:	1d72      	adds	r2, r6, #5
 8007830:	0092      	lsls	r2, r2, #2
 8007832:	4620      	mov	r0, r4
 8007834:	f000 fdfe 	bl	8008434 <_calloc_r>
 8007838:	b160      	cbz	r0, 8007854 <_Balloc+0x64>
 800783a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800783e:	e00e      	b.n	800785e <_Balloc+0x6e>
 8007840:	2221      	movs	r2, #33	@ 0x21
 8007842:	2104      	movs	r1, #4
 8007844:	4620      	mov	r0, r4
 8007846:	f000 fdf5 	bl	8008434 <_calloc_r>
 800784a:	69e3      	ldr	r3, [r4, #28]
 800784c:	60f0      	str	r0, [r6, #12]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e4      	bne.n	800781e <_Balloc+0x2e>
 8007854:	2000      	movs	r0, #0
 8007856:	bd70      	pop	{r4, r5, r6, pc}
 8007858:	6802      	ldr	r2, [r0, #0]
 800785a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800785e:	2300      	movs	r3, #0
 8007860:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007864:	e7f7      	b.n	8007856 <_Balloc+0x66>
 8007866:	bf00      	nop
 8007868:	080089d9 	.word	0x080089d9
 800786c:	08008a59 	.word	0x08008a59

08007870 <_Bfree>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	69c6      	ldr	r6, [r0, #28]
 8007874:	4605      	mov	r5, r0
 8007876:	460c      	mov	r4, r1
 8007878:	b976      	cbnz	r6, 8007898 <_Bfree+0x28>
 800787a:	2010      	movs	r0, #16
 800787c:	f7ff ff02 	bl	8007684 <malloc>
 8007880:	4602      	mov	r2, r0
 8007882:	61e8      	str	r0, [r5, #28]
 8007884:	b920      	cbnz	r0, 8007890 <_Bfree+0x20>
 8007886:	4b09      	ldr	r3, [pc, #36]	@ (80078ac <_Bfree+0x3c>)
 8007888:	4809      	ldr	r0, [pc, #36]	@ (80078b0 <_Bfree+0x40>)
 800788a:	218f      	movs	r1, #143	@ 0x8f
 800788c:	f000 fdb4 	bl	80083f8 <__assert_func>
 8007890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007894:	6006      	str	r6, [r0, #0]
 8007896:	60c6      	str	r6, [r0, #12]
 8007898:	b13c      	cbz	r4, 80078aa <_Bfree+0x3a>
 800789a:	69eb      	ldr	r3, [r5, #28]
 800789c:	6862      	ldr	r2, [r4, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078a4:	6021      	str	r1, [r4, #0]
 80078a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078aa:	bd70      	pop	{r4, r5, r6, pc}
 80078ac:	080089d9 	.word	0x080089d9
 80078b0:	08008a59 	.word	0x08008a59

080078b4 <__multadd>:
 80078b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b8:	690d      	ldr	r5, [r1, #16]
 80078ba:	4607      	mov	r7, r0
 80078bc:	460c      	mov	r4, r1
 80078be:	461e      	mov	r6, r3
 80078c0:	f101 0c14 	add.w	ip, r1, #20
 80078c4:	2000      	movs	r0, #0
 80078c6:	f8dc 3000 	ldr.w	r3, [ip]
 80078ca:	b299      	uxth	r1, r3
 80078cc:	fb02 6101 	mla	r1, r2, r1, r6
 80078d0:	0c1e      	lsrs	r6, r3, #16
 80078d2:	0c0b      	lsrs	r3, r1, #16
 80078d4:	fb02 3306 	mla	r3, r2, r6, r3
 80078d8:	b289      	uxth	r1, r1
 80078da:	3001      	adds	r0, #1
 80078dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078e0:	4285      	cmp	r5, r0
 80078e2:	f84c 1b04 	str.w	r1, [ip], #4
 80078e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078ea:	dcec      	bgt.n	80078c6 <__multadd+0x12>
 80078ec:	b30e      	cbz	r6, 8007932 <__multadd+0x7e>
 80078ee:	68a3      	ldr	r3, [r4, #8]
 80078f0:	42ab      	cmp	r3, r5
 80078f2:	dc19      	bgt.n	8007928 <__multadd+0x74>
 80078f4:	6861      	ldr	r1, [r4, #4]
 80078f6:	4638      	mov	r0, r7
 80078f8:	3101      	adds	r1, #1
 80078fa:	f7ff ff79 	bl	80077f0 <_Balloc>
 80078fe:	4680      	mov	r8, r0
 8007900:	b928      	cbnz	r0, 800790e <__multadd+0x5a>
 8007902:	4602      	mov	r2, r0
 8007904:	4b0c      	ldr	r3, [pc, #48]	@ (8007938 <__multadd+0x84>)
 8007906:	480d      	ldr	r0, [pc, #52]	@ (800793c <__multadd+0x88>)
 8007908:	21ba      	movs	r1, #186	@ 0xba
 800790a:	f000 fd75 	bl	80083f8 <__assert_func>
 800790e:	6922      	ldr	r2, [r4, #16]
 8007910:	3202      	adds	r2, #2
 8007912:	f104 010c 	add.w	r1, r4, #12
 8007916:	0092      	lsls	r2, r2, #2
 8007918:	300c      	adds	r0, #12
 800791a:	f7ff f80c 	bl	8006936 <memcpy>
 800791e:	4621      	mov	r1, r4
 8007920:	4638      	mov	r0, r7
 8007922:	f7ff ffa5 	bl	8007870 <_Bfree>
 8007926:	4644      	mov	r4, r8
 8007928:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800792c:	3501      	adds	r5, #1
 800792e:	615e      	str	r6, [r3, #20]
 8007930:	6125      	str	r5, [r4, #16]
 8007932:	4620      	mov	r0, r4
 8007934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007938:	08008a48 	.word	0x08008a48
 800793c:	08008a59 	.word	0x08008a59

08007940 <__hi0bits>:
 8007940:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007944:	4603      	mov	r3, r0
 8007946:	bf36      	itet	cc
 8007948:	0403      	lslcc	r3, r0, #16
 800794a:	2000      	movcs	r0, #0
 800794c:	2010      	movcc	r0, #16
 800794e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007952:	bf3c      	itt	cc
 8007954:	021b      	lslcc	r3, r3, #8
 8007956:	3008      	addcc	r0, #8
 8007958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800795c:	bf3c      	itt	cc
 800795e:	011b      	lslcc	r3, r3, #4
 8007960:	3004      	addcc	r0, #4
 8007962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007966:	bf3c      	itt	cc
 8007968:	009b      	lslcc	r3, r3, #2
 800796a:	3002      	addcc	r0, #2
 800796c:	2b00      	cmp	r3, #0
 800796e:	db05      	blt.n	800797c <__hi0bits+0x3c>
 8007970:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007974:	f100 0001 	add.w	r0, r0, #1
 8007978:	bf08      	it	eq
 800797a:	2020      	moveq	r0, #32
 800797c:	4770      	bx	lr

0800797e <__lo0bits>:
 800797e:	6803      	ldr	r3, [r0, #0]
 8007980:	4602      	mov	r2, r0
 8007982:	f013 0007 	ands.w	r0, r3, #7
 8007986:	d00b      	beq.n	80079a0 <__lo0bits+0x22>
 8007988:	07d9      	lsls	r1, r3, #31
 800798a:	d421      	bmi.n	80079d0 <__lo0bits+0x52>
 800798c:	0798      	lsls	r0, r3, #30
 800798e:	bf49      	itett	mi
 8007990:	085b      	lsrmi	r3, r3, #1
 8007992:	089b      	lsrpl	r3, r3, #2
 8007994:	2001      	movmi	r0, #1
 8007996:	6013      	strmi	r3, [r2, #0]
 8007998:	bf5c      	itt	pl
 800799a:	6013      	strpl	r3, [r2, #0]
 800799c:	2002      	movpl	r0, #2
 800799e:	4770      	bx	lr
 80079a0:	b299      	uxth	r1, r3
 80079a2:	b909      	cbnz	r1, 80079a8 <__lo0bits+0x2a>
 80079a4:	0c1b      	lsrs	r3, r3, #16
 80079a6:	2010      	movs	r0, #16
 80079a8:	b2d9      	uxtb	r1, r3
 80079aa:	b909      	cbnz	r1, 80079b0 <__lo0bits+0x32>
 80079ac:	3008      	adds	r0, #8
 80079ae:	0a1b      	lsrs	r3, r3, #8
 80079b0:	0719      	lsls	r1, r3, #28
 80079b2:	bf04      	itt	eq
 80079b4:	091b      	lsreq	r3, r3, #4
 80079b6:	3004      	addeq	r0, #4
 80079b8:	0799      	lsls	r1, r3, #30
 80079ba:	bf04      	itt	eq
 80079bc:	089b      	lsreq	r3, r3, #2
 80079be:	3002      	addeq	r0, #2
 80079c0:	07d9      	lsls	r1, r3, #31
 80079c2:	d403      	bmi.n	80079cc <__lo0bits+0x4e>
 80079c4:	085b      	lsrs	r3, r3, #1
 80079c6:	f100 0001 	add.w	r0, r0, #1
 80079ca:	d003      	beq.n	80079d4 <__lo0bits+0x56>
 80079cc:	6013      	str	r3, [r2, #0]
 80079ce:	4770      	bx	lr
 80079d0:	2000      	movs	r0, #0
 80079d2:	4770      	bx	lr
 80079d4:	2020      	movs	r0, #32
 80079d6:	4770      	bx	lr

080079d8 <__i2b>:
 80079d8:	b510      	push	{r4, lr}
 80079da:	460c      	mov	r4, r1
 80079dc:	2101      	movs	r1, #1
 80079de:	f7ff ff07 	bl	80077f0 <_Balloc>
 80079e2:	4602      	mov	r2, r0
 80079e4:	b928      	cbnz	r0, 80079f2 <__i2b+0x1a>
 80079e6:	4b05      	ldr	r3, [pc, #20]	@ (80079fc <__i2b+0x24>)
 80079e8:	4805      	ldr	r0, [pc, #20]	@ (8007a00 <__i2b+0x28>)
 80079ea:	f240 1145 	movw	r1, #325	@ 0x145
 80079ee:	f000 fd03 	bl	80083f8 <__assert_func>
 80079f2:	2301      	movs	r3, #1
 80079f4:	6144      	str	r4, [r0, #20]
 80079f6:	6103      	str	r3, [r0, #16]
 80079f8:	bd10      	pop	{r4, pc}
 80079fa:	bf00      	nop
 80079fc:	08008a48 	.word	0x08008a48
 8007a00:	08008a59 	.word	0x08008a59

08007a04 <__multiply>:
 8007a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a08:	4614      	mov	r4, r2
 8007a0a:	690a      	ldr	r2, [r1, #16]
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	bfa8      	it	ge
 8007a12:	4623      	movge	r3, r4
 8007a14:	460f      	mov	r7, r1
 8007a16:	bfa4      	itt	ge
 8007a18:	460c      	movge	r4, r1
 8007a1a:	461f      	movge	r7, r3
 8007a1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a24:	68a3      	ldr	r3, [r4, #8]
 8007a26:	6861      	ldr	r1, [r4, #4]
 8007a28:	eb0a 0609 	add.w	r6, sl, r9
 8007a2c:	42b3      	cmp	r3, r6
 8007a2e:	b085      	sub	sp, #20
 8007a30:	bfb8      	it	lt
 8007a32:	3101      	addlt	r1, #1
 8007a34:	f7ff fedc 	bl	80077f0 <_Balloc>
 8007a38:	b930      	cbnz	r0, 8007a48 <__multiply+0x44>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	4b44      	ldr	r3, [pc, #272]	@ (8007b50 <__multiply+0x14c>)
 8007a3e:	4845      	ldr	r0, [pc, #276]	@ (8007b54 <__multiply+0x150>)
 8007a40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a44:	f000 fcd8 	bl	80083f8 <__assert_func>
 8007a48:	f100 0514 	add.w	r5, r0, #20
 8007a4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a50:	462b      	mov	r3, r5
 8007a52:	2200      	movs	r2, #0
 8007a54:	4543      	cmp	r3, r8
 8007a56:	d321      	bcc.n	8007a9c <__multiply+0x98>
 8007a58:	f107 0114 	add.w	r1, r7, #20
 8007a5c:	f104 0214 	add.w	r2, r4, #20
 8007a60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a68:	9302      	str	r3, [sp, #8]
 8007a6a:	1b13      	subs	r3, r2, r4
 8007a6c:	3b15      	subs	r3, #21
 8007a6e:	f023 0303 	bic.w	r3, r3, #3
 8007a72:	3304      	adds	r3, #4
 8007a74:	f104 0715 	add.w	r7, r4, #21
 8007a78:	42ba      	cmp	r2, r7
 8007a7a:	bf38      	it	cc
 8007a7c:	2304      	movcc	r3, #4
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	9b02      	ldr	r3, [sp, #8]
 8007a82:	9103      	str	r1, [sp, #12]
 8007a84:	428b      	cmp	r3, r1
 8007a86:	d80c      	bhi.n	8007aa2 <__multiply+0x9e>
 8007a88:	2e00      	cmp	r6, #0
 8007a8a:	dd03      	ble.n	8007a94 <__multiply+0x90>
 8007a8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d05b      	beq.n	8007b4c <__multiply+0x148>
 8007a94:	6106      	str	r6, [r0, #16]
 8007a96:	b005      	add	sp, #20
 8007a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9c:	f843 2b04 	str.w	r2, [r3], #4
 8007aa0:	e7d8      	b.n	8007a54 <__multiply+0x50>
 8007aa2:	f8b1 a000 	ldrh.w	sl, [r1]
 8007aa6:	f1ba 0f00 	cmp.w	sl, #0
 8007aaa:	d024      	beq.n	8007af6 <__multiply+0xf2>
 8007aac:	f104 0e14 	add.w	lr, r4, #20
 8007ab0:	46a9      	mov	r9, r5
 8007ab2:	f04f 0c00 	mov.w	ip, #0
 8007ab6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007aba:	f8d9 3000 	ldr.w	r3, [r9]
 8007abe:	fa1f fb87 	uxth.w	fp, r7
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ac8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007acc:	f8d9 7000 	ldr.w	r7, [r9]
 8007ad0:	4463      	add	r3, ip
 8007ad2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ad6:	fb0a c70b 	mla	r7, sl, fp, ip
 8007ada:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ae4:	4572      	cmp	r2, lr
 8007ae6:	f849 3b04 	str.w	r3, [r9], #4
 8007aea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007aee:	d8e2      	bhi.n	8007ab6 <__multiply+0xb2>
 8007af0:	9b01      	ldr	r3, [sp, #4]
 8007af2:	f845 c003 	str.w	ip, [r5, r3]
 8007af6:	9b03      	ldr	r3, [sp, #12]
 8007af8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007afc:	3104      	adds	r1, #4
 8007afe:	f1b9 0f00 	cmp.w	r9, #0
 8007b02:	d021      	beq.n	8007b48 <__multiply+0x144>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	f104 0c14 	add.w	ip, r4, #20
 8007b0a:	46ae      	mov	lr, r5
 8007b0c:	f04f 0a00 	mov.w	sl, #0
 8007b10:	f8bc b000 	ldrh.w	fp, [ip]
 8007b14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007b18:	fb09 770b 	mla	r7, r9, fp, r7
 8007b1c:	4457      	add	r7, sl
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b24:	f84e 3b04 	str.w	r3, [lr], #4
 8007b28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b30:	f8be 3000 	ldrh.w	r3, [lr]
 8007b34:	fb09 330a 	mla	r3, r9, sl, r3
 8007b38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b3c:	4562      	cmp	r2, ip
 8007b3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b42:	d8e5      	bhi.n	8007b10 <__multiply+0x10c>
 8007b44:	9f01      	ldr	r7, [sp, #4]
 8007b46:	51eb      	str	r3, [r5, r7]
 8007b48:	3504      	adds	r5, #4
 8007b4a:	e799      	b.n	8007a80 <__multiply+0x7c>
 8007b4c:	3e01      	subs	r6, #1
 8007b4e:	e79b      	b.n	8007a88 <__multiply+0x84>
 8007b50:	08008a48 	.word	0x08008a48
 8007b54:	08008a59 	.word	0x08008a59

08007b58 <__pow5mult>:
 8007b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b5c:	4615      	mov	r5, r2
 8007b5e:	f012 0203 	ands.w	r2, r2, #3
 8007b62:	4607      	mov	r7, r0
 8007b64:	460e      	mov	r6, r1
 8007b66:	d007      	beq.n	8007b78 <__pow5mult+0x20>
 8007b68:	4c25      	ldr	r4, [pc, #148]	@ (8007c00 <__pow5mult+0xa8>)
 8007b6a:	3a01      	subs	r2, #1
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b72:	f7ff fe9f 	bl	80078b4 <__multadd>
 8007b76:	4606      	mov	r6, r0
 8007b78:	10ad      	asrs	r5, r5, #2
 8007b7a:	d03d      	beq.n	8007bf8 <__pow5mult+0xa0>
 8007b7c:	69fc      	ldr	r4, [r7, #28]
 8007b7e:	b97c      	cbnz	r4, 8007ba0 <__pow5mult+0x48>
 8007b80:	2010      	movs	r0, #16
 8007b82:	f7ff fd7f 	bl	8007684 <malloc>
 8007b86:	4602      	mov	r2, r0
 8007b88:	61f8      	str	r0, [r7, #28]
 8007b8a:	b928      	cbnz	r0, 8007b98 <__pow5mult+0x40>
 8007b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8007c04 <__pow5mult+0xac>)
 8007b8e:	481e      	ldr	r0, [pc, #120]	@ (8007c08 <__pow5mult+0xb0>)
 8007b90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b94:	f000 fc30 	bl	80083f8 <__assert_func>
 8007b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b9c:	6004      	str	r4, [r0, #0]
 8007b9e:	60c4      	str	r4, [r0, #12]
 8007ba0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ba8:	b94c      	cbnz	r4, 8007bbe <__pow5mult+0x66>
 8007baa:	f240 2171 	movw	r1, #625	@ 0x271
 8007bae:	4638      	mov	r0, r7
 8007bb0:	f7ff ff12 	bl	80079d8 <__i2b>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bba:	4604      	mov	r4, r0
 8007bbc:	6003      	str	r3, [r0, #0]
 8007bbe:	f04f 0900 	mov.w	r9, #0
 8007bc2:	07eb      	lsls	r3, r5, #31
 8007bc4:	d50a      	bpl.n	8007bdc <__pow5mult+0x84>
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	4622      	mov	r2, r4
 8007bca:	4638      	mov	r0, r7
 8007bcc:	f7ff ff1a 	bl	8007a04 <__multiply>
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4680      	mov	r8, r0
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	f7ff fe4b 	bl	8007870 <_Bfree>
 8007bda:	4646      	mov	r6, r8
 8007bdc:	106d      	asrs	r5, r5, #1
 8007bde:	d00b      	beq.n	8007bf8 <__pow5mult+0xa0>
 8007be0:	6820      	ldr	r0, [r4, #0]
 8007be2:	b938      	cbnz	r0, 8007bf4 <__pow5mult+0x9c>
 8007be4:	4622      	mov	r2, r4
 8007be6:	4621      	mov	r1, r4
 8007be8:	4638      	mov	r0, r7
 8007bea:	f7ff ff0b 	bl	8007a04 <__multiply>
 8007bee:	6020      	str	r0, [r4, #0]
 8007bf0:	f8c0 9000 	str.w	r9, [r0]
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	e7e4      	b.n	8007bc2 <__pow5mult+0x6a>
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bfe:	bf00      	nop
 8007c00:	08008ab4 	.word	0x08008ab4
 8007c04:	080089d9 	.word	0x080089d9
 8007c08:	08008a59 	.word	0x08008a59

08007c0c <__lshift>:
 8007c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c10:	460c      	mov	r4, r1
 8007c12:	6849      	ldr	r1, [r1, #4]
 8007c14:	6923      	ldr	r3, [r4, #16]
 8007c16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c1a:	68a3      	ldr	r3, [r4, #8]
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	4691      	mov	r9, r2
 8007c20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c24:	f108 0601 	add.w	r6, r8, #1
 8007c28:	42b3      	cmp	r3, r6
 8007c2a:	db0b      	blt.n	8007c44 <__lshift+0x38>
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	f7ff fddf 	bl	80077f0 <_Balloc>
 8007c32:	4605      	mov	r5, r0
 8007c34:	b948      	cbnz	r0, 8007c4a <__lshift+0x3e>
 8007c36:	4602      	mov	r2, r0
 8007c38:	4b28      	ldr	r3, [pc, #160]	@ (8007cdc <__lshift+0xd0>)
 8007c3a:	4829      	ldr	r0, [pc, #164]	@ (8007ce0 <__lshift+0xd4>)
 8007c3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c40:	f000 fbda 	bl	80083f8 <__assert_func>
 8007c44:	3101      	adds	r1, #1
 8007c46:	005b      	lsls	r3, r3, #1
 8007c48:	e7ee      	b.n	8007c28 <__lshift+0x1c>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f100 0114 	add.w	r1, r0, #20
 8007c50:	f100 0210 	add.w	r2, r0, #16
 8007c54:	4618      	mov	r0, r3
 8007c56:	4553      	cmp	r3, sl
 8007c58:	db33      	blt.n	8007cc2 <__lshift+0xb6>
 8007c5a:	6920      	ldr	r0, [r4, #16]
 8007c5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c60:	f104 0314 	add.w	r3, r4, #20
 8007c64:	f019 091f 	ands.w	r9, r9, #31
 8007c68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c70:	d02b      	beq.n	8007cca <__lshift+0xbe>
 8007c72:	f1c9 0e20 	rsb	lr, r9, #32
 8007c76:	468a      	mov	sl, r1
 8007c78:	2200      	movs	r2, #0
 8007c7a:	6818      	ldr	r0, [r3, #0]
 8007c7c:	fa00 f009 	lsl.w	r0, r0, r9
 8007c80:	4310      	orrs	r0, r2
 8007c82:	f84a 0b04 	str.w	r0, [sl], #4
 8007c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c8a:	459c      	cmp	ip, r3
 8007c8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c90:	d8f3      	bhi.n	8007c7a <__lshift+0x6e>
 8007c92:	ebac 0304 	sub.w	r3, ip, r4
 8007c96:	3b15      	subs	r3, #21
 8007c98:	f023 0303 	bic.w	r3, r3, #3
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	f104 0015 	add.w	r0, r4, #21
 8007ca2:	4584      	cmp	ip, r0
 8007ca4:	bf38      	it	cc
 8007ca6:	2304      	movcc	r3, #4
 8007ca8:	50ca      	str	r2, [r1, r3]
 8007caa:	b10a      	cbz	r2, 8007cb0 <__lshift+0xa4>
 8007cac:	f108 0602 	add.w	r6, r8, #2
 8007cb0:	3e01      	subs	r6, #1
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	612e      	str	r6, [r5, #16]
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	f7ff fdda 	bl	8007870 <_Bfree>
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	e7c5      	b.n	8007c56 <__lshift+0x4a>
 8007cca:	3904      	subs	r1, #4
 8007ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cd4:	459c      	cmp	ip, r3
 8007cd6:	d8f9      	bhi.n	8007ccc <__lshift+0xc0>
 8007cd8:	e7ea      	b.n	8007cb0 <__lshift+0xa4>
 8007cda:	bf00      	nop
 8007cdc:	08008a48 	.word	0x08008a48
 8007ce0:	08008a59 	.word	0x08008a59

08007ce4 <__mcmp>:
 8007ce4:	690a      	ldr	r2, [r1, #16]
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	6900      	ldr	r0, [r0, #16]
 8007cea:	1a80      	subs	r0, r0, r2
 8007cec:	b530      	push	{r4, r5, lr}
 8007cee:	d10e      	bne.n	8007d0e <__mcmp+0x2a>
 8007cf0:	3314      	adds	r3, #20
 8007cf2:	3114      	adds	r1, #20
 8007cf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007cfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d04:	4295      	cmp	r5, r2
 8007d06:	d003      	beq.n	8007d10 <__mcmp+0x2c>
 8007d08:	d205      	bcs.n	8007d16 <__mcmp+0x32>
 8007d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0e:	bd30      	pop	{r4, r5, pc}
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	d3f3      	bcc.n	8007cfc <__mcmp+0x18>
 8007d14:	e7fb      	b.n	8007d0e <__mcmp+0x2a>
 8007d16:	2001      	movs	r0, #1
 8007d18:	e7f9      	b.n	8007d0e <__mcmp+0x2a>
	...

08007d1c <__mdiff>:
 8007d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d20:	4689      	mov	r9, r1
 8007d22:	4606      	mov	r6, r0
 8007d24:	4611      	mov	r1, r2
 8007d26:	4648      	mov	r0, r9
 8007d28:	4614      	mov	r4, r2
 8007d2a:	f7ff ffdb 	bl	8007ce4 <__mcmp>
 8007d2e:	1e05      	subs	r5, r0, #0
 8007d30:	d112      	bne.n	8007d58 <__mdiff+0x3c>
 8007d32:	4629      	mov	r1, r5
 8007d34:	4630      	mov	r0, r6
 8007d36:	f7ff fd5b 	bl	80077f0 <_Balloc>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	b928      	cbnz	r0, 8007d4a <__mdiff+0x2e>
 8007d3e:	4b3f      	ldr	r3, [pc, #252]	@ (8007e3c <__mdiff+0x120>)
 8007d40:	f240 2137 	movw	r1, #567	@ 0x237
 8007d44:	483e      	ldr	r0, [pc, #248]	@ (8007e40 <__mdiff+0x124>)
 8007d46:	f000 fb57 	bl	80083f8 <__assert_func>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d50:	4610      	mov	r0, r2
 8007d52:	b003      	add	sp, #12
 8007d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d58:	bfbc      	itt	lt
 8007d5a:	464b      	movlt	r3, r9
 8007d5c:	46a1      	movlt	r9, r4
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d64:	bfba      	itte	lt
 8007d66:	461c      	movlt	r4, r3
 8007d68:	2501      	movlt	r5, #1
 8007d6a:	2500      	movge	r5, #0
 8007d6c:	f7ff fd40 	bl	80077f0 <_Balloc>
 8007d70:	4602      	mov	r2, r0
 8007d72:	b918      	cbnz	r0, 8007d7c <__mdiff+0x60>
 8007d74:	4b31      	ldr	r3, [pc, #196]	@ (8007e3c <__mdiff+0x120>)
 8007d76:	f240 2145 	movw	r1, #581	@ 0x245
 8007d7a:	e7e3      	b.n	8007d44 <__mdiff+0x28>
 8007d7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d80:	6926      	ldr	r6, [r4, #16]
 8007d82:	60c5      	str	r5, [r0, #12]
 8007d84:	f109 0310 	add.w	r3, r9, #16
 8007d88:	f109 0514 	add.w	r5, r9, #20
 8007d8c:	f104 0e14 	add.w	lr, r4, #20
 8007d90:	f100 0b14 	add.w	fp, r0, #20
 8007d94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	46d9      	mov	r9, fp
 8007da0:	f04f 0c00 	mov.w	ip, #0
 8007da4:	9b01      	ldr	r3, [sp, #4]
 8007da6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007daa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	fa1f f38a 	uxth.w	r3, sl
 8007db4:	4619      	mov	r1, r3
 8007db6:	b283      	uxth	r3, r0
 8007db8:	1acb      	subs	r3, r1, r3
 8007dba:	0c00      	lsrs	r0, r0, #16
 8007dbc:	4463      	add	r3, ip
 8007dbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007dc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007dcc:	4576      	cmp	r6, lr
 8007dce:	f849 3b04 	str.w	r3, [r9], #4
 8007dd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dd6:	d8e5      	bhi.n	8007da4 <__mdiff+0x88>
 8007dd8:	1b33      	subs	r3, r6, r4
 8007dda:	3b15      	subs	r3, #21
 8007ddc:	f023 0303 	bic.w	r3, r3, #3
 8007de0:	3415      	adds	r4, #21
 8007de2:	3304      	adds	r3, #4
 8007de4:	42a6      	cmp	r6, r4
 8007de6:	bf38      	it	cc
 8007de8:	2304      	movcc	r3, #4
 8007dea:	441d      	add	r5, r3
 8007dec:	445b      	add	r3, fp
 8007dee:	461e      	mov	r6, r3
 8007df0:	462c      	mov	r4, r5
 8007df2:	4544      	cmp	r4, r8
 8007df4:	d30e      	bcc.n	8007e14 <__mdiff+0xf8>
 8007df6:	f108 0103 	add.w	r1, r8, #3
 8007dfa:	1b49      	subs	r1, r1, r5
 8007dfc:	f021 0103 	bic.w	r1, r1, #3
 8007e00:	3d03      	subs	r5, #3
 8007e02:	45a8      	cmp	r8, r5
 8007e04:	bf38      	it	cc
 8007e06:	2100      	movcc	r1, #0
 8007e08:	440b      	add	r3, r1
 8007e0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e0e:	b191      	cbz	r1, 8007e36 <__mdiff+0x11a>
 8007e10:	6117      	str	r7, [r2, #16]
 8007e12:	e79d      	b.n	8007d50 <__mdiff+0x34>
 8007e14:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e18:	46e6      	mov	lr, ip
 8007e1a:	0c08      	lsrs	r0, r1, #16
 8007e1c:	fa1c fc81 	uxtah	ip, ip, r1
 8007e20:	4471      	add	r1, lr
 8007e22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e26:	b289      	uxth	r1, r1
 8007e28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e2c:	f846 1b04 	str.w	r1, [r6], #4
 8007e30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e34:	e7dd      	b.n	8007df2 <__mdiff+0xd6>
 8007e36:	3f01      	subs	r7, #1
 8007e38:	e7e7      	b.n	8007e0a <__mdiff+0xee>
 8007e3a:	bf00      	nop
 8007e3c:	08008a48 	.word	0x08008a48
 8007e40:	08008a59 	.word	0x08008a59

08007e44 <__d2b>:
 8007e44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e48:	460f      	mov	r7, r1
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	ec59 8b10 	vmov	r8, r9, d0
 8007e50:	4616      	mov	r6, r2
 8007e52:	f7ff fccd 	bl	80077f0 <_Balloc>
 8007e56:	4604      	mov	r4, r0
 8007e58:	b930      	cbnz	r0, 8007e68 <__d2b+0x24>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	4b23      	ldr	r3, [pc, #140]	@ (8007eec <__d2b+0xa8>)
 8007e5e:	4824      	ldr	r0, [pc, #144]	@ (8007ef0 <__d2b+0xac>)
 8007e60:	f240 310f 	movw	r1, #783	@ 0x30f
 8007e64:	f000 fac8 	bl	80083f8 <__assert_func>
 8007e68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e70:	b10d      	cbz	r5, 8007e76 <__d2b+0x32>
 8007e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e76:	9301      	str	r3, [sp, #4]
 8007e78:	f1b8 0300 	subs.w	r3, r8, #0
 8007e7c:	d023      	beq.n	8007ec6 <__d2b+0x82>
 8007e7e:	4668      	mov	r0, sp
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	f7ff fd7c 	bl	800797e <__lo0bits>
 8007e86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e8a:	b1d0      	cbz	r0, 8007ec2 <__d2b+0x7e>
 8007e8c:	f1c0 0320 	rsb	r3, r0, #32
 8007e90:	fa02 f303 	lsl.w	r3, r2, r3
 8007e94:	430b      	orrs	r3, r1
 8007e96:	40c2      	lsrs	r2, r0
 8007e98:	6163      	str	r3, [r4, #20]
 8007e9a:	9201      	str	r2, [sp, #4]
 8007e9c:	9b01      	ldr	r3, [sp, #4]
 8007e9e:	61a3      	str	r3, [r4, #24]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	bf0c      	ite	eq
 8007ea4:	2201      	moveq	r2, #1
 8007ea6:	2202      	movne	r2, #2
 8007ea8:	6122      	str	r2, [r4, #16]
 8007eaa:	b1a5      	cbz	r5, 8007ed6 <__d2b+0x92>
 8007eac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007eb0:	4405      	add	r5, r0
 8007eb2:	603d      	str	r5, [r7, #0]
 8007eb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007eb8:	6030      	str	r0, [r6, #0]
 8007eba:	4620      	mov	r0, r4
 8007ebc:	b003      	add	sp, #12
 8007ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ec2:	6161      	str	r1, [r4, #20]
 8007ec4:	e7ea      	b.n	8007e9c <__d2b+0x58>
 8007ec6:	a801      	add	r0, sp, #4
 8007ec8:	f7ff fd59 	bl	800797e <__lo0bits>
 8007ecc:	9b01      	ldr	r3, [sp, #4]
 8007ece:	6163      	str	r3, [r4, #20]
 8007ed0:	3020      	adds	r0, #32
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	e7e8      	b.n	8007ea8 <__d2b+0x64>
 8007ed6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007eda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ede:	6038      	str	r0, [r7, #0]
 8007ee0:	6918      	ldr	r0, [r3, #16]
 8007ee2:	f7ff fd2d 	bl	8007940 <__hi0bits>
 8007ee6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007eea:	e7e5      	b.n	8007eb8 <__d2b+0x74>
 8007eec:	08008a48 	.word	0x08008a48
 8007ef0:	08008a59 	.word	0x08008a59

08007ef4 <__sfputc_r>:
 8007ef4:	6893      	ldr	r3, [r2, #8]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	b410      	push	{r4}
 8007efc:	6093      	str	r3, [r2, #8]
 8007efe:	da08      	bge.n	8007f12 <__sfputc_r+0x1e>
 8007f00:	6994      	ldr	r4, [r2, #24]
 8007f02:	42a3      	cmp	r3, r4
 8007f04:	db01      	blt.n	8007f0a <__sfputc_r+0x16>
 8007f06:	290a      	cmp	r1, #10
 8007f08:	d103      	bne.n	8007f12 <__sfputc_r+0x1e>
 8007f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f0e:	f7fe bbfe 	b.w	800670e <__swbuf_r>
 8007f12:	6813      	ldr	r3, [r2, #0]
 8007f14:	1c58      	adds	r0, r3, #1
 8007f16:	6010      	str	r0, [r2, #0]
 8007f18:	7019      	strb	r1, [r3, #0]
 8007f1a:	4608      	mov	r0, r1
 8007f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <__sfputs_r>:
 8007f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f24:	4606      	mov	r6, r0
 8007f26:	460f      	mov	r7, r1
 8007f28:	4614      	mov	r4, r2
 8007f2a:	18d5      	adds	r5, r2, r3
 8007f2c:	42ac      	cmp	r4, r5
 8007f2e:	d101      	bne.n	8007f34 <__sfputs_r+0x12>
 8007f30:	2000      	movs	r0, #0
 8007f32:	e007      	b.n	8007f44 <__sfputs_r+0x22>
 8007f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f38:	463a      	mov	r2, r7
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7ff ffda 	bl	8007ef4 <__sfputc_r>
 8007f40:	1c43      	adds	r3, r0, #1
 8007f42:	d1f3      	bne.n	8007f2c <__sfputs_r+0xa>
 8007f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f48 <_vfiprintf_r>:
 8007f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	460d      	mov	r5, r1
 8007f4e:	b09d      	sub	sp, #116	@ 0x74
 8007f50:	4614      	mov	r4, r2
 8007f52:	4698      	mov	r8, r3
 8007f54:	4606      	mov	r6, r0
 8007f56:	b118      	cbz	r0, 8007f60 <_vfiprintf_r+0x18>
 8007f58:	6a03      	ldr	r3, [r0, #32]
 8007f5a:	b90b      	cbnz	r3, 8007f60 <_vfiprintf_r+0x18>
 8007f5c:	f7fe faee 	bl	800653c <__sinit>
 8007f60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f62:	07d9      	lsls	r1, r3, #31
 8007f64:	d405      	bmi.n	8007f72 <_vfiprintf_r+0x2a>
 8007f66:	89ab      	ldrh	r3, [r5, #12]
 8007f68:	059a      	lsls	r2, r3, #22
 8007f6a:	d402      	bmi.n	8007f72 <_vfiprintf_r+0x2a>
 8007f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f6e:	f7fe fce0 	bl	8006932 <__retarget_lock_acquire_recursive>
 8007f72:	89ab      	ldrh	r3, [r5, #12]
 8007f74:	071b      	lsls	r3, r3, #28
 8007f76:	d501      	bpl.n	8007f7c <_vfiprintf_r+0x34>
 8007f78:	692b      	ldr	r3, [r5, #16]
 8007f7a:	b99b      	cbnz	r3, 8007fa4 <_vfiprintf_r+0x5c>
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	4630      	mov	r0, r6
 8007f80:	f7fe fc04 	bl	800678c <__swsetup_r>
 8007f84:	b170      	cbz	r0, 8007fa4 <_vfiprintf_r+0x5c>
 8007f86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f88:	07dc      	lsls	r4, r3, #31
 8007f8a:	d504      	bpl.n	8007f96 <_vfiprintf_r+0x4e>
 8007f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f90:	b01d      	add	sp, #116	@ 0x74
 8007f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f96:	89ab      	ldrh	r3, [r5, #12]
 8007f98:	0598      	lsls	r0, r3, #22
 8007f9a:	d4f7      	bmi.n	8007f8c <_vfiprintf_r+0x44>
 8007f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f9e:	f7fe fcc9 	bl	8006934 <__retarget_lock_release_recursive>
 8007fa2:	e7f3      	b.n	8007f8c <_vfiprintf_r+0x44>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fa8:	2320      	movs	r3, #32
 8007faa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fb2:	2330      	movs	r3, #48	@ 0x30
 8007fb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008164 <_vfiprintf_r+0x21c>
 8007fb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fbc:	f04f 0901 	mov.w	r9, #1
 8007fc0:	4623      	mov	r3, r4
 8007fc2:	469a      	mov	sl, r3
 8007fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fc8:	b10a      	cbz	r2, 8007fce <_vfiprintf_r+0x86>
 8007fca:	2a25      	cmp	r2, #37	@ 0x25
 8007fcc:	d1f9      	bne.n	8007fc2 <_vfiprintf_r+0x7a>
 8007fce:	ebba 0b04 	subs.w	fp, sl, r4
 8007fd2:	d00b      	beq.n	8007fec <_vfiprintf_r+0xa4>
 8007fd4:	465b      	mov	r3, fp
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f7ff ffa1 	bl	8007f22 <__sfputs_r>
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	f000 80a7 	beq.w	8008134 <_vfiprintf_r+0x1ec>
 8007fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fe8:	445a      	add	r2, fp
 8007fea:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fec:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 809f 	beq.w	8008134 <_vfiprintf_r+0x1ec>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008000:	f10a 0a01 	add.w	sl, sl, #1
 8008004:	9304      	str	r3, [sp, #16]
 8008006:	9307      	str	r3, [sp, #28]
 8008008:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800800c:	931a      	str	r3, [sp, #104]	@ 0x68
 800800e:	4654      	mov	r4, sl
 8008010:	2205      	movs	r2, #5
 8008012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008016:	4853      	ldr	r0, [pc, #332]	@ (8008164 <_vfiprintf_r+0x21c>)
 8008018:	f7f8 f8f2 	bl	8000200 <memchr>
 800801c:	9a04      	ldr	r2, [sp, #16]
 800801e:	b9d8      	cbnz	r0, 8008058 <_vfiprintf_r+0x110>
 8008020:	06d1      	lsls	r1, r2, #27
 8008022:	bf44      	itt	mi
 8008024:	2320      	movmi	r3, #32
 8008026:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800802a:	0713      	lsls	r3, r2, #28
 800802c:	bf44      	itt	mi
 800802e:	232b      	movmi	r3, #43	@ 0x2b
 8008030:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008034:	f89a 3000 	ldrb.w	r3, [sl]
 8008038:	2b2a      	cmp	r3, #42	@ 0x2a
 800803a:	d015      	beq.n	8008068 <_vfiprintf_r+0x120>
 800803c:	9a07      	ldr	r2, [sp, #28]
 800803e:	4654      	mov	r4, sl
 8008040:	2000      	movs	r0, #0
 8008042:	f04f 0c0a 	mov.w	ip, #10
 8008046:	4621      	mov	r1, r4
 8008048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800804c:	3b30      	subs	r3, #48	@ 0x30
 800804e:	2b09      	cmp	r3, #9
 8008050:	d94b      	bls.n	80080ea <_vfiprintf_r+0x1a2>
 8008052:	b1b0      	cbz	r0, 8008082 <_vfiprintf_r+0x13a>
 8008054:	9207      	str	r2, [sp, #28]
 8008056:	e014      	b.n	8008082 <_vfiprintf_r+0x13a>
 8008058:	eba0 0308 	sub.w	r3, r0, r8
 800805c:	fa09 f303 	lsl.w	r3, r9, r3
 8008060:	4313      	orrs	r3, r2
 8008062:	9304      	str	r3, [sp, #16]
 8008064:	46a2      	mov	sl, r4
 8008066:	e7d2      	b.n	800800e <_vfiprintf_r+0xc6>
 8008068:	9b03      	ldr	r3, [sp, #12]
 800806a:	1d19      	adds	r1, r3, #4
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	9103      	str	r1, [sp, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	bfbb      	ittet	lt
 8008074:	425b      	neglt	r3, r3
 8008076:	f042 0202 	orrlt.w	r2, r2, #2
 800807a:	9307      	strge	r3, [sp, #28]
 800807c:	9307      	strlt	r3, [sp, #28]
 800807e:	bfb8      	it	lt
 8008080:	9204      	strlt	r2, [sp, #16]
 8008082:	7823      	ldrb	r3, [r4, #0]
 8008084:	2b2e      	cmp	r3, #46	@ 0x2e
 8008086:	d10a      	bne.n	800809e <_vfiprintf_r+0x156>
 8008088:	7863      	ldrb	r3, [r4, #1]
 800808a:	2b2a      	cmp	r3, #42	@ 0x2a
 800808c:	d132      	bne.n	80080f4 <_vfiprintf_r+0x1ac>
 800808e:	9b03      	ldr	r3, [sp, #12]
 8008090:	1d1a      	adds	r2, r3, #4
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	9203      	str	r2, [sp, #12]
 8008096:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800809a:	3402      	adds	r4, #2
 800809c:	9305      	str	r3, [sp, #20]
 800809e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008174 <_vfiprintf_r+0x22c>
 80080a2:	7821      	ldrb	r1, [r4, #0]
 80080a4:	2203      	movs	r2, #3
 80080a6:	4650      	mov	r0, sl
 80080a8:	f7f8 f8aa 	bl	8000200 <memchr>
 80080ac:	b138      	cbz	r0, 80080be <_vfiprintf_r+0x176>
 80080ae:	9b04      	ldr	r3, [sp, #16]
 80080b0:	eba0 000a 	sub.w	r0, r0, sl
 80080b4:	2240      	movs	r2, #64	@ 0x40
 80080b6:	4082      	lsls	r2, r0
 80080b8:	4313      	orrs	r3, r2
 80080ba:	3401      	adds	r4, #1
 80080bc:	9304      	str	r3, [sp, #16]
 80080be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c2:	4829      	ldr	r0, [pc, #164]	@ (8008168 <_vfiprintf_r+0x220>)
 80080c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080c8:	2206      	movs	r2, #6
 80080ca:	f7f8 f899 	bl	8000200 <memchr>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d03f      	beq.n	8008152 <_vfiprintf_r+0x20a>
 80080d2:	4b26      	ldr	r3, [pc, #152]	@ (800816c <_vfiprintf_r+0x224>)
 80080d4:	bb1b      	cbnz	r3, 800811e <_vfiprintf_r+0x1d6>
 80080d6:	9b03      	ldr	r3, [sp, #12]
 80080d8:	3307      	adds	r3, #7
 80080da:	f023 0307 	bic.w	r3, r3, #7
 80080de:	3308      	adds	r3, #8
 80080e0:	9303      	str	r3, [sp, #12]
 80080e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080e4:	443b      	add	r3, r7
 80080e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80080e8:	e76a      	b.n	8007fc0 <_vfiprintf_r+0x78>
 80080ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80080ee:	460c      	mov	r4, r1
 80080f0:	2001      	movs	r0, #1
 80080f2:	e7a8      	b.n	8008046 <_vfiprintf_r+0xfe>
 80080f4:	2300      	movs	r3, #0
 80080f6:	3401      	adds	r4, #1
 80080f8:	9305      	str	r3, [sp, #20]
 80080fa:	4619      	mov	r1, r3
 80080fc:	f04f 0c0a 	mov.w	ip, #10
 8008100:	4620      	mov	r0, r4
 8008102:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008106:	3a30      	subs	r2, #48	@ 0x30
 8008108:	2a09      	cmp	r2, #9
 800810a:	d903      	bls.n	8008114 <_vfiprintf_r+0x1cc>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d0c6      	beq.n	800809e <_vfiprintf_r+0x156>
 8008110:	9105      	str	r1, [sp, #20]
 8008112:	e7c4      	b.n	800809e <_vfiprintf_r+0x156>
 8008114:	fb0c 2101 	mla	r1, ip, r1, r2
 8008118:	4604      	mov	r4, r0
 800811a:	2301      	movs	r3, #1
 800811c:	e7f0      	b.n	8008100 <_vfiprintf_r+0x1b8>
 800811e:	ab03      	add	r3, sp, #12
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	462a      	mov	r2, r5
 8008124:	4b12      	ldr	r3, [pc, #72]	@ (8008170 <_vfiprintf_r+0x228>)
 8008126:	a904      	add	r1, sp, #16
 8008128:	4630      	mov	r0, r6
 800812a:	f7fd fdc3 	bl	8005cb4 <_printf_float>
 800812e:	4607      	mov	r7, r0
 8008130:	1c78      	adds	r0, r7, #1
 8008132:	d1d6      	bne.n	80080e2 <_vfiprintf_r+0x19a>
 8008134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008136:	07d9      	lsls	r1, r3, #31
 8008138:	d405      	bmi.n	8008146 <_vfiprintf_r+0x1fe>
 800813a:	89ab      	ldrh	r3, [r5, #12]
 800813c:	059a      	lsls	r2, r3, #22
 800813e:	d402      	bmi.n	8008146 <_vfiprintf_r+0x1fe>
 8008140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008142:	f7fe fbf7 	bl	8006934 <__retarget_lock_release_recursive>
 8008146:	89ab      	ldrh	r3, [r5, #12]
 8008148:	065b      	lsls	r3, r3, #25
 800814a:	f53f af1f 	bmi.w	8007f8c <_vfiprintf_r+0x44>
 800814e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008150:	e71e      	b.n	8007f90 <_vfiprintf_r+0x48>
 8008152:	ab03      	add	r3, sp, #12
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	462a      	mov	r2, r5
 8008158:	4b05      	ldr	r3, [pc, #20]	@ (8008170 <_vfiprintf_r+0x228>)
 800815a:	a904      	add	r1, sp, #16
 800815c:	4630      	mov	r0, r6
 800815e:	f7fe f841 	bl	80061e4 <_printf_i>
 8008162:	e7e4      	b.n	800812e <_vfiprintf_r+0x1e6>
 8008164:	08008bb0 	.word	0x08008bb0
 8008168:	08008bba 	.word	0x08008bba
 800816c:	08005cb5 	.word	0x08005cb5
 8008170:	08007f23 	.word	0x08007f23
 8008174:	08008bb6 	.word	0x08008bb6

08008178 <__sflush_r>:
 8008178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800817c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008180:	0716      	lsls	r6, r2, #28
 8008182:	4605      	mov	r5, r0
 8008184:	460c      	mov	r4, r1
 8008186:	d454      	bmi.n	8008232 <__sflush_r+0xba>
 8008188:	684b      	ldr	r3, [r1, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	dc02      	bgt.n	8008194 <__sflush_r+0x1c>
 800818e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008190:	2b00      	cmp	r3, #0
 8008192:	dd48      	ble.n	8008226 <__sflush_r+0xae>
 8008194:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008196:	2e00      	cmp	r6, #0
 8008198:	d045      	beq.n	8008226 <__sflush_r+0xae>
 800819a:	2300      	movs	r3, #0
 800819c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80081a0:	682f      	ldr	r7, [r5, #0]
 80081a2:	6a21      	ldr	r1, [r4, #32]
 80081a4:	602b      	str	r3, [r5, #0]
 80081a6:	d030      	beq.n	800820a <__sflush_r+0x92>
 80081a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	0759      	lsls	r1, r3, #29
 80081ae:	d505      	bpl.n	80081bc <__sflush_r+0x44>
 80081b0:	6863      	ldr	r3, [r4, #4]
 80081b2:	1ad2      	subs	r2, r2, r3
 80081b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081b6:	b10b      	cbz	r3, 80081bc <__sflush_r+0x44>
 80081b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081ba:	1ad2      	subs	r2, r2, r3
 80081bc:	2300      	movs	r3, #0
 80081be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081c0:	6a21      	ldr	r1, [r4, #32]
 80081c2:	4628      	mov	r0, r5
 80081c4:	47b0      	blx	r6
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	d106      	bne.n	80081da <__sflush_r+0x62>
 80081cc:	6829      	ldr	r1, [r5, #0]
 80081ce:	291d      	cmp	r1, #29
 80081d0:	d82b      	bhi.n	800822a <__sflush_r+0xb2>
 80081d2:	4a2a      	ldr	r2, [pc, #168]	@ (800827c <__sflush_r+0x104>)
 80081d4:	410a      	asrs	r2, r1
 80081d6:	07d6      	lsls	r6, r2, #31
 80081d8:	d427      	bmi.n	800822a <__sflush_r+0xb2>
 80081da:	2200      	movs	r2, #0
 80081dc:	6062      	str	r2, [r4, #4]
 80081de:	04d9      	lsls	r1, r3, #19
 80081e0:	6922      	ldr	r2, [r4, #16]
 80081e2:	6022      	str	r2, [r4, #0]
 80081e4:	d504      	bpl.n	80081f0 <__sflush_r+0x78>
 80081e6:	1c42      	adds	r2, r0, #1
 80081e8:	d101      	bne.n	80081ee <__sflush_r+0x76>
 80081ea:	682b      	ldr	r3, [r5, #0]
 80081ec:	b903      	cbnz	r3, 80081f0 <__sflush_r+0x78>
 80081ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80081f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081f2:	602f      	str	r7, [r5, #0]
 80081f4:	b1b9      	cbz	r1, 8008226 <__sflush_r+0xae>
 80081f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081fa:	4299      	cmp	r1, r3
 80081fc:	d002      	beq.n	8008204 <__sflush_r+0x8c>
 80081fe:	4628      	mov	r0, r5
 8008200:	f7ff f9f6 	bl	80075f0 <_free_r>
 8008204:	2300      	movs	r3, #0
 8008206:	6363      	str	r3, [r4, #52]	@ 0x34
 8008208:	e00d      	b.n	8008226 <__sflush_r+0xae>
 800820a:	2301      	movs	r3, #1
 800820c:	4628      	mov	r0, r5
 800820e:	47b0      	blx	r6
 8008210:	4602      	mov	r2, r0
 8008212:	1c50      	adds	r0, r2, #1
 8008214:	d1c9      	bne.n	80081aa <__sflush_r+0x32>
 8008216:	682b      	ldr	r3, [r5, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d0c6      	beq.n	80081aa <__sflush_r+0x32>
 800821c:	2b1d      	cmp	r3, #29
 800821e:	d001      	beq.n	8008224 <__sflush_r+0xac>
 8008220:	2b16      	cmp	r3, #22
 8008222:	d11e      	bne.n	8008262 <__sflush_r+0xea>
 8008224:	602f      	str	r7, [r5, #0]
 8008226:	2000      	movs	r0, #0
 8008228:	e022      	b.n	8008270 <__sflush_r+0xf8>
 800822a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800822e:	b21b      	sxth	r3, r3
 8008230:	e01b      	b.n	800826a <__sflush_r+0xf2>
 8008232:	690f      	ldr	r7, [r1, #16]
 8008234:	2f00      	cmp	r7, #0
 8008236:	d0f6      	beq.n	8008226 <__sflush_r+0xae>
 8008238:	0793      	lsls	r3, r2, #30
 800823a:	680e      	ldr	r6, [r1, #0]
 800823c:	bf08      	it	eq
 800823e:	694b      	ldreq	r3, [r1, #20]
 8008240:	600f      	str	r7, [r1, #0]
 8008242:	bf18      	it	ne
 8008244:	2300      	movne	r3, #0
 8008246:	eba6 0807 	sub.w	r8, r6, r7
 800824a:	608b      	str	r3, [r1, #8]
 800824c:	f1b8 0f00 	cmp.w	r8, #0
 8008250:	dde9      	ble.n	8008226 <__sflush_r+0xae>
 8008252:	6a21      	ldr	r1, [r4, #32]
 8008254:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008256:	4643      	mov	r3, r8
 8008258:	463a      	mov	r2, r7
 800825a:	4628      	mov	r0, r5
 800825c:	47b0      	blx	r6
 800825e:	2800      	cmp	r0, #0
 8008260:	dc08      	bgt.n	8008274 <__sflush_r+0xfc>
 8008262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800826a:	81a3      	strh	r3, [r4, #12]
 800826c:	f04f 30ff 	mov.w	r0, #4294967295
 8008270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008274:	4407      	add	r7, r0
 8008276:	eba8 0800 	sub.w	r8, r8, r0
 800827a:	e7e7      	b.n	800824c <__sflush_r+0xd4>
 800827c:	dfbffffe 	.word	0xdfbffffe

08008280 <_fflush_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	690b      	ldr	r3, [r1, #16]
 8008284:	4605      	mov	r5, r0
 8008286:	460c      	mov	r4, r1
 8008288:	b913      	cbnz	r3, 8008290 <_fflush_r+0x10>
 800828a:	2500      	movs	r5, #0
 800828c:	4628      	mov	r0, r5
 800828e:	bd38      	pop	{r3, r4, r5, pc}
 8008290:	b118      	cbz	r0, 800829a <_fflush_r+0x1a>
 8008292:	6a03      	ldr	r3, [r0, #32]
 8008294:	b90b      	cbnz	r3, 800829a <_fflush_r+0x1a>
 8008296:	f7fe f951 	bl	800653c <__sinit>
 800829a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0f3      	beq.n	800828a <_fflush_r+0xa>
 80082a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80082a4:	07d0      	lsls	r0, r2, #31
 80082a6:	d404      	bmi.n	80082b2 <_fflush_r+0x32>
 80082a8:	0599      	lsls	r1, r3, #22
 80082aa:	d402      	bmi.n	80082b2 <_fflush_r+0x32>
 80082ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ae:	f7fe fb40 	bl	8006932 <__retarget_lock_acquire_recursive>
 80082b2:	4628      	mov	r0, r5
 80082b4:	4621      	mov	r1, r4
 80082b6:	f7ff ff5f 	bl	8008178 <__sflush_r>
 80082ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082bc:	07da      	lsls	r2, r3, #31
 80082be:	4605      	mov	r5, r0
 80082c0:	d4e4      	bmi.n	800828c <_fflush_r+0xc>
 80082c2:	89a3      	ldrh	r3, [r4, #12]
 80082c4:	059b      	lsls	r3, r3, #22
 80082c6:	d4e1      	bmi.n	800828c <_fflush_r+0xc>
 80082c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ca:	f7fe fb33 	bl	8006934 <__retarget_lock_release_recursive>
 80082ce:	e7dd      	b.n	800828c <_fflush_r+0xc>

080082d0 <__swhatbuf_r>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	460c      	mov	r4, r1
 80082d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d8:	2900      	cmp	r1, #0
 80082da:	b096      	sub	sp, #88	@ 0x58
 80082dc:	4615      	mov	r5, r2
 80082de:	461e      	mov	r6, r3
 80082e0:	da0d      	bge.n	80082fe <__swhatbuf_r+0x2e>
 80082e2:	89a3      	ldrh	r3, [r4, #12]
 80082e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082e8:	f04f 0100 	mov.w	r1, #0
 80082ec:	bf14      	ite	ne
 80082ee:	2340      	movne	r3, #64	@ 0x40
 80082f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082f4:	2000      	movs	r0, #0
 80082f6:	6031      	str	r1, [r6, #0]
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	b016      	add	sp, #88	@ 0x58
 80082fc:	bd70      	pop	{r4, r5, r6, pc}
 80082fe:	466a      	mov	r2, sp
 8008300:	f000 f848 	bl	8008394 <_fstat_r>
 8008304:	2800      	cmp	r0, #0
 8008306:	dbec      	blt.n	80082e2 <__swhatbuf_r+0x12>
 8008308:	9901      	ldr	r1, [sp, #4]
 800830a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800830e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008312:	4259      	negs	r1, r3
 8008314:	4159      	adcs	r1, r3
 8008316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800831a:	e7eb      	b.n	80082f4 <__swhatbuf_r+0x24>

0800831c <__smakebuf_r>:
 800831c:	898b      	ldrh	r3, [r1, #12]
 800831e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008320:	079d      	lsls	r5, r3, #30
 8008322:	4606      	mov	r6, r0
 8008324:	460c      	mov	r4, r1
 8008326:	d507      	bpl.n	8008338 <__smakebuf_r+0x1c>
 8008328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	6123      	str	r3, [r4, #16]
 8008330:	2301      	movs	r3, #1
 8008332:	6163      	str	r3, [r4, #20]
 8008334:	b003      	add	sp, #12
 8008336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008338:	ab01      	add	r3, sp, #4
 800833a:	466a      	mov	r2, sp
 800833c:	f7ff ffc8 	bl	80082d0 <__swhatbuf_r>
 8008340:	9f00      	ldr	r7, [sp, #0]
 8008342:	4605      	mov	r5, r0
 8008344:	4639      	mov	r1, r7
 8008346:	4630      	mov	r0, r6
 8008348:	f7ff f9c6 	bl	80076d8 <_malloc_r>
 800834c:	b948      	cbnz	r0, 8008362 <__smakebuf_r+0x46>
 800834e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008352:	059a      	lsls	r2, r3, #22
 8008354:	d4ee      	bmi.n	8008334 <__smakebuf_r+0x18>
 8008356:	f023 0303 	bic.w	r3, r3, #3
 800835a:	f043 0302 	orr.w	r3, r3, #2
 800835e:	81a3      	strh	r3, [r4, #12]
 8008360:	e7e2      	b.n	8008328 <__smakebuf_r+0xc>
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	6020      	str	r0, [r4, #0]
 8008366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800836a:	81a3      	strh	r3, [r4, #12]
 800836c:	9b01      	ldr	r3, [sp, #4]
 800836e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008372:	b15b      	cbz	r3, 800838c <__smakebuf_r+0x70>
 8008374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008378:	4630      	mov	r0, r6
 800837a:	f000 f81d 	bl	80083b8 <_isatty_r>
 800837e:	b128      	cbz	r0, 800838c <__smakebuf_r+0x70>
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	f023 0303 	bic.w	r3, r3, #3
 8008386:	f043 0301 	orr.w	r3, r3, #1
 800838a:	81a3      	strh	r3, [r4, #12]
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	431d      	orrs	r5, r3
 8008390:	81a5      	strh	r5, [r4, #12]
 8008392:	e7cf      	b.n	8008334 <__smakebuf_r+0x18>

08008394 <_fstat_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4d07      	ldr	r5, [pc, #28]	@ (80083b4 <_fstat_r+0x20>)
 8008398:	2300      	movs	r3, #0
 800839a:	4604      	mov	r4, r0
 800839c:	4608      	mov	r0, r1
 800839e:	4611      	mov	r1, r2
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	f7fa fc2c 	bl	8002bfe <_fstat>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d102      	bne.n	80083b0 <_fstat_r+0x1c>
 80083aa:	682b      	ldr	r3, [r5, #0]
 80083ac:	b103      	cbz	r3, 80083b0 <_fstat_r+0x1c>
 80083ae:	6023      	str	r3, [r4, #0]
 80083b0:	bd38      	pop	{r3, r4, r5, pc}
 80083b2:	bf00      	nop
 80083b4:	20000468 	.word	0x20000468

080083b8 <_isatty_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d06      	ldr	r5, [pc, #24]	@ (80083d4 <_isatty_r+0x1c>)
 80083bc:	2300      	movs	r3, #0
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	f7fa fc2b 	bl	8002c1e <_isatty>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_isatty_r+0x1a>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_isatty_r+0x1a>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	20000468 	.word	0x20000468

080083d8 <_sbrk_r>:
 80083d8:	b538      	push	{r3, r4, r5, lr}
 80083da:	4d06      	ldr	r5, [pc, #24]	@ (80083f4 <_sbrk_r+0x1c>)
 80083dc:	2300      	movs	r3, #0
 80083de:	4604      	mov	r4, r0
 80083e0:	4608      	mov	r0, r1
 80083e2:	602b      	str	r3, [r5, #0]
 80083e4:	f7fa fc34 	bl	8002c50 <_sbrk>
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	d102      	bne.n	80083f2 <_sbrk_r+0x1a>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	b103      	cbz	r3, 80083f2 <_sbrk_r+0x1a>
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	20000468 	.word	0x20000468

080083f8 <__assert_func>:
 80083f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083fa:	4614      	mov	r4, r2
 80083fc:	461a      	mov	r2, r3
 80083fe:	4b09      	ldr	r3, [pc, #36]	@ (8008424 <__assert_func+0x2c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4605      	mov	r5, r0
 8008404:	68d8      	ldr	r0, [r3, #12]
 8008406:	b954      	cbnz	r4, 800841e <__assert_func+0x26>
 8008408:	4b07      	ldr	r3, [pc, #28]	@ (8008428 <__assert_func+0x30>)
 800840a:	461c      	mov	r4, r3
 800840c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008410:	9100      	str	r1, [sp, #0]
 8008412:	462b      	mov	r3, r5
 8008414:	4905      	ldr	r1, [pc, #20]	@ (800842c <__assert_func+0x34>)
 8008416:	f000 f841 	bl	800849c <fiprintf>
 800841a:	f000 f851 	bl	80084c0 <abort>
 800841e:	4b04      	ldr	r3, [pc, #16]	@ (8008430 <__assert_func+0x38>)
 8008420:	e7f4      	b.n	800840c <__assert_func+0x14>
 8008422:	bf00      	nop
 8008424:	20000018 	.word	0x20000018
 8008428:	08008c06 	.word	0x08008c06
 800842c:	08008bd8 	.word	0x08008bd8
 8008430:	08008bcb 	.word	0x08008bcb

08008434 <_calloc_r>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	fba1 5402 	umull	r5, r4, r1, r2
 800843a:	b93c      	cbnz	r4, 800844c <_calloc_r+0x18>
 800843c:	4629      	mov	r1, r5
 800843e:	f7ff f94b 	bl	80076d8 <_malloc_r>
 8008442:	4606      	mov	r6, r0
 8008444:	b928      	cbnz	r0, 8008452 <_calloc_r+0x1e>
 8008446:	2600      	movs	r6, #0
 8008448:	4630      	mov	r0, r6
 800844a:	bd70      	pop	{r4, r5, r6, pc}
 800844c:	220c      	movs	r2, #12
 800844e:	6002      	str	r2, [r0, #0]
 8008450:	e7f9      	b.n	8008446 <_calloc_r+0x12>
 8008452:	462a      	mov	r2, r5
 8008454:	4621      	mov	r1, r4
 8008456:	f7fe f9ef 	bl	8006838 <memset>
 800845a:	e7f5      	b.n	8008448 <_calloc_r+0x14>

0800845c <__ascii_mbtowc>:
 800845c:	b082      	sub	sp, #8
 800845e:	b901      	cbnz	r1, 8008462 <__ascii_mbtowc+0x6>
 8008460:	a901      	add	r1, sp, #4
 8008462:	b142      	cbz	r2, 8008476 <__ascii_mbtowc+0x1a>
 8008464:	b14b      	cbz	r3, 800847a <__ascii_mbtowc+0x1e>
 8008466:	7813      	ldrb	r3, [r2, #0]
 8008468:	600b      	str	r3, [r1, #0]
 800846a:	7812      	ldrb	r2, [r2, #0]
 800846c:	1e10      	subs	r0, r2, #0
 800846e:	bf18      	it	ne
 8008470:	2001      	movne	r0, #1
 8008472:	b002      	add	sp, #8
 8008474:	4770      	bx	lr
 8008476:	4610      	mov	r0, r2
 8008478:	e7fb      	b.n	8008472 <__ascii_mbtowc+0x16>
 800847a:	f06f 0001 	mvn.w	r0, #1
 800847e:	e7f8      	b.n	8008472 <__ascii_mbtowc+0x16>

08008480 <__ascii_wctomb>:
 8008480:	4603      	mov	r3, r0
 8008482:	4608      	mov	r0, r1
 8008484:	b141      	cbz	r1, 8008498 <__ascii_wctomb+0x18>
 8008486:	2aff      	cmp	r2, #255	@ 0xff
 8008488:	d904      	bls.n	8008494 <__ascii_wctomb+0x14>
 800848a:	228a      	movs	r2, #138	@ 0x8a
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	f04f 30ff 	mov.w	r0, #4294967295
 8008492:	4770      	bx	lr
 8008494:	700a      	strb	r2, [r1, #0]
 8008496:	2001      	movs	r0, #1
 8008498:	4770      	bx	lr
	...

0800849c <fiprintf>:
 800849c:	b40e      	push	{r1, r2, r3}
 800849e:	b503      	push	{r0, r1, lr}
 80084a0:	4601      	mov	r1, r0
 80084a2:	ab03      	add	r3, sp, #12
 80084a4:	4805      	ldr	r0, [pc, #20]	@ (80084bc <fiprintf+0x20>)
 80084a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084aa:	6800      	ldr	r0, [r0, #0]
 80084ac:	9301      	str	r3, [sp, #4]
 80084ae:	f7ff fd4b 	bl	8007f48 <_vfiprintf_r>
 80084b2:	b002      	add	sp, #8
 80084b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084b8:	b003      	add	sp, #12
 80084ba:	4770      	bx	lr
 80084bc:	20000018 	.word	0x20000018

080084c0 <abort>:
 80084c0:	b508      	push	{r3, lr}
 80084c2:	2006      	movs	r0, #6
 80084c4:	f000 f82c 	bl	8008520 <raise>
 80084c8:	2001      	movs	r0, #1
 80084ca:	f7fa fb64 	bl	8002b96 <_exit>

080084ce <_raise_r>:
 80084ce:	291f      	cmp	r1, #31
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4605      	mov	r5, r0
 80084d4:	460c      	mov	r4, r1
 80084d6:	d904      	bls.n	80084e2 <_raise_r+0x14>
 80084d8:	2316      	movs	r3, #22
 80084da:	6003      	str	r3, [r0, #0]
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295
 80084e0:	bd38      	pop	{r3, r4, r5, pc}
 80084e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80084e4:	b112      	cbz	r2, 80084ec <_raise_r+0x1e>
 80084e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084ea:	b94b      	cbnz	r3, 8008500 <_raise_r+0x32>
 80084ec:	4628      	mov	r0, r5
 80084ee:	f000 f831 	bl	8008554 <_getpid_r>
 80084f2:	4622      	mov	r2, r4
 80084f4:	4601      	mov	r1, r0
 80084f6:	4628      	mov	r0, r5
 80084f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084fc:	f000 b818 	b.w	8008530 <_kill_r>
 8008500:	2b01      	cmp	r3, #1
 8008502:	d00a      	beq.n	800851a <_raise_r+0x4c>
 8008504:	1c59      	adds	r1, r3, #1
 8008506:	d103      	bne.n	8008510 <_raise_r+0x42>
 8008508:	2316      	movs	r3, #22
 800850a:	6003      	str	r3, [r0, #0]
 800850c:	2001      	movs	r0, #1
 800850e:	e7e7      	b.n	80084e0 <_raise_r+0x12>
 8008510:	2100      	movs	r1, #0
 8008512:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008516:	4620      	mov	r0, r4
 8008518:	4798      	blx	r3
 800851a:	2000      	movs	r0, #0
 800851c:	e7e0      	b.n	80084e0 <_raise_r+0x12>
	...

08008520 <raise>:
 8008520:	4b02      	ldr	r3, [pc, #8]	@ (800852c <raise+0xc>)
 8008522:	4601      	mov	r1, r0
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	f7ff bfd2 	b.w	80084ce <_raise_r>
 800852a:	bf00      	nop
 800852c:	20000018 	.word	0x20000018

08008530 <_kill_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4d07      	ldr	r5, [pc, #28]	@ (8008550 <_kill_r+0x20>)
 8008534:	2300      	movs	r3, #0
 8008536:	4604      	mov	r4, r0
 8008538:	4608      	mov	r0, r1
 800853a:	4611      	mov	r1, r2
 800853c:	602b      	str	r3, [r5, #0]
 800853e:	f7fa fb1a 	bl	8002b76 <_kill>
 8008542:	1c43      	adds	r3, r0, #1
 8008544:	d102      	bne.n	800854c <_kill_r+0x1c>
 8008546:	682b      	ldr	r3, [r5, #0]
 8008548:	b103      	cbz	r3, 800854c <_kill_r+0x1c>
 800854a:	6023      	str	r3, [r4, #0]
 800854c:	bd38      	pop	{r3, r4, r5, pc}
 800854e:	bf00      	nop
 8008550:	20000468 	.word	0x20000468

08008554 <_getpid_r>:
 8008554:	f7fa bb07 	b.w	8002b66 <_getpid>

08008558 <_init>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr

08008564 <_fini>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr
